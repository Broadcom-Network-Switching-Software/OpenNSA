/***************************************************************************
 * 
 * This software is governed by the Broadcom Switch APIs license.
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenNSA/master/Legal/LICENSE file.
 * 
 * Copyright 2005-2020 Broadcom Inc. All rights reserved.
 * 
 ***************************************************************************
 *
 * This file defines common network port parameters.
 *
 * Its contents are not used directly by applications; it is used only
 * by header files of parent APIs which need to define port parameters.
 */

#ifndef _SHR_PORT_H
#define _SHR_PORT_H

#define _SHR_PORT_PRD_ETH_MAP_INDICATION  0x1000000
#define _SHR_PORT_PRD_TM_MAP_INDICATION   0x2000000
#define _SHR_PORT_PRD_IP_MAP_INDICATION   0x3000000
#define _SHR_PORT_PRD_MPLS_MAP_INDICATION 0x4000000

#define _SHR_PORT_PRD_ETH_PCP_KEY_MASK    0x7
#define _SHR_PORT_PRD_ETH_DEI_KEY_MASK    0x1
#define _SHR_PORT_PRD_TM_TC_KEY_MASK      0xF
#define _SHR_PORT_PRD_TM_DP_KEY_MASK      0x3
#define _SHR_PORT_PRD_IP_DSCP_KEY_MASK    0x3F
#define _SHR_PORT_PRD_MPLS_EXP_KEY_MASK   0x7

#define _SHR_PORT_PRD_ETH_PCP_KEY_SIZE      3
#define _SHR_PORT_PRD_ETH_DEI_KEY_SIZE      1
#define _SHR_PORT_PRD_TM_TC_KEY_SIZE        4 /*TC is 4 bit in HiGig and 3 bits in ITMH/FTMH*/
#define _SHR_PORT_PRD_TM_DP_KEY_SIZE        2
#define _SHR_PORT_PRD_IP_DSCP_KEY_SIZE      6
#define _SHR_PORT_PRD_MPLS_EXP_KEY_SIZE     3

#define _SHR_PORT_PRD_ETH_KEY_MASK        (_SHR_PORT_PRD_ETH_PCP_KEY_MASK  << _SHR_PORT_PRD_ETH_DEI_KEY_SIZE) | _SHR_PORT_PRD_ETH_DEI_KEY_MASK
#define _SHR_PORT_PRD_TM_KEY_MASK         (_SHR_PORT_PRD_TM_TC_KEY_MASK << _SHR_PORT_PRD_TM_DP_KEY_SIZE) | _SHR_PORT_PRD_TM_DP_KEY_MASK
#define _SHR_PORT_PRD_IP_KEY_MASK         _SHR_PORT_PRD_IP_DSCP_KEY_MASK
#define _SHR_PORT_PRD_MPLS_KEY_MASK       _SHR_PORT_PRD_MPLS_EXP_KEY_MASK

#define _SHR_PORT_PRD_ETH_KEY_SIZE        _SHR_PORT_PRD_ETH_PCP_KEY_SIZE + _SHR_PORT_PRD_ETH_DEI_KEY_SIZE
#define _SHR_PORT_PRD_TM_KEY_SIZE         _SHR_PORT_PRD_TM_TC_KEY_SIZE + _SHR_PORT_PRD_TM_DP_KEY_SIZE
#define _SHR_PORT_PRD_IP_KEY_SIZE         _SHR_PORT_PRD_IP_DSCP_KEY_SIZE
#define _SHR_PORT_PRD_MPLS_KEY_SIZE       _SHR_PORT_PRD_MPLS_EXP_KEY_SIZE

/*
 * Typedef:
 *    _shr_port_t
 * Purpose:
 *    Port number type for shared definitions
 * Note:
 *    Currently it is NOT used to define bcm_port_t and soc_port_t, but thus
 *    should be changed
 */
#include <sal/types.h>

typedef int _shr_port_t;

/*
 * Defines:
 *	_SHR_PORT_DUPLEX_*
 * Purpose:
 *	Defines duplexity of a port
 */

typedef enum _shr_port_duplex_e {
    _SHR_PORT_DUPLEX_HALF,
    _SHR_PORT_DUPLEX_FULL,
    _SHR_PORT_DUPLEX_COUNT	/* last, please */
} _shr_port_duplex_t;

/*
 * Defines:
 *  _SHR_PORT_IF_*
 * Purpose:
 *  Defines interface type between MAC and PHY.
 */

typedef enum _shr_port_if_e {
    _SHR_PORT_IF_NOCXN, /* No physical connection */
    _SHR_PORT_IF_NULL,  /* Pass-through connection without PHY */
    _SHR_PORT_IF_MII,
    _SHR_PORT_IF_GMII,
    _SHR_PORT_IF_SGMII,
    _SHR_PORT_IF_TBI,
    _SHR_PORT_IF_XGMII,
    _SHR_PORT_IF_RGMII,
    _SHR_PORT_IF_RvMII,
    _SHR_PORT_IF_SFI,
    _SHR_PORT_IF_XFI,
    _SHR_PORT_IF_KR,
    _SHR_PORT_IF_KR4,
    _SHR_PORT_IF_CR,
    _SHR_PORT_IF_CR4,
    _SHR_PORT_IF_XLAUI,
    _SHR_PORT_IF_SR,
    _SHR_PORT_IF_RXAUI,
    _SHR_PORT_IF_XAUI,
    _SHR_PORT_IF_SPAUI,
    _SHR_PORT_IF_QSGMII,
    _SHR_PORT_IF_ILKN,
    _SHR_PORT_IF_RCY,
    _SHR_PORT_IF_FAT_PIPE,
    _SHR_PORT_IF_CGMII,
    _SHR_PORT_IF_CAUI,
    _SHR_PORT_IF_LR,
    _SHR_PORT_IF_LR4,
    _SHR_PORT_IF_SR4,
    _SHR_PORT_IF_KX,
    _SHR_PORT_IF_ZR,
    _SHR_PORT_IF_SR10,
    _SHR_PORT_IF_OTL,
    _SHR_PORT_IF_CPU,
    _SHR_PORT_IF_OLP,
    _SHR_PORT_IF_OAMP,
    _SHR_PORT_IF_ERP,
    _SHR_PORT_IF_TM_INTERNAL_PKT,   
    _SHR_PORT_IF_SR2,
    _SHR_PORT_IF_KR2,
    _SHR_PORT_IF_CR2,
    _SHR_PORT_IF_XFI2,
    _SHR_PORT_IF_XLAUI2,
    _SHR_PORT_IF_CR10,
    _SHR_PORT_IF_KR10,
    _SHR_PORT_IF_LR10,
    _SHR_PORT_IF_ER,
    _SHR_PORT_IF_ER2,
    _SHR_PORT_IF_ER4,
    _SHR_PORT_IF_CX,
    _SHR_PORT_IF_CX2,
    _SHR_PORT_IF_CX4,
    _SHR_PORT_IF_CAUI_C2C,
    _SHR_PORT_IF_CAUI_C2M,
    _SHR_PORT_IF_VSR,
    _SHR_PORT_IF_LR2,
    _SHR_PORT_IF_LRM,
    _SHR_PORT_IF_XLPPI,
    _SHR_PORT_IF_2500X,
    _SHR_PORT_IF_SAT,
    _SHR_PORT_IF_IPSEC,
    _SHR_PORT_IF_LBG,
    _SHR_PORT_IF_CAUI4,
    _SHR_PORT_IF_5000X,
    _SHR_PORT_IF_EVENTOR,
    _SHR_PORT_IF_RCY_MIRROR,
    _SHR_PORT_IF_CPRI,
    _SHR_PORT_IF_RSVD4,
    _SHR_PORT_IF_NIF_ETH,
    _SHR_PORT_IF_FLEXE_CLIENT,
    _SHR_PORT_IF_VIRTUAL_FLEXE_CLIENT,
    _SHR_PORT_IF_SCH,
    _SHR_PORT_IF_COUNT /* last, please */
} _shr_port_if_t;

/*
 * Defines:
 *  _SHR_PORT_MS_*
 * Purpose:
 *  Defines master/slave mode of a port (PHY).
 */

typedef enum _shr_port_ms_e {
    _SHR_PORT_MS_SLAVE,
    _SHR_PORT_MS_MASTER,
    _SHR_PORT_MS_AUTO,
    _SHR_PORT_MS_NONE,
    _SHR_PORT_MS_COUNT  /* last, please */
} _shr_port_ms_t;

/*
 * Defines:
 *  _SHR_PORT_ENCAP_*
 * Purpose:
 *  Defines various header encapsulation modes.
 * Notes:
 *  WARNING: values must match MAC_TXCTRL register HDRMODE field.
 */

typedef enum _shr_port_encap_e {
    _SHR_PORT_ENCAP_IEEE = 0,               /* IEEE 802.3 Ethernet-II  */
    _SHR_PORT_ENCAP_HIGIG = 1,              /* HIGIG Header mode       */
    _SHR_PORT_ENCAP_B5632 = 2,              /* BCM5632 Header mode     */
    _SHR_PORT_ENCAP_HIGIG2 = 3,             /* HIGIG2 Header mode      */
    _SHR_PORT_ENCAP_HIGIG2_LITE = 4,        /* HIGIG2 Header mode (Raptor style) */
    _SHR_PORT_ENCAP_HIGIG2_L2 = 5,          /* HIGIG2 L2 Tunnel mode   */
    _SHR_PORT_ENCAP_HIGIG2_IP_GRE = 6,      /* HIGIG2 L3 (IP-GRE) Tunnel mode    */
    _SHR_PORT_ENCAP_OBSOLETE = 7,           /* Obsolete header mode         */
    _SHR_PORT_ENCAP_PREAMBLE_SOP_ONLY = 8,  /* 1B preamble mode        */
    _SHR_PORT_ENCAP_HIGIG_OVER_ETHERNET = 9,/* HIGIG over Ethernet     */
    _SHR_PORT_ENCAP_CPRI = 10 ,             /* CPRI  radio port encap*/                   
    _SHR_PORT_ENCAP_RSVD4 = 11 ,            /* RSVD4 radio port encap*/                   
    _SHR_PORT_ENCAP_HIGIG3 = 12,            /* HIGIG3 Header mode      */
    _SHR_PORT_ENCAP_COUNT   /* last, please */
} _shr_port_encap_t;

#define _SHR_PORT_ENCAP_NAMES_INITIALIZER { \
    "IEEE", \
    "HiGig", \
    "B5632", \
    "HiGig2", \
    "HiGig2-Lite", \
    "HiGig2_L2", \
    "HiGig2_IP_GRE", \
    "Obsolete", \
    "SOP_Only", \
    "HiGig_over_Ethernet", \
    "CPRI", \
    "RSVD4", \
    "HiGig3", \
    "MAX_Count" \
    }

/*
 * Defines:
 *  _SHR_PORT_STP_*
 * Purpose:
 *  Defines the spanning tree states of a port.
 */

typedef enum _shr_port_stp_e {
    _SHR_PORT_STP_DISABLE   = 0,
    _SHR_PORT_STP_BLOCK     = 1,
    _SHR_PORT_STP_LISTEN    = 2,
    _SHR_PORT_STP_LEARN     = 3,
    _SHR_PORT_STP_FORWARD   = 4,
    _SHR_PORT_STP_COUNT = 5   /* last, please */
} _shr_port_stp_t;

/*
 * Defines:
 *      _SHR_PORT_MDIX_*
 * Purpose:
 *      Defines the MDI crossover (MDIX) modes for the port
 */
typedef enum _shr_port_mdix_e {
    _SHR_PORT_MDIX_AUTO,
    _SHR_PORT_MDIX_FORCE_AUTO,
    _SHR_PORT_MDIX_NORMAL,
    _SHR_PORT_MDIX_XOVER,
    _SHR_PORT_MDIX_COUNT    /* last, please */
} _shr_port_mdix_t;

/*
 * Defines:
 *      _SHR_PORT_MDIX_STATUS_*
 * Purpose:
 *      Defines the MDI crossover state
 */
typedef enum _shr_port_mdix_status_e {
    _SHR_PORT_MDIX_STATUS_NORMAL,
    _SHR_PORT_MDIX_STATUS_XOVER,
    _SHR_PORT_MDIX_STATUS_COUNT       /* last, please */
} _shr_port_mdix_status_t;

/*
 * Defines:
 *      _SHR_PORT_MEDIUM_*
 * Purpose:
 *      Supported physical mediums
 */
typedef enum _shr_port_medium_e {
    _SHR_PORT_MEDIUM_NONE              = 0,
    _SHR_PORT_MEDIUM_COPPER            = 1,
    _SHR_PORT_MEDIUM_FIBER             = 2,
    _SHR_PORT_MEDIUM_BACKPLANE,
    _SHR_PORT_MEDIUM_ALL,              /* this defines mainly for local_ability_get function */
    _SHR_PORT_MEDIUM_COUNT             /* last, please */
} _shr_port_medium_t;

/*
 * Defines:
 *      _SHR_PORT_MCAST_FLOOD_*
 * Purpose:
 *      Multicast packet flooding mode
 */
typedef enum _shr_port_mcast_flood_e {
    _SHR_PORT_MCAST_FLOOD_ALL     = 0,
    _SHR_PORT_MCAST_FLOOD_UNKNOWN = 1,
    _SHR_PORT_MCAST_FLOOD_NONE    = 2,
    _SHR_PORT_MCAST_FLOOD_COUNT         /* last, please */
} _shr_port_mcast_flood_t;

/*
 * Defines:
 *  _SHR_PORT_CABLE_STATE_*
 * Purpose:
 *  Cable diag state (per pair and overall)
 */
typedef enum {
    _SHR_PORT_CABLE_STATE_OK,
    _SHR_PORT_CABLE_STATE_OPEN,
    _SHR_PORT_CABLE_STATE_SHORT,
    _SHR_PORT_CABLE_STATE_OPENSHORT,
    _SHR_PORT_CABLE_STATE_CROSSTALK,
    _SHR_PORT_CABLE_STATE_UNKNOWN,
    _SHR_PORT_CABLE_STATE_COUNT /* last, as always */
} _shr_port_cable_state_t;

#define _SHR_PORT_CABLE_STATE_NAMES_INITIALIZER { \
    "Ok", \
    "Open", \
    "Short", \
    "Open/Short", \
    "Crosstalk", \
    "Unknown", \
    }

/*
 * Defines:
 *  _shr_port_cable_diag_t
 * Purpose:
 *  Shared definition of port (phy) cable diag status structure.
 *  Used both in soc/phy layer and in bcm layer.
 */
typedef struct _shr_port_cable_diag_s {
    _shr_port_cable_state_t state;  /* state of all pairs */
    int             npairs;    /* pair_* elements valid */
    _shr_port_cable_state_t pair_state[4];  /* pair state */
    int             pair_len[4];    /* pair length in metres */
    int             fuzz_len;   /* len values +/- this */
} _shr_port_cable_diag_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_INTR_*
 * Purpose:
 *     Generic PHY interrupt sources for use with:
 *     _SHR_PORT_PHY_CONTROL_INTR_MASK
 *     _SHR_PORT_PHY_CONTROL_INTR_STATUS
  */
#define _SHR_PORT_PHY_INTR_TIMESYNC_FRAMESYNC   0x1  /* Timesync framesync interrupt */
#define _SHR_PORT_PHY_INTR_TIMESYNC_TIMESTAMP   0x2  /* Timesync timestamp interrupt */
#define _SHR_PORT_PHY_INTR_LINK_EVENT           0x4  /* Link status event interrupt */
#define _SHR_PORT_PHY_INTR_AUTONEG_EVENT        0x8  /* Auto-negotiation event interrupt */
#define _SHR_PORT_PHY_INTR_PLL_EVENT            0x10 /* PLL status event interrupt */
#define _SHR_PORT_PHY_INTR_UC_EVENT             0x20 /* Microcontroller event interrupt */
#define _SHR_PORT_PHY_INTR_EMON_EVENT           0x40 /* Error monitor event interrupt */
#define _SHR_PORT_PHY_INTR_AUX_EVENT            0x80 /* Non-standard PHY event interrupt */

/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_*
 * Purpose:
 *     PHY specific control settings
 */
typedef enum _shr_port_phy_control_e {
    _SHR_PORT_PHY_CONTROL_WAN = 0,
    _SHR_PORT_PHY_CONTROL_PREEMPHASIS = 1,
    _SHR_PORT_PHY_CONTROL_DRIVER_CURRENT = 2,
    _SHR_PORT_PHY_CONTROL_PRE_DRIVER_CURRENT = 3,
    _SHR_PORT_PHY_CONTROL_EQUALIZER_BOOST = 4,
    _SHR_PORT_PHY_CONTROL_INTERFACE = 5,
    _SHR_PORT_PHY_CONTROL_INTERFACE_MAX = 6,
    _SHR_PORT_PHY_CONTROL_MACSEC_SWITCH_FIXED = 7,
    _SHR_PORT_PHY_CONTROL_MACSEC_SWITCH_FIXED_SPEED = 8,
    _SHR_PORT_PHY_CONTROL_MACSEC_SWITCH_FIXED_DUPLEX = 9,
    _SHR_PORT_PHY_CONTROL_MACSEC_SWITCH_FIXED_PAUSE = 10,
    _SHR_PORT_PHY_CONTROL_MACSEC_PAUSE_RX_FORWARD = 11,
    _SHR_PORT_PHY_CONTROL_MACSEC_PAUSE_TX_FORWARD = 12,
    _SHR_PORT_PHY_CONTROL_MACSEC_LINE_IPG = 13,
    _SHR_PORT_PHY_CONTROL_MACSEC_SWITCH_IPG = 14,
    _SHR_PORT_PHY_CONTROL_LONGREACH_SPEED = 15,
    _SHR_PORT_PHY_CONTROL_LONGREACH_PAIRS = 16,
    _SHR_PORT_PHY_CONTROL_LONGREACH_GAIN = 17,
    _SHR_PORT_PHY_CONTROL_LONGREACH_AUTONEG = 18,
    _SHR_PORT_PHY_CONTROL_LONGREACH_LOCAL_ABILITY = 19,
    _SHR_PORT_PHY_CONTROL_LONGREACH_REMOTE_ABILITY = 20,
    _SHR_PORT_PHY_CONTROL_LONGREACH_CURRENT_ABILITY = 21,
    _SHR_PORT_PHY_CONTROL_LONGREACH_MASTER = 22,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ACTIVE = 23,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ENABLE = 24,
    _SHR_PORT_PHY_CONTROL_LOOPBACK_EXTERNAL = 25,
    _SHR_PORT_PHY_CONTROL_CLOCK_ENABLE = 26,
    _SHR_PORT_PHY_CONTROL_CLOCK_SECONDARY_ENABLE = 27,
    _SHR_PORT_PHY_CONTROL_CLOCK_FREQUENCY = 28,
    _SHR_PORT_PHY_CONTROL_PORT_PRIMARY = 29,
    _SHR_PORT_PHY_CONTROL_PORT_OFFSET = 30,
    _SHR_PORT_PHY_CONTROL_PRE_PREEMPHASIS = 31,
    _SHR_PORT_PHY_CONTROL_ENCODING = 32,
    _SHR_PORT_PHY_CONTROL_SCRAMBLER = 33,
    _SHR_PORT_PHY_CONTROL_PRBS_POLYNOMIAL = 34,
    _SHR_PORT_PHY_CONTROL_PRBS_TX_INVERT_DATA = 35,
    _SHR_PORT_PHY_CONTROL_PRBS_TX_ENABLE = 36,
    _SHR_PORT_PHY_CONTROL_PRBS_RX_ENABLE = 37,
    _SHR_PORT_PHY_CONTROL_PRBS_RX_STATUS = 38,
    _SHR_PORT_PHY_CONTROL_SERDES_DRIVER_TUNE = 39,
    _SHR_PORT_PHY_CONTROL_SERDES_DRIVER_EQUALIZATION_TUNE_STATUS_FAR_END = 40,
    _SHR_PORT_PHY_CONTROL_8B10B = 41,
    _SHR_PORT_PHY_CONTROL_64B66B = 42,
    _SHR_PORT_PHY_CONTROL_POWER = 43,
    _SHR_PORT_PHY_CONTROL_POWER_AUTO_SLEEP_TIME = 44,
    _SHR_PORT_PHY_CONTROL_POWER_AUTO_WAKE_TIME = 45,
    _SHR_PORT_PHY_CONTROL_LINKDOWN_TRANSMIT = 46,
    _SHR_PORT_PHY_CONTROL_EDC_CONFIG = 47,
    _SHR_PORT_PHY_CONTROL_EDC_MODE = 48,
    _SHR_PORT_PHY_CONTROL_EEE = 49,
    _SHR_PORT_PHY_CONTROL_EEE_AUTO = 50,
    _SHR_PORT_PHY_CONTROL_EEE_AUTO_IDLE_THRESHOLD = 51,
    _SHR_PORT_PHY_CONTROL_EEE_AUTO_BUFFER_LIMIT = 52,
    _SHR_PORT_PHY_CONTROL_EEE_AUTO_FIXED_LATENCY = 53,
    _SHR_PORT_PHY_CONTROL_EEE_TRANSMIT_WAKE_TIME = 54,
    _SHR_PORT_PHY_CONTROL_EEE_RECEIVE_WAKE_TIME = 55,
    _SHR_PORT_PHY_CONTROL_EEE_TRANSMIT_SLEEP_TIME = 56,
    _SHR_PORT_PHY_CONTROL_EEE_RECEIVE_SLEEP_TIME = 57,
    _SHR_PORT_PHY_CONTROL_EEE_TRANSMIT_QUIET_TIME = 58,
    _SHR_PORT_PHY_CONTROL_EEE_RECEIVE_QUIET_TIME = 59,
    _SHR_PORT_PHY_CONTROL_EEE_TRANSMIT_REFRESH_TIME = 60,
    _SHR_PORT_PHY_CONTROL_EEE_TRANSMIT_EVENTS = 61,
    _SHR_PORT_PHY_CONTROL_EEE_TRANSMIT_DURATION = 62,
    _SHR_PORT_PHY_CONTROL_EEE_RECEIVE_EVENTS = 63,
    _SHR_PORT_PHY_CONTROL_EEE_RECEIVE_DURATION = 64,
    _SHR_PORT_PHY_CONTROL_EEE_STATISTICS_CLEAR = 65,
    _SHR_PORT_PHY_CONTROL_SERDES_TUNE_MARGIN_MAX = 66,
    _SHR_PORT_PHY_CONTROL_SERDES_TUNE_MARGIN_MODE = 67,
    _SHR_PORT_PHY_CONTROL_SERDES_TUNE_MARGIN_VALUE = 68,
    _SHR_PORT_PHY_CONTROL_PARALLEL_DETECTION = 69,
    _SHR_PORT_PHY_CONTROL_PARALLEL_DETECTION_10G = 70,
    _SHR_PORT_PHY_CONTROL_LOOPBACK_INTERNAL = 71,
    _SHR_PORT_PHY_CONTROL_LOOPBACK_REMOTE = 72,
    _SHR_PORT_PHY_CONTROL_LOOPBACK_REMOTE_PCS_BYPASS = 73,
    _SHR_PORT_PHY_CONTROL_FORWARD_ERROR_CORRECTION = 74,
    _SHR_PORT_PHY_CONTROL_CUSTOM1 = 75,
    _SHR_PORT_PHY_CONTROL_BERT_PATTERN = 76,
    _SHR_PORT_PHY_CONTROL_BERT_RUN = 77,
    _SHR_PORT_PHY_CONTROL_BERT_PACKET_SIZE = 78,
    _SHR_PORT_PHY_CONTROL_BERT_IPG = 79,
    _SHR_PORT_PHY_CONTROL_BERT_TX_PACKETS = 80,
    _SHR_PORT_PHY_CONTROL_BERT_RX_PACKETS = 81,
    _SHR_PORT_PHY_CONTROL_BERT_RX_ERROR_BITS = 82,
    _SHR_PORT_PHY_CONTROL_BERT_RX_ERROR_BYTES = 83,
    _SHR_PORT_PHY_CONTROL_BERT_RX_ERROR_PACKETS = 84,
    _SHR_PORT_PHY_CONTROL_PREEMPHASIS_LANE0 = 85,
    _SHR_PORT_PHY_CONTROL_PREEMPHASIS_LANE1 = 86,
    _SHR_PORT_PHY_CONTROL_PREEMPHASIS_LANE2 = 87,
    _SHR_PORT_PHY_CONTROL_PREEMPHASIS_LANE3 = 88,
    _SHR_PORT_PHY_CONTROL_DRIVER_CURRENT_LANE0 = 89,
    _SHR_PORT_PHY_CONTROL_DRIVER_CURRENT_LANE1 = 90,
    _SHR_PORT_PHY_CONTROL_DRIVER_CURRENT_LANE2 = 91,
    _SHR_PORT_PHY_CONTROL_DRIVER_CURRENT_LANE3 = 92,
    _SHR_PORT_PHY_CONTROL_PRE_DRIVER_CURRENT_LANE0 = 93,
    _SHR_PORT_PHY_CONTROL_PRE_DRIVER_CURRENT_LANE1 = 94,
    _SHR_PORT_PHY_CONTROL_PRE_DRIVER_CURRENT_LANE2 = 95,
    _SHR_PORT_PHY_CONTROL_PRE_DRIVER_CURRENT_LANE3 = 96,
    _SHR_PORT_PHY_CONTROL_TX_LANE_SQUELCH = 97,
    _SHR_PORT_PHY_CONTROL_DRIVER_POST2_CURRENT = 98,
    _SHR_PORT_PHY_CONTROL_RX_PPM = 99,
    _SHR_PORT_PHY_CONTROL_RX_PEAK_FILTER = 100,
    _SHR_PORT_PHY_CONTROL_RX_LOW_FREQ_PEAK_FILTER = 101,
    _SHR_PORT_PHY_CONTROL_RX_VGA = 102,
    _SHR_PORT_PHY_CONTROL_RX_TAP1 = 103,
    _SHR_PORT_PHY_CONTROL_RX_TAP2 = 104,
    _SHR_PORT_PHY_CONTROL_RX_TAP3 = 105,
    _SHR_PORT_PHY_CONTROL_RX_TAP4 = 106,
    _SHR_PORT_PHY_CONTROL_RX_TAP5 = 107,
    _SHR_PORT_PHY_CONTROL_RX_VGA_RELEASE = 108,
    _SHR_PORT_PHY_CONTROL_RX_TAP1_RELEASE = 109,
    _SHR_PORT_PHY_CONTROL_RX_TAP2_RELEASE = 110,
    _SHR_PORT_PHY_CONTROL_RX_TAP3_RELEASE = 111,
    _SHR_PORT_PHY_CONTROL_RX_TAP4_RELEASE = 112,
    _SHR_PORT_PHY_CONTROL_RX_TAP5_RELEASE = 113,
    _SHR_PORT_PHY_CONTROL_RX_PLUS1_SLICER = 114,
    _SHR_PORT_PHY_CONTROL_RX_MINUS1_SLICER = 115,
    _SHR_PORT_PHY_CONTROL_RX_D_SLICER = 116,
    _SHR_PORT_PHY_CONTROL_RX_SIGNAL_DETECT = 117,
    _SHR_PORT_PHY_CONTROL_RX_SEQ_DONE = 118,
    _SHR_PORT_PHY_CONTROL_RX_POLARITY = 119,
    _SHR_PORT_PHY_CONTROL_TX_POLARITY = 120,
    _SHR_PORT_PHY_CONTROL_RX_RESET = 121,
    _SHR_PORT_PHY_CONTROL_TX_RESET = 122,
    _SHR_PORT_PHY_CONTROL_CL72 = 123,
    _SHR_PORT_PHY_CONTROL_CL72_STATUS = 124,
    _SHR_PORT_PHY_CONTROL_LANE_SWAP = 125,
    _SHR_PORT_PHY_CONTROL_DUMP = 126,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_20BIT = 127,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_256BIT = 128,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_DATA0 = 129,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_DATA1 = 130,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_DATA2 = 131,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_DATA3 = 132,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_DATA4 = 133,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_DATA5 = 134,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_DATA6 = 135,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_DATA7 = 136,
    _SHR_PORT_PHY_CONTROL_PHASE_INTERP = 137,
    _SHR_PORT_PHY_CONTROL_PON_LASER_TX_POWER_TIME = 138,
    _SHR_PORT_PHY_CONTROL_PON_LASER_TX_POWER_MODE = 139,
    _SHR_PORT_PHY_CONTROL_PON_LASER_TX_STATUS = 140,
    _SHR_PORT_PHY_CONTROL_PON_LASER_RX_STATE = 141,
    _SHR_PORT_PHY_CONTROL_PON_LASER_TRANCEIVER_TEMP = 142,
    _SHR_PORT_PHY_CONTROL_PON_LASER_SUPPLY_VOLTAGE = 143,
    _SHR_PORT_PHY_CONTROL_PON_LASER_TX_BIAS = 144,
    _SHR_PORT_PHY_CONTROL_PON_LASER_TX_POWER = 145,
    _SHR_PORT_PHY_CONTROL_PON_LASER_RX_POWER = 146,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_HIGH_ALARM_STATE = 147,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_HIGH_ALARM_REPORT_THRESHOLD = 148,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_HIGH_ALARM_CLEAR_THRESHOLD = 149,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_LOW_ALARM_STATE = 150,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_LOW_ALARM_REPORT_THRESHOLD = 151,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_LOW_ALARM_CLEAR_THRESHOLD = 152,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_HIGH_ALARM_STATE = 153,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_HIGH_ALARM_REPORT_THRESHOLD = 154,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_HIGH_ALARM_CLEAR_THRESHOLD = 155,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_LOW_ALARM_STATE = 156,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_LOW_ALARM_REPORT_THRESHOLD = 157,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_LOW_ALARM_CLEAR_THRESHOLD = 158,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_HIGH_ALARM_STATE = 159,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_HIGH_ALARM_REPORT_THRESHOLD = 160,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_HIGH_ALARM_CLEAR_THRESHOLD = 161,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_LOW_ALARM_STATE = 162,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_LOW_ALARM_REPORT_THRESHOLD = 163,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_LOW_ALARM_CLEAR_THRESHOLD = 164,
    _SHR_PORT_PHY_CONTROL_PON_VCC_HIGH_ALARM_STATE = 165,
    _SHR_PORT_PHY_CONTROL_PON_VCC_HIGH_ALARM_REPORT_THRESHOLD = 166,
    _SHR_PORT_PHY_CONTROL_PON_VCC_HIGH_ALARM_CLEAR_THRESHOLD = 167,
    _SHR_PORT_PHY_CONTROL_PON_VCC_LOW_ALARM_STATE = 168,
    _SHR_PORT_PHY_CONTROL_PON_VCC_LOW_ALARM_REPORT_THRESHOLD = 169,
    _SHR_PORT_PHY_CONTROL_PON_VCC_LOW_ALARM_CLEAR_THRESHOLD = 170,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_HIGH_ALARM_STATE = 171,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_HIGH_ALARM_REPORT_THRESHOLD = 172,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_HIGH_ALARM_CLEAR_THRESHOLD = 173,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_LOW_ALARM_STATE = 174,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_LOW_ALARM_REPORT_THRESHOLD = 175,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_LOW_ALARM_CLEAR_THRESHOLD = 176,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_HIGH_WARNING_STATE = 177,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_HIGH_WARNING_REPORT_THRESHOLD = 178,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_HIGH_WARNING_CLEAR_THRESHOLD = 179,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_LOW_WARNING_STATE = 180,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_LOW_WARNING_REPORT_THRESHOLD = 181,
    _SHR_PORT_PHY_CONTROL_PON_RX_POWER_LOW_WARNING_CLEAR_THRESHOLD = 182,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_HIGH_WARNING_STATE = 183,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_HIGH_WARNING_REPORT_THRESHOLD = 184,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_HIGH_WARNING_CLEAR_THRESHOLD = 185,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_LOW_WARNING_STATE = 186,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_LOW_WARNING_REPORT_THRESHOLD = 187,
    _SHR_PORT_PHY_CONTROL_PON_TX_POWER_LOW_WARNING_CLEAR_THRESHOLD = 188,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_HIGH_WARNING_STATE = 189,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_HIGH_WARNING_REPORT_THRESHOLD = 190,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_HIGH_WARNING_CLEAR_THRESHOLD = 191,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_LOW_WARNING_STATE = 192,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_LOW_WARNING_REPORT_THRESHOLD = 193,
    _SHR_PORT_PHY_CONTROL_PON_TX_BIAS_LOW_WARNING_CLEAR_THRESHOLD = 194,
    _SHR_PORT_PHY_CONTROL_PON_VCC_HIGH_WARNING_STATE = 195,
    _SHR_PORT_PHY_CONTROL_PON_VCC_HIGH_WARNING_REPORT_THRESHOLD = 196,
    _SHR_PORT_PHY_CONTROL_PON_VCC_HIGH_WARNING_CLEAR_THRESHOLD = 197,
    _SHR_PORT_PHY_CONTROL_PON_VCC_LOW_WARNING_STATE = 198,
    _SHR_PORT_PHY_CONTROL_PON_VCC_LOW_WARNING_REPORT_THRESHOLD = 199,
    _SHR_PORT_PHY_CONTROL_PON_VCC_LOW_WARNING_CLEAR_THRESHOLD = 200,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_HIGH_WARNING_STATE = 201,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_HIGH_WARNING_REPORT_THRESHOLD = 202,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_HIGH_WARNING_CLEAR_THRESHOLD = 203,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_LOW_WARNING_STATE = 204,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_LOW_WARNING_REPORT_THRESHOLD = 205,
    _SHR_PORT_PHY_CONTROL_PON_TEMP_LOW_WARNING_CLEAR_THRESHOLD = 206,
    _SHR_PORT_PHY_CONTROL_DLL_POWER_AUTO = 207,
    _SHR_PORT_PHY_CONTROL_TX_PPM_ADJUST = 208,
    _SHR_PORT_PHY_CONTROL_FIRMWARE_MODE = 209,
    _SHR_PORT_PHY_CONTROL_VCO_FREQ = 210,
    _SHR_PORT_PHY_CONTROL_PLL_DIVIDER = 211,
    _SHR_PORT_PHY_CONTROL_OVERSAMPLE_MODE = 212,
    _SHR_PORT_PHY_CONTROL_REF_CLK = 213,
    _SHR_PORT_PHY_CONTROL_SOFTWARE_RX_LOS = 214,
    _SHR_PORT_PHY_CONTROL_PRBS_DECOUPLED_TX_ENABLE = 215,
    _SHR_PORT_PHY_CONTROL_PRBS_DECOUPLED_TX_INVERT_DATA = 216,
    _SHR_PORT_PHY_CONTROL_PRBS_DECOUPLED_TX_POLYNOMIAL = 217,
    _SHR_PORT_PHY_CONTROL_PRBS_DECOUPLED_RX_ENABLE = 218,
    _SHR_PORT_PHY_CONTROL_PRBS_DECOUPLED_RX_INVERT_DATA = 219,
    _SHR_PORT_PHY_CONTROL_PRBS_DECOUPLED_RX_POLYNOMIAL = 220,
    _SHR_PORT_PHY_CONTROL_RX_PEAK_FILTER_TEMP_COMP = 221,
    _SHR_PORT_PHY_CONTROL_CL73_FSM_AUTO_RECOVER = 222,
    _SHR_PORT_PHY_CONTROL_RX_SEQ_TOGGLE = 223,
    _SHR_PORT_PHY_CONTROL_DRIVER_SUPPLY = 224,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE = 225,
    _SHR_PORT_PHY_CONTROL_HG2_BCM_CODEC_ENABLE = 226,
    _SHR_PORT_PHY_CONTROL_PRBS_RX_INVERT_DATA = 227,
    _SHR_PORT_PHY_CONTROL_PRBS_CHECK_MODE  = 228,
    _SHR_PORT_PHY_CONTROL_MOD_AUTO_DETECT_ENABLE = 229,
    _SHR_PORT_PHY_CONTROL_DIGITAL_TEMP = 230,
    _SHR_PORT_PHY_CONTROL_ANALOG_TEMP = 231,
    _SHR_PORT_PHY_CONTROL_TX_FIR_PRE = 232,
    _SHR_PORT_PHY_CONTROL_TX_FIR_MAIN = 233,
    _SHR_PORT_PHY_CONTROL_TX_FIR_POST = 234,
    _SHR_PORT_PHY_CONTROL_TX_FIR_POST2 = 235,
    _SHR_PORT_PHY_CONTROL_TX_FIR_POST3 = 236,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_PMA_OS = 237,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_SCR_MODE = 238,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_ENCODE_MODE = 239,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_CL48_CHECK_END = 240,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_BLK_SYNC_MODE = 241,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_REORDER_MODE = 242,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_CL36_EN = 243,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_DESCR1_MODE = 244,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_DEC1_MODE = 245,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_DESKEW_MODE = 246,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_DESC2_MODE = 247,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_DESC2_BYTE_DEL = 248,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_BRCM64B66_DESCR = 249,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_SGMII_MODE = 250,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_CLKCNT0 = 251,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_CLKCNT1 = 252,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_LPCNT0 = 253,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_LPCNT1 = 254,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_MAC_CGC = 255,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_PCS_REPCNT = 256,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_PCS_CREDTEN = 257,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_PCS_CLKCNT = 258,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_PCS_CGC = 259,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_CL72_EN = 260,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_ENTRY = 261,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_HCD = 262,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_PMA_OS = 263,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_SCR_MODE = 264,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_ENCODE_MODE = 265,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_CL48_CHECK_END = 266,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_BLK_SYNC_MODE = 267,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_REORDER_MODE = 268,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_CL36_EN = 269,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_DESCR1_MODE = 270,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_DEC1_MODE = 271,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_DESKEW_MODE = 272,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_DESC2_MODE = 273,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_DESC2_BYTE_DEL = 274,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_BRCM64B66_DESCR = 275,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_SGMII_MODE = 276,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_CLKCNT0 = 277,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_CLKCNT1 = 278,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_LPCNT0 = 279,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_LPCNT1 = 280,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_MAC_CGC = 281,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_PCS_REPCNT = 282,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_PCS_CREDTEN = 283,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_PCS_CLKCNT = 284,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_PCS_CGC = 285,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_CL72_EN = 286,
    _SHR_PORT_PHY_CONTROL_LOOPBACK_PMD = 287,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_GEN_ENABLE = 288,
    _SHR_PORT_PHY_CONTROL_TX_PATTERN_LENGTH = 289,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_PLL_DIVIDER = 290,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_HTO_CLEAR = 291,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_PLL_DIVIDER = 292,
    _SHR_PORT_PHY_CONTROL_PCS_SPEED_ST_NUM_OF_LANES = 293,
    _SHR_PORT_PHY_CONTROL_CLOCK_MODE_AUTO = 294,
    _SHR_PORT_PHY_CONTROL_CLOCK_AUTO_SECONDARY = 295,
    _SHR_PORT_PHY_CONTROL_CLOCK_SOURCE = 296,
    _SHR_PORT_PHY_CONTROL_DFE = 297,
    _SHR_PORT_PHY_CONTROL_INTR_MASK = 298,
    _SHR_PORT_PHY_CONTROL_INTR_STATUS = 299,
    _SHR_PORT_PHY_CONTROL_XSW_LANE_MAP = 300,
    _SHR_PORT_PHY_CONTROL_VCO_DISTURBED = 301,
    _SHR_PORT_PHY_CONTROL_FIRMWARE_DFE_ENABLE = 302,
    _SHR_PORT_PHY_CONTROL_FIRMWARE_LP_DFE_ENABLE = 303,
    _SHR_PORT_PHY_CONTROL_FIRMWARE_BR_DFE_ENABLE = 304,
    _SHR_PORT_PHY_CONTROL_GPIO_CONFIG = 305,
    _SHR_PORT_PHY_CONTROL_GPIO_VALUE = 306,
    _SHR_PORT_PHY_CONTROL_PCS_MODE = 307,
    _SHR_PORT_PHY_CONTROL_SUPER_ISOLATE = 308,
    _SHR_PORT_PHY_CONTROL_SOFT_RESET = 309,
    _SHR_PORT_PHY_CONTROL_AUTONEG_ALLOW_PLL_CHANGE = 310,
    _SHR_PORT_PHY_CONTROL_FAIL_OVER_MODE = 311,
    _SHR_PORT_PHY_SHORT_CHANNEL_MODE = 312,
    _SHR_PORT_PHY_CONTROL_EYE_VAL_HZ_L = 313,
    _SHR_PORT_PHY_CONTROL_EYE_VAL_HZ_R = 314,
    _SHR_PORT_PHY_CONTROL_EYE_VAL_VT_U = 315,
    _SHR_PORT_PHY_CONTROL_EYE_VAL_VT_D = 316,
    _SHR_PORT_PHY_CONTROL_MEDIUM_TYPE = 317,
    _SHR_PORT_PHY_CONTROL_FORCED_SPEED_LINE_SIDE = 318,
    _SHR_PORT_PHY_CONTROL_FORWARD_ERROR_CORRECTION_CL91 = 319,
    _SHR_PORT_PHY_CONTROL_SHORT_CHANNEL_MODE_STATUS = 320,
    _SHR_PORT_PHY_EGRESS_FLOW_CONTROL_MODE = 321,
    _SHR_PORT_PHY_INGRESS_FLOW_CONTROL_MODE = 322,
    _SHR_PORT_PHY_CONTROL_UNRELIABLE_LOS = 323,
    _SHR_PORT_PHY_CONTROL_PSM_COS_BMP = 324,
    _SHR_PORT_PHY_CONTROL_RX_LANE_SQUELCH = 325,
    _SHR_PORT_PHY_CONTROL_FIRMWARE_CL72_RESTART_TIMEOUT_ENABLE = 326,
    _SHR_PORT_PHY_CONTROL_FIRMWARE_CL72_AUTO_POLARITY_ENABLE = 327,
    _SHR_PORT_PHY_CONTROL_SOFTWARE_RX_LOS_LINK_WAIT_TIMER_US = 328,
    _SHR_PORT_PHY_CONTROL_SOFTWARE_RX_LOS_RESTART_TIMER_US = 329,
    _SHR_PORT_PHY_CONTROL_MGBASET_802P3BZ_PRIORITY = 330,
    _SHR_PORT_PHY_CONTROL_TX_FIR_DRIVERMODE = 331,
    _SHR_PORT_PHY_CONTROL_AUTONEG_OUI = 332,
    _SHR_PORT_PHY_CONTROL_AUTONEG_LINE_SIDE =333,
    _SHR_PORT_PHY_CONTROL_FEC_CORRECTED_BLOCK_COUNT = 334,
    _SHR_PORT_PHY_CONTROL_FEC_UNCORRECTED_BLOCK_COUNT = 335,
    _SHR_PORT_PHY_CONTROL_FEC_CORRECTED_CODEWORD_COUNT = 336,
    _SHR_PORT_PHY_CONTROL_FEC_UNCORRECTED_CODEWORD_COUNT = 337,
    _SHR_PORT_PHY_CONTROL_RX_TAP6 = 338,
    _SHR_PORT_PHY_CONTROL_RX_TAP6_RELEASE = 339,
    _SHR_PORT_PHY_CONTROL_PAM4_TX_PATTERN_ENABLE = 340,
    _SHR_PORT_PHY_CONTROL_FEC_SYMBOL_ERROR_COUNT = 341,
    _SHR_PORT_PHY_CONTROL_TX_FIR_MODE = 342,
    _SHR_PORT_PHY_CONTROL_TX_FIR_PRE2 = 343,
    _SHR_PORT_PHY_CONTROL_RX_ADAPTATION_RESUME = 344,
    _SHR_PORT_PHY_CONTROL_BOND_IN_PWRDN_OVERRIDE = 345,
    _SHR_PORT_PHY_CONTROL_TX_PAM4_PRECODER_ENABLE = 346,
    _SHR_PORT_PHY_CONTROL_LP_TX_PRECODER_ENABLE = 347,
    _SHR_PORT_PHY_CONTROL_RX_HIGH_FREQ_PEAK_FILTER = 348,
    _SHR_PORT_PHY_CONTROL_FIRMWARE_RX_FORCE_EXTENDED_REACH_ENABLE = 349,
    _SHR_PORT_PHY_CONTROL_FIRMWARE_RX_FORCE_NORMAL_REACH_ENABLE = 350,
    _SHR_PORT_PHY_CONTROL_FAST_BER_PROJ = 351,
    _SHR_PORT_PHY_CONTROL_AUTONEG_FEC_OVERRIDE = 352,
    _SHR_PORT_PHY_CONTROL_FORWARD_ERROR_CORRECTION_CL108 = 353,
    _SHR_PORT_PHY_CONTROL_CHANNEL_LOSS_HINT = 354,
    _SHR_PORT_PHY_CONTROL_LINK_TRAINING_INIT_TX_FIR_POST = 355,
    _SHR_PORT_PHY_CONTROL_MACSEC_ENABLE = 356,
    _SHR_PORT_PHY_CONTROL_PFC_USE_IP_COS = 357,
    _SHR_PORT_PHY_CONTROL_FEC_BYPASS_INDICATION_ENABLE = 358,
    _SHR_PORT_PHY_CONTROL_PCS_RESET = 359,
    _SHR_PORT_PHY_CONTROL_BASE_R_FEC_ECC_INTR_ENABLE = 360,
    _SHR_PORT_PHY_CONTROL_NUM      /* Must be last */
} _shr_port_phy_control_t;

/*
 * SyncE recovered clock source
 * status to indicate primary recovered clock has switched to secondary source
 * when link failure
 */
typedef enum _shr__port_phy_clock_source_e {
    _SHR_PORT_PHY_CLOCK_SOURCE_NONE = 0, 
    _SHR_PORT_PHY_CLOCK_SOURCE_PRIMARY,  /* Recovery clock is being derived from *\
                                         \*     primary port's recovered clock   */
    _SHR_PORT_PHY_CLOCK_SOURCE_SECONDARY /* Recovery clock is being derived from *\
                                         \*   secondary port's recovered clock   */
} _shr_port_phy_clock_source_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_FIRMWARE_MODE_*
 * Purpose:
 *     FIRMWARE MODE
 */
typedef enum _shr_port_phy_control_firmware_mode_e {
    _SHR_PORT_PHY_FIRMWARE_DEFAULT = 0,   /* default */
    _SHR_PORT_PHY_FIRMWARE_SFP_OPT_SR4,   /* optical short range */
    _SHR_PORT_PHY_FIRMWARE_SFP_DAC,       /* direct attach copper */
    _SHR_PORT_PHY_FIRMWARE_XLAUI,         /* 40G XLAUI mode */
    _SHR_PORT_PHY_FIRMWARE_FORCE_OSDFE,   /* force over sample digital feedback equalization */
    _SHR_PORT_PHY_FIRMWARE_FORCE_BRDFE,   /* force baud rate digital feedback equalization */
    _SHR_PORT_PHY_FIRMWARE_SW_CL72,       /* software cl72 with AN on */
    _SHR_PORT_PHY_FIRMWARE_CL72_WITHOUT_AN,   /* cl72 without AN */
    _SHR_PORT_PHY_FIRMWARE_DFE_ENABLE,    /* enable digital feedback equalization */
    _SHR_PORT_PHY_FIRMWARE_LP_DFE_ENABLE  /* enable digital feedback equalization */
} _shr_port_phy_control_firmware_mode_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_DFE_*
 * Purpose:
 *     DFE MODE
 */
typedef enum _shr_port_phy_control_dfe_e {
    _SHR_PORT_PHY_DFE_AUTO = 0,          /* default */
    _SHR_PORT_PHY_DFE_FREEZE             /* Freeze DFE */
} _shr_port_phy_control_dfe_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_*
 * Purpose:
 *    Set autoneg mode
 */
typedef enum _shr_port_phy_control_autoneg_mode_e {
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_CL37 = 1,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_CL37_BAM,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_CL73,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_CL73_BAM,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_CL37_CL73,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_CL37_CL73_BAM,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_CL37_BAM_CL73,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_CL37_BAM_CL73_BAM,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_CL73_MSA,
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_NONE,      /*this flag is for local_ability_ get function indicating forced speed */
    _SHR_PORT_PHY_CONTROL_AUTONEG_MODE_COUNT
} _shr_port_phy_control_autoneg_mode_t;


/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_AUTONEG_OUI_*
 * Purpose:
 *    Set autoneg oui mode
 */
typedef enum _shr_port_phy_control_autoneg_oui_value_e {
    _SHR_PORT_PHY_CONTROL_AUTONEG_OUI_DEFAULT = 0
} _shr_port_phy_control_autoneg_oui_value_t;


/*
 * Defines:
 *     _SHR_PORT_PRBS_POLYNOMIAL_*
 * Purpose:
 *     PRBS polynomial type
 */
typedef enum _shr_port_prbs_polynomial_e {
    _SHR_PORT_PRBS_POLYNOMIAL_X7_X6_1      = 0,
    _SHR_PORT_PRBS_POLYNOMIAL_X15_X14_1    = 1,
    _SHR_PORT_PRBS_POLYNOMIAL_X23_X18_1    = 2,
    _SHR_PORT_PRBS_POLYNOMIAL_X31_X28_1    = 3,
    _SHR_PORT_PRBS_POLYNOMIAL_X9_X5_1      = 4,
    _SHR_PORT_PRBS_POLYNOMIAL_X11_X9_1     = 5,
    _SHR_PORT_PRBS_POLYNOMIAL_X58_X31_1    = 6,
    _SHR_PORT_PRBS_POLYNOMIAL_X49_X40_1    = 7, 
    _SHR_PORT_PRBS_POLYNOMIAL_X20_X3_1     = 8, 
    _SHR_PORT_PRBS_POLYNOMIAL_X13_X12_X2_1 = 9,
    _SHR_PORT_PRBS_POLYNOMIAL_X10_X7_1     = 10,
    _SHR_PORT_PRBS_POLYNOMIAL_PAM4_13Q     = 11
} _shr_port_prbs_polynomial_t;

/*
 * Defines:
 *     _SHR_PHY_PCS_MODE_*
 * Purpose:
 *     PCS MODE type
 */
typedef enum _shr_port_phy_pcs_mode_e {
    _SHR_PORT_PHY_CONTROL_PCS_MODE_IEEE     = 0,
    _SHR_PORT_PHY_CONTROL_PCS_MODE_BRCM     = 1,
    _SHR_PORT_PHY_CONTROL_PCS_MODE_COUNT
} _shr_port_phy_pcs_mode_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_*
 * Purpose:
 *     PHY specific control settings
 */
typedef enum _shr_port_phy_control_longreach_ability_e {
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_NONE,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_10M_1PAIR=1,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_10M_2PAIR=2,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_20M_1PAIR=4,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_20M_2PAIR=8,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_25M_1PAIR=16,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_25M_2PAIR=32,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_33M_1PAIR=64,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_33M_2PAIR=128,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_50M_1PAIR=256,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_50M_2PAIR=512,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_100M_1PAIR=1024,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_100M_2PAIR=2048,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_100M_4PAIR=4096,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_PAUSE_RX=8192,
    _SHR_PORT_PHY_CONTROL_LONGREACH_ABILITY_PAUSE_TX=16384
} _shr_port_phy_control_longreach_ability_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_POWER_*
 * Purpose:
 *     PHY specific values for _SHR_PORT_PHY_CONTROL_POWER type
 */
typedef enum _shr_port_phy_control_power_e {
    _SHR_PORT_PHY_CONTROL_POWER_FULL,
    _SHR_PORT_PHY_CONTROL_POWER_LOW,
    _SHR_PORT_PHY_CONTROL_POWER_AUTO,
    /* Power mode added(SDK-30895). Requirement is to disable *\
    \* Auto Power Down without changing Tx bias current       */
    _SHR_PORT_PHY_CONTROL_POWER_AUTO_DISABLE,
    _SHR_PORT_PHY_CONTROL_POWER_AUTO_FULL,
    _SHR_PORT_PHY_CONTROL_POWER_AUTO_LOW
} _shr_port_phy_control_power_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_FEC_*
 * Purpose:
 *     PHY specific values for _SHR_PORT_PHY_CONTROL_FORWARD_ERROR_CORRECTION
 */
typedef enum _shr_port_phy_control_fec_e {
    _SHR_PORT_PHY_CONTROL_FEC_OFF,
    _SHR_PORT_PHY_CONTROL_FEC_ON,
    _SHR_PORT_PHY_CONTROL_FEC_AUTO
} _shr_port_phy_control_fec_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_EDC_CONFIG_*
 * Purpose:
 *     Valid control values for _SHR_PORT_PHY_CONTROL_EDC_CONFIG type
 */
typedef enum _shr_port_phy_control_edc_config_e {
    _SHR_PORT_PHY_CONTROL_EDC_CONFIG_NONE,
    _SHR_PORT_PHY_CONTROL_EDC_CONFIG_HARDWARE,
    _SHR_PORT_PHY_CONTROL_EDC_CONFIG_SOFTWARE
} _shr_port_phy_control_edc_config_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_CONTROL_BERT_*
 * Purpose:
 *     Valid control values for _SHR_PORT_PHY_CONTROL_BERT_PATTERN type
 */
typedef enum _shr_port_phy_control_bert_pattern_e {
    _SHR_PORT_PHY_CONTROL_BERT_CRPAT = 1,
    _SHR_PORT_PHY_CONTROL_BERT_CJPAT = 2
} _shr_port_phy_control_bert_pattern_t;

typedef enum _shr_port_phy_control_pam4_tx_pattern_e {
    _SHR_PORT_PHY_PAM4_TX_PATTERN_INVALID = 0,
    _SHR_PORT_PHY_PAM4_TX_PATTERN_OFF,
   _SHR_PORT_PHY_PAM4_TX_PATTERN_JP03B,
   _SHR_PORT_PHY_PAM4_TX_PATTERN_LINEAR
} _shr_port_phy_control_pam4_tx_pattern_t;

typedef enum _shr_port_phy_control_driver_supply_e {
    _SHR_PORT_PHY_CONTROL_DRIVER_SUPPLY_1_5V_1_0V,
    _SHR_PORT_PHY_CONTROL_DRIVER_SUPPLY_1_0V_700MV,
    _SHR_PORT_PHY_CONTROL_DRIVER_SUPPLY_1_5V_700MV
} _shr_port_phy_control_driver_supply_t;


typedef enum _shr_port_phy_control_tx_fir_drivermode_e {
    _SHR_PORT_PHY_CONTROL_TX_FIR_DRIVERMODE_DEFAULT, 
    _SHR_PORT_PHY_CONTROL_TX_FIR_DRIVERMODE_NOT_SUPPORTED,
    _SHR_PORT_PHY_CONTROL_TX_FIR_DRIVERMODE_HALF_AMP,
    _SHR_PORT_PHY_CONTROL_TX_FIR_DRIVERMODE_HALF_AMP_HI_IMPED
} _shr_port_phy_control_tx_fir_drivermode_t;

typedef enum _shr_port_phy_control_hg2_bcm_codec_enable_e {
    _SHR_PORT_PHY_CONTROL_HG2_BCM_CODEC_ENABLE_OFF,
    _SHR_PORT_PHY_CONTROL_HG2_BCM_CODEC_ENABLE_ON_WITH_8BYTE_IPG,
    _SHR_PORT_PHY_CONTROL_HG2_BCM_CODEC_ENABLE_ON_WITH_9BYTE_IPG
} _shr_port_phy_control_hg2_bcm_codec_enable_t;

typedef enum _shr_port_phy_control_tx_fir_mode_e {
    _SHR_PORT_PHY_TX_FIR_MODE_INVALID = 0,
    _SHR_PORT_PHY_TX_FIR_3TAP_MODE,
    _SHR_PORT_PHY_TX_FIR_6TAP_MODE
} _shr_port_phy_control_tx_fir_mode_t;

typedef enum _shr_port_phy_control_rx_los_e {
    _SHR_PORT_PHY_CONTROL_RX_LOS_NONE,
    _SHR_PORT_PHY_CONTROL_RX_LOS_SOFTWARE,
    _SHR_PORT_PHY_CONTROL_RX_LOS_FIRMWARE
} _shr_port_phy_control_rx_los_t;

typedef enum _shr_port_phy_control_gpio_config_e {
    _SHR_PORT_PHY_CONTROL_GPIO_CONFIG_DISABLED,
    _SHR_PORT_PHY_CONTROL_GPIO_CONFIG_OUTPUT,
    _SHR_PORT_PHY_CONTROL_GPIO_CONFIG_INPUT
} _shr_port_phy_control_gpio_config_t;

#define _SHR_PORT_RESOURCE_DEFAULT_REQUEST  (-1)
/*
 * Defines:
 *     _SHR_PORT_RLM_*
 * Purpose:
 *     Valid values for RLM Status
 */
typedef enum _shr_port_rlm_status_e {
    _SHR_PORT_RLM_DISABLED,
    _SHR_PORT_RLM_BUSY,
    _SHR_PORT_RLM_DONE,
    _SHR_PORT_RLM_FAILED,
    _SHR_PORT_RLM_COUNT
} _shr_port_rlm_status_t;

/*
 * Defines:
 *     _SHR_PORT_PHY_FEC*
 * Purpose:
 *     Valid values for fec type
 */
typedef enum _shr_port_phy_fec_e {
    _SHR_PORT_PHY_FEC_DEFAULT_REQUEST = _SHR_PORT_RESOURCE_DEFAULT_REQUEST,
    _SHR_PORT_PHY_FEC_INVALID,
    _SHR_PORT_PHY_FEC_NONE,
    _SHR_PORT_PHY_FEC_BASE_R,
    _SHR_PORT_PHY_FEC_RS_FEC,
    _SHR_PORT_PHY_FEC_RS_544,
    _SHR_PORT_PHY_FEC_RS_272,
    _SHR_PORT_PHY_FEC_RS_206, 
    _SHR_PORT_PHY_FEC_RS_108,
    _SHR_PORT_PHY_FEC_RS_545, 
    _SHR_PORT_PHY_FEC_RS_304,
    _SHR_PORT_PHY_FEC_RS_544_2XN,
    _SHR_PORT_PHY_FEC_RS_272_2XN,
    _SHR_PORT_PHY_FEC_COUNT
} _shr_port_phy_fec_t;

/*
 * Defines:
 *      _SHR_PORT_PAUSE_*
 * Purpose:
 *      Supported port pause
 */
typedef enum _shr_port_phy_pause_e {
    _SHR_PORT_PHY_PAUSE_NONE               = 1,
    _SHR_PORT_PHY_PAUSE_TX,
    _SHR_PORT_PHY_PAUSE_RX,
    _SHR_PORT_PHY_PAUSE_SYMM,
    _SHR_PORT_PHY_PAUSE_ALL, /*this mainly for local_ability_get function */
    _SHR_PORT_PHY_PAUSE_COUNT             /* last, please */
} _shr_port_phy_pause_t;

/*
 * Defines:
 *      _SHR_PORT_PHY_CHANNEL*
 * Purpose:
 *      Supported port phy channel
 */
typedef enum _shr_port_phy_channel_e {
    _SHR_PORT_PHY_CHANNEL_SHORT      = 1,
    _SHR_PORT_PHY_CHANNEL_LONG,
    _SHR_PORT_PHY_CHANNEL_ALL, /*this mainly for local_ability_get function */
    _SHR_PORT_PHY_CHANNEL_COUNT             /* last, please */
} _shr_port_phy_channel_t;

/*
 * Defines:
 *     _shr_port_autoneg_ability_t
 * Purpose:
 *     For autoneg_ability_set/get
 */
typedef struct _shr_port_autoneg_ability_s {
    uint32 speed;                                 /* port speed in mbps */
    uint32 resolved_num_lanes;                    /* autoneg resolved speed num lane */
    _shr_port_phy_fec_t fec_type;                 /* fec_type for a port */
    _shr_port_medium_t medium;                    /* medium type of a port */
    _shr_port_phy_pause_t pause;                  /* pause */
    _shr_port_phy_channel_t channel;              /* short/long channel for a port */
    _shr_port_phy_control_autoneg_mode_t an_mode; /* autoneg mode */
} _shr_port_autoneg_ability_t;

/*
 *  IEEE-1588 TimeSync timer mode
 */
typedef enum _shr_port_phy_timesync_timer_mode_e {
    _SHR_PORT_PHY_TIMESYNC_TIMER_MODE_NONE    = 0x00,
    _SHR_PORT_PHY_TIMESYNC_TIMER_MODE_DEFAULT = 0x01,
    _SHR_PORT_PHY_TIMESYNC_TIMER_MODE_32BIT   = 0x02,
    _SHR_PORT_PHY_TIMESYNC_TIMER_MODE_48BIT   = 0x04,
    _SHR_PORT_PHY_TIMESYNC_TIMER_MODE_64BIT   = 0x08,
    _SHR_PORT_PHY_TIMESYNC_TIMER_MODE_80BIT   = 0x10
} _shr_port_phy_timesync_timer_mode_t;

typedef enum _shr_port_phy_control_flow_control_mode_e {
    _SHR_PORT_PHY_CONTROL_FLOW_CTRL_MODE_NONE       = 0x00,
    _SHR_PORT_PHY_CONTROL_FLOW_CTRL_LEGACY_PAUSE_EN = 0x01,
    _SHR_PORT_PHY_CONTROL_FLOW_CTRL_PFC_PAUSE       = 0x02,
    _SHR_PORT_PHY_CONTROL_FLOW_CTRL_LLFC            = 0x04
} _shr_port_phy_control_flow_control_mode_t;

/* bit shift defines for the lane_config on the serdes PMD side */
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_SHIFT                2
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_MASK                 0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_SHIFT             3
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_MASK              0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_SHIFT             4
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_MASK              0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_SHIFT             5
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_MASK              0x3
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_SHIFT     7
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_MASK      0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_SHIFT  8
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_MASK   0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_SHIFT    9
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_MASK     0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_SHIFT  10
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_MASK   0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_SHIFT                 11
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_MASK                  0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_SHIFT                 12
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_MASK                  0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_SHIFT               13
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_MASK                0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_SHIFT               14
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_MASK                0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_SHIFT                15
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_MASK                 0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_SHIFT        16
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_MASK         0x3f

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_BACKPLANE               0x0
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_COPPER_CABLE            0x1
#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_OPTICS                  0x2


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_DFE_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_SET(lane_config)               \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_CLEAR(lane_config)             \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_MASK << \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_GET(lane_config)                \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_DFE_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_BR_DFE_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_SET(lane_config, medium_type)  \
            ( lane_config |= medium_type  <<                            \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_GET(lane_config)                \
            ( (lane_config  >> _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_SHIFT) & \
                        _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_MEDIUM_MASK )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_UNRELIABLE_LOS_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_SCRAMBLING_DISABLE_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_POLARITY_AUTO_EN_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_CL72_RESTART_TIMEOUT_EN_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_ES_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NS_SHIFT) ? 1 : 0  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_LP_PREC_EN_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_PAM4_SHIFT) ? 1 : 0  )


#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_SET(lane_config)                \
            ( lane_config |= _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_MASK <<    \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_SHIFT)  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_GET(lane_config)                 \
            ( lane_config & (_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_MASK <<     \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_FORCE_NRZ_SHIFT) ? 1 : 0  )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_SET(lane_config, channel_loss)  \
            ( lane_config |= channel_loss  <<                                      \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_SHIFT )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_GET(lane_config)                \
            ( (lane_config  >> _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_SHIFT) & \
                        _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_MASK )

#define _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_CLEAR(lane_config)               \
            ( lane_config &= ~(_SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_MASK <<   \
                             _SHR_PORT_RESOURCE_PHY_LANE_CONFIG_PAM4_CHANNEL_LOSS_SHIFT)  )
                        
/*
 *  Congestion support (HCFC)
 */
#define _SHR_PORT_CHANNEL_ID_PORT_BASE_SHIFT   8
#define _SHR_PORT_CHANNEL_ID_PORT_BASE_MASK    0xFF
#define _SHR_PORT_CHANNEL_ID_PORT_CH_SHIFT     0
#define _SHR_PORT_CHANNEL_ID_PORT_CH_MASK      0xFF

#define _SHR_PORT_CONGESTION_MAPPING_CLEAR     0x01
#define _SHR_PORT_CONGESTION_MAPPING_RX        0x02
#define _SHR_PORT_CONGESTION_MAPPING_TX        0x04

#define _SHR_PORT_CHANNEL_ID_SET(_channel_id, _port_base, _port_ch)          \
            ( _channel_id =                                                  \
              ( ((_port_base & _SHR_PORT_CHANNEL_ID_PORT_BASE_MASK) <<       \
                                    _SHR_PORT_CHANNEL_ID_PORT_BASE_SHIFT) |  \
                ((_port_ch   & _SHR_PORT_CHANNEL_ID_PORT_CH_MASK)   <<       \
                                    _SHR_PORT_CHANNEL_ID_PORT_CH_SHIFT) ) )

#define _SHR_PORT_CHANNEL_ID_PORT_BASE_GET(_channel_id)                  \
              ( (_channel_id >> _SHR_PORT_CHANNEL_ID_PORT_BASE_SHIFT) &  \
                 _SHR_PORT_CHANNEL_ID_PORT_BASE_MASK )

#define _SHR_PORT_CHANNEL_ID_PORT_CH_GET(_channel_id)                    \
              ( (_channel_id >> _SHR_PORT_CHANNEL_ID_PORT_CH_SHIFT) &    \
                 _SHR_PORT_CHANNEL_ID_PORT_CH_MASK   )

#define _SHR_PORT_PHY_TIMESYNC_CAP_MPLS                             (1U << 0)
#define _SHR_PORT_PHY_TIMESYNC_CAP_ENHANCED_TSFIFO                  (1U << 1)
#define _SHR_PORT_PHY_TIMESYNC_CAP_INBAND_TS                        (1U << 2)
#define _SHR_PORT_PHY_TIMESYNC_CAP_FOLLOW_UP_ASSIST                 (1U << 3)
#define _SHR_PORT_PHY_TIMESYNC_CAP_DELAY_RESP_ASSIST                (1U << 4)
#define _SHR_PORT_PHY_TIMESYNC_CAP_CAPTURE_TIMESTAMP_MSG            (1U << 5)

#define _SHR_PORT_PHY_TIMESYNC_VALID_FLAGS                         (1U <<  0)
#define _SHR_PORT_PHY_TIMESYNC_VALID_ITPID                         (1U <<  1)
#define _SHR_PORT_PHY_TIMESYNC_VALID_OTPID                         (1U <<  2)
#define _SHR_PORT_PHY_TIMESYNC_VALID_OTPID2                        (1U <<  3)
#define _SHR_PORT_PHY_TIMESYNC_VALID_GMODE                         (1U <<  4)
#define _SHR_PORT_PHY_TIMESYNC_VALID_FRAMESYNC_MODE                (1U <<  5)
#define _SHR_PORT_PHY_TIMESYNC_VALID_SYNCOUT_MODE                  (1U <<  6)
#define _SHR_PORT_PHY_TIMESYNC_VALID_TS_DIVIDER                    (1U <<  7)
#define _SHR_PORT_PHY_TIMESYNC_VALID_ORIGINAL_TIMECODE             (1U <<  8)
#define _SHR_PORT_PHY_TIMESYNC_VALID_TX_TIMESTAMP_OFFSET           (1U <<  9)
#define _SHR_PORT_PHY_TIMESYNC_VALID_RX_TIMESTAMP_OFFSET           (1U << 10)
#define _SHR_PORT_PHY_TIMESYNC_VALID_TX_SYNC_MODE                  (1U << 11)
#define _SHR_PORT_PHY_TIMESYNC_VALID_TX_DELAY_REQUEST_MODE         (1U << 12)
#define _SHR_PORT_PHY_TIMESYNC_VALID_TX_PDELAY_REQUEST_MODE        (1U << 13)
#define _SHR_PORT_PHY_TIMESYNC_VALID_TX_PDELAY_RESPONSE_MODE       (1U << 14)
#define _SHR_PORT_PHY_TIMESYNC_VALID_RX_SYNC_MODE                  (1U << 15)
#define _SHR_PORT_PHY_TIMESYNC_VALID_RX_DELAY_REQUEST_MODE         (1U << 16)
#define _SHR_PORT_PHY_TIMESYNC_VALID_RX_PDELAY_REQUEST_MODE        (1U << 17)
#define _SHR_PORT_PHY_TIMESYNC_VALID_RX_PDELAY_RESPONSE_MODE       (1U << 18)
#define _SHR_PORT_PHY_TIMESYNC_VALID_MPLS_CONTROL                  (1U << 19)
#define _SHR_PORT_PHY_TIMESYNC_VALID_RX_LINK_DELAY                 (1U << 20)
#define _SHR_PORT_PHY_TIMESYNC_VALID_PHY_1588_SYNC_FREQ            (1U << 21)
#define _SHR_PORT_PHY_TIMESYNC_VALID_PHY_1588_DPLL_K1              (1U << 22)
#define _SHR_PORT_PHY_TIMESYNC_VALID_PHY_1588_DPLL_K2              (1U << 23)
#define _SHR_PORT_PHY_TIMESYNC_VALID_PHY_1588_DPLL_K3              (1U << 24)
#define _SHR_PORT_PHY_TIMESYNC_VALID_PHY_1588_DPLL_LOOP_FILTER     (1U << 25)
#define _SHR_PORT_PHY_TIMESYNC_VALID_PHY_1588_DPLL_REF_PHASE       (1U << 26)
#define _SHR_PORT_PHY_TIMESYNC_VALID_PHY_1588_DPLL_REF_PHASE_DELTA (1U << 27)
#define _SHR_PORT_PHY_TIMESYNC_VALID_PHY_1588_INBAND_CONTROL       (1U << 28)
#define _SHR_PORT_PHY_TIMESYNC_VALID_TIMER_ADJUSTMENT              (1U << 29)

#define _SHR_PORT_PHY_TIMESYNC_ENABLE                               (1U<<0)
#define _SHR_PORT_PHY_TIMESYNC_CAPTURE_TS_ENABLE                    (1U<<1) /* per port */
#define _SHR_PORT_PHY_TIMESYNC_HEARTBEAT_TS_ENABLE                  (1U<<2)
#define _SHR_PORT_PHY_TIMESYNC_RX_CRC_ENABLE                        (1U<<3)
#define _SHR_PORT_PHY_TIMESYNC_8021AS_ENABLE                        (1U<<4)
#define _SHR_PORT_PHY_TIMESYNC_L2_ENABLE                            (1U<<5)
#define _SHR_PORT_PHY_TIMESYNC_IP4_ENABLE                           (1U<<6)
#define _SHR_PORT_PHY_TIMESYNC_IP6_ENABLE                           (1U<<7)
#define _SHR_PORT_PHY_TIMESYNC_CLOCK_SRC_EXT                        (1U<<8) /* 0 - NCO FREQ CTRL REG, 1 - DPLL */
#define _SHR_PORT_PHY_TIMESYNC_CLOCK_SRC_EXT_MODE                   (1U<<9) /* DPLL 0 - phase, 1 - freq lock */
#define _SHR_PORT_PHY_TIMESYNC_1588_ENCRYPTED_MODE                  (1U<<10)
#define _SHR_PORT_PHY_TIMESYNC_FOLLOW_UP_ASSIST_ENABLE              (1U<<11)
#define _SHR_PORT_PHY_TIMESYNC_DELAY_RESP_ASSIST_ENABLE             (1U<<12)
#define _SHR_PORT_PHY_TIMESYNC_64BIT_TIMESTAMP_ENABLE               (1U<<13)
#define _SHR_PORT_PHY_TIMESYNC_1588_OVER_HSR_ENABLE                 (1U<<14)

#define _SHR_PORT_PHY_TIMESYNC_CAPTURE_TIMESTAMP_TX_SYNC            (1U<<15)
#define _SHR_PORT_PHY_TIMESYNC_CAPTURE_TIMESTAMP_TX_DELAY_REQ       (1U<<16)
#define _SHR_PORT_PHY_TIMESYNC_CAPTURE_TIMESTAMP_TX_PDELAY_REQ      (1U<<17)
#define _SHR_PORT_PHY_TIMESYNC_CAPTURE_TIMESTAMP_TX_PDELAY_RESP     (1U<<18)
#define _SHR_PORT_PHY_TIMESYNC_CAPTURE_TIMESTAMP_RX_SYNC            (1U<<19)
#define _SHR_PORT_PHY_TIMESYNC_CAPTURE_TIMESTAMP_RX_DELAY_REQ       (1U<<20)
#define _SHR_PORT_PHY_TIMESYNC_CAPTURE_TIMESTAMP_RX_PDELAY_REQ      (1U<<21)
#define _SHR_PORT_PHY_TIMESYNC_CAPTURE_TIMESTAMP_RX_PDELAY_RESP     (1U<<22)
#define _SHR_PORT_PHY_TIMESYNC_ONE_STEP_ENABLE                      (1U<<23)

#define _SHR_PORT_PHY_TIMESYNC_INBAND_RESV0_ID_CHECK             (1U << 0)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_SYNC_ENABLE                (1U << 1)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_DELAY_RQ_ENABLE            (1U << 2)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_PDELAY_RQ_ENABLE           (1U << 3)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_PDELAY_RESP_ENABLE         (1U << 4)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_RESV0_ID_UPDATE            (1U << 5)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_CAP_SRC_PORT_CLK_ID        (1U << 6)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_MATCH_VLAN_ID              (1U << 7)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_MATCH_SRC_PORT_NUM         (1U << 8)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_MATCH_MAC_ADDR             (1U << 9)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_MATCH_IP_ADDR              (1U << 10)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_FOLLOW_UP_ASSIST           (1U << 11)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_DELAY_RESP_ASSIST          (1U << 12)
#define _SHR_PORT_PHY_TIMESYNC_INBAND_TIMER_MODE_SELECT          (1U << 13)

/* Base time structure. */
typedef struct _shr_time_spec_s {
    uint8 isnegative;   /* Sign identifier. */
    uint64 seconds;     /* Seconds absolute value. */
    uint32 nanoseconds; /* Nanoseconds absolute value. */
} _shr_time_spec_t;

/* Actions on Egress event messages */
typedef enum _shr_port_phy_timesync_event_message_egress_mode_e {
    _SHR_PORT_PHY_TIMESYNC_EVENT_MESSAGE_EGRESS_MODE_NONE = 0,
    _SHR_PORT_PHY_TIMESYNC_EVENT_MESSAGE_EGRESS_MODE_UPDATE_CORRECTIONFIELD = 1,
    _SHR_PORT_PHY_TIMESYNC_EVENT_MESSAGE_EGRESS_MODE_REPLACE_CORRECTIONFIELD_ORIGIN = 2,
    _SHR_PORT_PHY_TIMESYNC_EVENT_MESSAGE_EGRESS_MODE_CAPTURE_TIMESTAMP = 3
} _shr_port_phy_timesync_event_message_egress_mode_t;

/* Actions on ingress event messages */
typedef enum _shr_port_phy_timesync_event_message_ingress_mode_e {
    _SHR_PORT_PHY_TIMESYNC_EVENT_MESSAGE_INGRESS_MODE_NONE  = 0,
    _SHR_PORT_PHY_TIMESYNC_EVENT_MESSAGE_INGRESS_MODE_UPDATE_CORRECTIONFIELD = 1,
    _SHR_PORT_PHY_TIMESYNC_EVENT_MESSAGE_INGRESS_MODE_INSERT_TIMESTAMP = 2,
    _SHR_PORT_PHY_TIMESYNC_EVENT_MESSAGE_INGRESS_MODE_INSERT_DELAYTIME = 3
} _shr_port_phy_timesync_event_message_ingress_mode_t;

/* Global mode actions */
typedef enum _shr_port_phy_timesync_global_mode_e {
    _SHR_PORT_PHY_TIMESYNC_MODE_FREE    = 0,
    _SHR_PORT_PHY_TIMESYNC_MODE_SYNCIN  = 1,
    _SHR_PORT_PHY_TIMESYNC_MODE_CPU     = 2
} _shr_port_phy_timesync_global_mode_t;


typedef enum _shr_port_phy_timesync_framesync_mode_s
{
  _SHR_PORT_PHY_TIMESYNC_FRAMESYNC_NONE     = 0,
  _SHR_PORT_PHY_TIMESYNC_FRAMESYNC_SYNCIN0  = 1,
  _SHR_PORT_PHY_TIMESYNC_FRAMESYNC_SYNCIN1  = 2,
  _SHR_PORT_PHY_TIMESYNC_FRAMESYNC_SYNCOUT  = 3,
  _SHR_PORT_PHY_TIMESYNC_FRAMESYNC_CPU      = 4
} _shr_port_phy_timesync_framesync_mode_t;

typedef enum _shr_port_pcs_e {
    _SHR_PORT_PCS_8B9BLFEC                  = 0,
    _SHR_PORT_PCS_8B10B                     = 1,
    _SHR_PORT_PCS_64B66BFEC                 = 2,
    _SHR_PORT_PCS_64B66BBEC                 = 3,
    _SHR_PORT_PCS_64B66B                    = 4,
    _SHR_PORT_PCS_64B66B_RS_FEC             = 5,
    _SHR_PORT_PCS_64B66B_LOW_LATENCY_RS_FEC = 6,
    _SHR_PORT_PCS_64B66B_15T_RS_FEC             = 7,
    _SHR_PORT_PCS_64B66B_15T_LOW_LATENCY_RS_FEC = 8,
    _SHR_PORT_PCS_COUNT                         = 9,
    _SHR_PORT_PCS_UNKNOWN                   = -1
} _shr_port_pcs_t;


typedef struct _shr_port_phy_framesync_s {

    _shr_port_phy_timesync_framesync_mode_t mode;
    uint32 length_threshold;
    uint32 event_offset;

} _shr_port_phy_timesync_framesync_t;


typedef enum _shr_port_phy_timesync_syncout_mode_s
{
  _SHR_PORT_PHY_TIMESYNC_SYNCOUT_DISABLE        = 0,
  _SHR_PORT_PHY_TIMESYNC_SYNCOUT_ONE_TIME       = 1,
  _SHR_PORT_PHY_TIMESYNC_SYNCOUT_PULSE_TRAIN    = 2,
  _SHR_PORT_PHY_TIMESYNC_SYNCOUT_PULSE_TRAIN_WITH_SYNC = 3
} _shr_port_phy_timesync_syncout_mode_t;

typedef struct _shr_port_phy_timesync_syncout_s {

  _shr_port_phy_timesync_syncout_mode_t mode;
  uint16 pulse_1_length; /* in nanoseconds */
  uint16 pulse_2_length; /* in nanoseconds */
  uint32 interval; /* in nanoseconds */
  uint64 syncout_ts;

} _shr_port_phy_timesync_syncout_t;


    /* mpls_label_flags */
#define _SHR_PORT_PHY_TIMESYNC_MPLS_LABEL_IN                         (1U<<0)
#define _SHR_PORT_PHY_TIMESYNC_MPLS_LABEL_OUT                        (1U<<1)

typedef struct _shr_port_phy_timesync_mpls_label_s {

    uint32 value; /* bits [19:0] */
    uint32 mask; /* bits [19:0] */
    uint32 flags; /* label flags */

} _shr_port_phy_timesync_mpls_label_t;


    /* mpls_flags */
#define _SHR_PORT_PHY_TIMESYNC_MPLS_ENABLE                           (1U<<0)
#define _SHR_PORT_PHY_TIMESYNC_MPLS_ENTROPY_ENABLE                   (1U<<1)
#define _SHR_PORT_PHY_TIMESYNC_MPLS_SPECIAL_LABEL_ENABLE             (1U<<2)
#define _SHR_PORT_PHY_TIMESYNC_MPLS_CONTROL_WORD_ENABLE              (1U<<3)

typedef struct _shr_port_phy_timesync_mpls_control_s {
    uint32 flags;
    uint32 special_label; /* bits [19:0] */
    _shr_port_phy_timesync_mpls_label_t labels[10]; /* Timesync MPLS labels */
    int size; /* Number of elements in label array */

} _shr_port_phy_timesync_mpls_control_t;

#define _SHR_PORT_PHY_TIMESYNC_TN_LOAD                               (1U<<23)
#define _SHR_PORT_PHY_TIMESYNC_TN_ALWAYS_LOAD                        (1U<<22)
#define _SHR_PORT_PHY_TIMESYNC_TIMECODE_LOAD                         (1U<<21)
#define _SHR_PORT_PHY_TIMESYNC_TIMECODE_ALWAYS_LOAD                  (1U<<20)
#define _SHR_PORT_PHY_TIMESYNC_SYNCOUT_LOAD                          (1U<<19)
#define _SHR_PORT_PHY_TIMESYNC_SYNCOUT_ALWAYS_LOAD                   (1U<<18)
#define _SHR_PORT_PHY_TIMESYNC_NCO_DIVIDER_LOAD                      (1U<<17)
#define _SHR_PORT_PHY_TIMESYNC_NCO_DIVIDER_ALWAYS_LOAD               (1U<<16)
#define _SHR_PORT_PHY_TIMESYNC_LOCAL_TIME_LOAD                       (1U<<15)
#define _SHR_PORT_PHY_TIMESYNC_LOCAL_TIME_ALWAYS_LOAD                (1U<<14)
#define _SHR_PORT_PHY_TIMESYNC_NCO_ADDEND_LOAD                       (1U<<13)
#define _SHR_PORT_PHY_TIMESYNC_NCO_ADDEND_ALWAYS_LOAD                (1U<<12)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_LOOP_FILTER_LOAD                 (1U<<11)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_LOOP_FILTER_ALWAYS_LOAD          (1U<<10)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_REF_PHASE_LOAD                   (1U<<9)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_REF_PHASE_ALWAYS_LOAD            (1U<<8)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_REF_PHASE_DELTA_LOAD             (1U<<7)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_REF_PHASE_DELTA_ALWAYS_LOAD      (1U<<6)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_K3_LOAD                          (1U<<5)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_K3_ALWAYS_LOAD                   (1U<<4)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_K2_LOAD                          (1U<<3)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_K2_ALWAYS_LOAD                   (1U<<2)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_K1_LOAD                          (1U<<1)
#define _SHR_PORT_PHY_TIMESYNC_DPLL_K1_ALWAYS_LOAD                   (1U<<0)

#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT                   (1U<<1)

#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT_0                 COMPILER_64_INIT((1U<<0),0)
#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT_1                 COMPILER_64_INIT((1U<<1),0)
#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT_2                 COMPILER_64_INIT((1U<<2),0)
#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT_3                 COMPILER_64_INIT((1U<<3),0)
#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT_4                 COMPILER_64_INIT((1U<<4),0)
#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT_5                 COMPILER_64_INIT((1U<<5),0)
#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT_6                 COMPILER_64_INIT((1U<<6),0)
#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT_7                 COMPILER_64_INIT((1U<<7),0)

#define _SHR_PORT_PHY_TIMESYNC_FRAMESYNC_INTERRUPT                   (1U<<0)

#define _SHR_PORT_PHY_TIMESYNC_TIMESTAMP_INTERRUPT_MASK              (1U<<1)
#define _SHR_PORT_PHY_TIMESYNC_FRAMESYNC_INTERRUPT_MASK              (1U<<0)

/* Fast call actions */
typedef enum _shr_port_control_timesync_e {
    _SHR_PORT_CONTROL_PHY_TIMESYNC_CAPTURE_TIMESTAMP    = 0,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_HEARTBEAT_TIMESTAMP  = 1,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_NCOADDEND            = 2,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_FRAMESYNC            = 3,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_LOCAL_TIME           = 4,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_LOAD_CONTROL         = 5,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_INTERRUPT            = 6,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_INTERRUPT_MASK       = 7,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_TX_TIMESTAMP_OFFSET  = 8,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_RX_TIMESTAMP_OFFSET  = 9,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_NSE_TIME_OFFSET      = 10,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_TIMESTAMP_OFFSET     = 11,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_TIMESTAMP_ADJUST     = 12,
    _SHR_PORT_CONTROL_PHY_TIMESYNC_ONE_STEP_ENABLE      = 13
} _shr_port_control_phy_timesync_t;

/*AM norm modes for aggregated port speeds*/
typedef enum _shr_port_phy_timesync_compensation_mode_e {
    _SHR_PORT_PHY_TIMESYNC_COMPENSATION_MODE_NONE           = 0,
    _SHR_PORT_PHY_TIMESYNC_COMPENSATION_MODE_EARLIEST_LANE  = 1,
    _SHR_PORT_PHY_TIMESYNC_COMPENSATION_MODE_LATEST_LANE    = 2
} _shr_port_phy_timesync_compensation_mode_t;

typedef enum _shr_port_phy_timesync_msg_e {
  _SHR_PORT_PHY_TIMESYNC_MSG_SYNC           = 0,
  _SHR_PORT_PHY_TIMESYNC_MSG_DELAY_REQ      = 1,
  _SHR_PORT_PHY_TIMESYNC_MSG_PDELAY_REQ     = 2,
  _SHR_PORT_PHY_TIMESYNC_MSG_PDELAY_RESP    = 3
} _shr_port_phy_timesync_msg_t;

typedef enum _shr_port_phy_timesync_prot_e {
  _SHR_PORT_PHY_TIMESYNC_PROT_LAYER2    = 0,
  _SHR_PORT_PHY_TIMESYNC_PROT_IPV4_UDP  = 1,
  _SHR_PORT_PHY_TIMESYNC_PROT_IPV6_UDP  = 2
} _shr_port_phy_timesync_prot_t;

typedef enum _shr_port_phy_timesync_dir_e {
  _SHR_PORT_PHY_TIMESYNC_DIR_EGRESS  = 0,
  _SHR_PORT_PHY_TIMESYNC_DIR_INGRESS = 1
} _shr_port_phy_timesync_dir_t;

typedef struct _shr_port_phy_timesync_timer_adjust_s {
    _shr_port_phy_timesync_timer_mode_t mode;
    int    delta;
} _shr_port_phy_timesync_timer_adjust_t;

typedef struct _shr_port_phy_timesync_inband_control_s {
    uint32   flags;
    int      resv0_id;
    _shr_port_phy_timesync_timer_mode_t   timer_mode;
} _shr_port_phy_timesync_inband_control_t;

/* Base timesync configuration type. */
typedef struct _shr_port_phy_timesync_enhanced_capture_s {
    _shr_port_phy_timesync_msg_t msg_type;
    _shr_port_phy_timesync_prot_t protocol;
    _shr_port_phy_timesync_dir_t direction;
    int seq_id;
    uint32 domain;
    uint64 timestamp;
    uint64 source_port_identity;
    uint16 source_port;
    uint16 vlan_id;
} _shr_port_phy_timesync_enhanced_capture_t;

/* Base timesync configuration type. */
typedef struct _shr_port_phy_timesync_config_s {
    uint32 capabilities;                /* Flags BCM_PORT_PHY_TIMESYNC_CAP_* */
    uint32 validity_mask;               /* Flags BCM_PORT_PHY_TIMESYNC_VALID_* */
    uint32 flags;                       /* Flags BCM_PORT_PHY_TIMESYNC_* */
    uint16 itpid;                       /* 1588 inner tag */
    uint16 otpid;                       /* 1588 outer tag */
    uint16 otpid2;                      /* 1588 outer tag 2 */
    _shr_port_phy_timesync_timer_adjust_t timer_adjust;
    _shr_port_phy_timesync_inband_control_t inband_control; /* Inband TS control */
    _shr_port_phy_timesync_global_mode_t gmode; /* Global mode */
    _shr_port_phy_timesync_framesync_t framesync;
    _shr_port_phy_timesync_syncout_t syncout;
    uint16 ts_divider;
    _shr_time_spec_t original_timecode;  /* Original timecode to be inserted */
    uint32 tx_timestamp_offset;         /* TX AFE delay in ns - per port */
    uint32 rx_timestamp_offset;         /* RX AFE delay in ns - per port */
    uint32 rx_link_delay;
    _shr_port_phy_timesync_event_message_egress_mode_t tx_sync_mode; /* sync */
    _shr_port_phy_timesync_event_message_egress_mode_t tx_delay_request_mode; /* delay request */
    _shr_port_phy_timesync_event_message_egress_mode_t tx_pdelay_request_mode; /* pdelay request */
    _shr_port_phy_timesync_event_message_egress_mode_t tx_pdelay_response_mode; /* pdelay response */
    _shr_port_phy_timesync_event_message_ingress_mode_t rx_sync_mode; /* sync */
    _shr_port_phy_timesync_event_message_ingress_mode_t rx_delay_request_mode; /* delay request */
    _shr_port_phy_timesync_event_message_ingress_mode_t rx_pdelay_request_mode; /* pdelay request */
    _shr_port_phy_timesync_event_message_ingress_mode_t rx_pdelay_response_mode; /* pdelay response */
    _shr_port_phy_timesync_mpls_control_t mpls_control;
    uint32 sync_freq;   /* sync frequency */
    uint16 phy_1588_dpll_k1;
    uint16 phy_1588_dpll_k2;
    uint16 phy_1588_dpll_k3;
    uint64 phy_1588_dpll_loop_filter; /* loop filter */
    uint64 phy_1588_dpll_ref_phase;   /* ref phase */
    uint32 phy_1588_dpll_ref_phase_delta;   /* ref phase delta */
} _shr_port_phy_timesync_config_t;

/* timestamp adjust */
typedef struct _shr_port_timestamp_adjust_s {
    uint32 osts_adjust;    /* MAC pipeline delay in OSTS */
    uint32 tsts_adjust;    /* Delay of TS timer from TS clk to TSC_Clk domain */
} _shr_port_timestamp_adjust_t;

/* _shr_port_phy_timesync_config_set */
extern int _shr_port_phy_timesync_config_set(
    int unit,
    _shr_port_t port,
    _shr_port_phy_timesync_config_t *conf);

/* _shr_port_phy_timesync_config_get */
extern int _shr_port_phy_timesync_config_get(
    int unit,
    _shr_port_t port,
    _shr_port_phy_timesync_config_t *conf);

/* _shr_port_control_phy_timesync_set */
extern int _shr_port_control_phy_timesync_set(
    int unit,
    _shr_port_t port,
    _shr_port_control_phy_timesync_t type,
    uint64 value);

/* _shr_port_control_phy_timesync_get */
extern int _shr_port_control_phy_timesync_get(
    int unit,
    _shr_port_t port,
    _shr_port_control_phy_timesync_t type,
    uint64 *value);

/* _shr_port_control_phy_timesync_enhanced_capture_get */
extern int _shr_port_control_phy_timesync_enhanced_capture_get(
    int unit,
    _shr_port_t port,
    _shr_port_phy_timesync_enhanced_capture_t *value);

/***************************
 * OAM related definitions
 */

#define _SHR_PORT_PHY_OAM_MAC_CHECK_ENABLE    (1U << 0) /* Enable MAC check for
                                                          Delay Measurement */
#define _SHR_PORT_PHY_OAM_CONTROL_WORD_ENABLE (1U << 1) /* Enable Control Word
                                                          for Delay Measurement */
#define _SHR_PORT_PHY_OAM_DM_ENTROPY_ENABLE   (1U << 2) /* Enable entropy for
                                                          Delay Measurement */
#define _SHR_PORT_PHY_OAM_DM_TS_FORMAT        (1U << 3) /* Select timestamp
                                                          format PTP(0)/NTP(1)
                                                          for Delay Measurement */

/* Port controls for phy OAM */
typedef enum _shr_port_control_phy_oam_e {
    _SHR_PORT_CONTROL_PHY_OAM_DM_TX_ETHERTYPE = 1, /* OAM Delay measurement Tx Ethertype */
    _SHR_PORT_CONTROL_PHY_OAM_DM_RX_ETHERTYPE = 2, /* OAM Delay measurement Rx Ethertype */
    _SHR_PORT_CONTROL_PHY_OAM_DM_TX_PORT_MAC_ADDRESS_INDEX = 3, /* Index to select the MAC address. Use
                                           index of 1 to select MacAddress1,
                                           index of 2 for MacAddress2 and so
                                           forth. */
    _SHR_PORT_CONTROL_PHY_OAM_DM_RX_PORT_MAC_ADDRESS_INDEX = 4, /* Index to select the MAC address. Use
                                           index of 1 to select MacAddress1,
                                           index of 2 for MacAddress2 and so
                                           forth. */
    _SHR_PORT_CONTROL_PHY_OAM_DM_MAC_ADDRESS_1 = 5, /* OAM Delay measurement MAC address 1.
                                           There can be multiple MAC address to
                                           choose from in a PHY depending upon
                                           the design */
    _SHR_PORT_CONTROL_PHY_OAM_DM_MAC_ADDRESS_2 = 6, /* OAM Delay measurement MAC address 2.
                                           There can be multiple MAC address to
                                           choose from in a PHY depending upon
                                           the design */
    _SHR_PORT_CONTROL_PHY_OAM_DM_MAC_ADDRESS_3 = 7/* OAM Delay measurement MAC address 3.
                                           There can be multiple MAC address to
                                           choose from in a PHY depending upon
                                           the design */
} _shr_port_control_phy_oam_t;

/* Phy OAM Delay Measurement Modes */
typedef enum _shr_port_config_phy_oam_dm_mode_e {
    _SHR_PORT_CONFIG_PHY_OAM_DM_Y1731 = 1, /* OAM Delay measurement Y.7131 Mode */
    _SHR_PORT_CONFIG_PHY_OAM_DM_BHH   = 2, /* OAM Delay measurement BHH Mode */
    _SHR_PORT_CONFIG_PHY_OAM_DM_IETF  = 3 /* OAM Delay measurement IETF Mode */
} _shr_port_config_phy_oam_dm_mode_t;

/* Phy OAM Delay measurement config type. */
typedef struct _shr_port_config_phy_oam_dm_s {
    uint32 flags;                    /* OAM Delay Measurement config flags */
    _shr_port_config_phy_oam_dm_mode_t mode; /* OAM Delay Measurement mode Y.1731,
                                           BHH or IETF */
} _shr_port_config_phy_oam_dm_t;

/* Phy OAM config type. */
typedef struct _shr_port_config_phy_oam_s {
    _shr_port_config_phy_oam_dm_t tx_dm_config; /* OAM delay measurement config for Tx */
    _shr_port_config_phy_oam_dm_t rx_dm_config; /* OAM delay measurement config for Rx */
} _shr_port_config_phy_oam_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* _shr_port_config_phy_oam_set */
extern int _shr_port_config_phy_oam_set(
    int unit,
    _shr_port_t port,
    _shr_port_config_phy_oam_t *conf);

/* _shr_port_config_phy_oam_get */
extern int _shr_port_config_phy_oam_get(
    int unit,
    _shr_port_t port,
    _shr_port_config_phy_oam_t *conf);

/* _shr_port_control_phy_oam_set */
extern int _shr_port_control_phy_oam_set(
    int unit,
    _shr_port_t port,
    _shr_port_control_phy_oam_t type,
    uint64 value);

/* _shr_port_control_phy_oam_get */
extern int _shr_port_control_phy_oam_get(
    int unit,
    _shr_port_t port,
    _shr_port_control_phy_oam_t type,
    uint64 *value);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef enum _shr_port_phy_tx_tap_mode_e {
    _SHR_PORT_PHY_TX_TAP_MODE_3_TAP = 0,
    _SHR_PORT_PHY_TX_TAP_MODE_6_TAP = 1
} _shr_port_phy_tx_tap_mode_t;

typedef enum _shr_port_phy_signalling_mode_t {
    _SHR_PORT_PHY_SIGNALLING_MODE_NRZ = 0,
    _SHR_PORT_PHY_SIGNALLING_MODE_PAM4 = 1
} _shr_port_phy_signalling_mode_t;

typedef struct _shr_port_phy_tx_s {
    int pre2;
    int pre;
    int main;
    int post;
    int post2;
    int post3;
    int amp;
    int drv_mode;
    _shr_port_phy_tx_tap_mode_t tx_tap_mode;
    _shr_port_phy_signalling_mode_t signalling_mode;
} _shr_port_phy_tx_t;

typedef struct _shr_port_rlm_config_s {
    int is_initiator;
    uint32 active_lane_bit_map;
} _shr_port_rlm_config_t;
#endif	/* !_SHR_PORT_H */
