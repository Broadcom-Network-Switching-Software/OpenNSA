/*
 * 
 * This software is governed by the Broadcom Switch APIs license.
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenNSA/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_PKTIO_H__
#define __BCM_PKTIO_H__

#include <shared/bitop.h>
#include <bcm/types.h>

#define BCM_PKTIO_PMD_SIZE_WORDS    48         /* Packet metadata size. */

/* Packet metadata information. */
typedef struct bcm_pktio_pmd_s {
    uint32 *rxpmd;                      /* RX Packet metadata handle. */
    uint32 *txpmd;                      /* TX Packet metadata handle. */
    uint32 *higig;                      /* HiGig handle. */
    uint32 *lbhdr;                      /* Loopback Header handle. */
    uint32 data[BCM_PKTIO_PMD_SIZE_WORDS]; /* Headers' data. */
} bcm_pktio_pmd_t;

typedef struct bcm_pktio_pkt_s bcm_pktio_pkt_t;

/* Packet structure. */
struct bcm_pktio_pkt_s { 
    bcm_pktio_pkt_t *next;  /* Point to next packet in the list. */
    bcm_pktio_pkt_t *prev;  /* Point to previous packet in the list. */
    int unit;               /* Switch unit number. */
    uint32 flags;           /* Internal used only. */
    uint32 type;            /* Packet forwarding type. */
    bcm_pktio_pmd_t pmd;    /* Packet metadata information. */
    void *data_buf;         /* Packet data buffer information. */
};

#define BCM_PKTIO_BUF_F_TX      (0x1 << 0) /* Reserve space for TX overhead. */

#ifndef BCM_HIDE_DISPATCHABLE

/* Allocate a packet structure and packet data. */
extern int bcm_pktio_alloc(
    int unit, 
    uint32 max_size, 
    uint32 flags, 
    bcm_pktio_pkt_t **packet);

/* Release packet data buffer and destroy packet object. */
extern int bcm_pktio_free(
    int unit, 
    bcm_pktio_pkt_t *packet);

/* Claim the packet. */
extern int bcm_pktio_claim(
    int unit, 
    bcm_pktio_pkt_t *pkt, 
    bcm_pktio_pkt_t **new_pkt);

/* Retrieve packet data handle and length. */
extern int bcm_pktio_pkt_data_get(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    void **data, 
    uint32 *length);

/* Reserve buffer size in headroom. */
extern int bcm_pktio_reserve(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    uint32 len, 
    void **data);

/* Add extra size in the front of a packet data. */
extern int bcm_pktio_push(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    uint32 len, 
    void **data);

/* Add bytes in the end of a packet data. */
extern int bcm_pktio_put(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    uint32 len, 
    void **data);

/* Remove bytes from the start of packet data. */
extern int bcm_pktio_pull(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    uint32 len, 
    void **data);

/* Remove end from packet buffer. */
extern int bcm_pktio_trim(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    uint32 len);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_PKTIO_BITMAP_WORD_SIZE  8          /* Bitmap array size. */

typedef struct bcm_pktio_bitmap_s {
    uint32 pbits[BCM_PKTIO_BITMAP_WORD_SIZE]; 
} bcm_pktio_bitmap_t;

#define BCM_PKTIO_FID_INVALID   -1         /* Invalid field id. */

#define BCM_PKTIO_FID_COUNT     BCM_PKTIO_BITMAP_WORD_SIZE * 32 /* Field id number. */

/* Packet metadata field ID supported bit array. */
typedef struct bcm_pktio_fid_support_s {
    bcm_pktio_bitmap_t txpmd_support;   /* TXPMD field ID supported bit array. */
    bcm_pktio_bitmap_t rxpmd_support;   /* RXPMD field ID supported bit array. */
    bcm_pktio_bitmap_t gih_support;     /* GIH field ID supported bit array. */
    bcm_pktio_bitmap_t rxflex_support;  /* FLEXPMD field ID supported bit array. */
    bcm_pktio_bitmap_t higig3_support;  /* HiGig3 field ID supported bit array. */
} bcm_pktio_fid_support_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Get the pmd support bitmap of different pmd types. */
extern int bcm_pktio_pmd_fid_support_get(
    int unit, 
    bcm_pktio_fid_support_t *support);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Macro to get a field ID's supported status.
 * 
 * Returns:
 *   zero     => Not supported
 *   non-zero => Supported
 */
#define BCM_PKTIO_FID_SUPPORT_GET(_support, _fid)  \
    SHR_BITGET(((_support).pbits), (_fid)) 

/* Macro to iterate over all supported field IDs in the _support. */
#define BCM_PKTIO_FID_SUPPORT_ITER(_support, _fid)  \
    for ((_fid) = BCM_PKTIO_FID_INVALID + 1; \
         (_fid) < BCM_PKTIO_FID_COUNT; \
         (_fid)++) \
        if (BCM_PKTIO_FID_SUPPORT_GET(_support, _fid)) 

/* Packet Metadata Types. */
typedef enum bcm_pktio_pmd_type_e {
    bcmPktioPmdTypeTx = 0, 
    bcmPktioPmdTypeRx = 1, 
    bcmPktioPmdTypeGih = 2, 
    bcmPktioPmdTypeRxFlex = 3, 
    bcmPktioPmdTypeHigig3 = 4 
} bcm_pktio_pmd_type_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Set value into a specific PMD field. */
extern int bcm_pktio_pmd_field_set(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    bcm_pktio_pmd_type_t type, 
    int fid, 
    uint32 val);

/* Get value from a specific PMD field. */
extern int bcm_pktio_pmd_field_get(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    bcm_pktio_pmd_type_t type, 
    int fid, 
    uint32 *val);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_PKTIO_REASON_NONE   0          /* No reason. */

#define BCM_PKTIO_REASON_COUNTS BCM_PKTIO_BITMAP_WORD_SIZE * 32 /* Reason id number. */

/* Packet reasons bitmap. */
typedef struct bcm_pktio_reasons_s {
    bcm_pktio_bitmap_t rx_reasons;      /* Packet rx reasons bitmap. */
    bcm_pktio_bitmap_t flex_reasons;    /* Packet flex reasons bitmap. */
} bcm_pktio_reasons_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Get RX reasons from RXPMD and RXFLEXPMD. */
extern int bcm_pktio_pmd_reasons_get(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    bcm_pktio_reasons_t *reasons);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Macro to check if a reason is included in a set of reasons.
 * 
 * Returns:
 *   zero     => reason is not included in the set
 *   non-zero => reason is included in the set
 */
#define BCM_PKTIO_REASON_GET(_reasons, _reason)  \
    SHR_BITGET(((_reasons).pbits), (_reason)) 

/* Macro to add a reason to a set of reasons. */
#define BCM_PKTIO_REASON_SET(_reasons, _reason)  \
    SHR_BITSET(((_reasons).pbits), (_reason)) 

/* Macro to add all reasons to a set of reasons. */
#define BCM_PKTIO_REASON_SET_ALL(_reasons)  \
    SHR_BITSET_RANGE(((_reasons).pbits), 0, BCM_PKTIO_REASON_COUNTS) 

/* Macro to clear a reason from a set of reasons. */
#define BCM_PKTIO_REASON_CLEAR(_reasons, _reason)  \
    SHR_BITCLR(((_reasons).pbits), (_reason)) 

/* Macro to clear a set of reasons. */
#define BCM_PKTIO_REASON_CLEAR_ALL(_reasons)  \
    SHR_BITCLR_RANGE(((_reasons).pbits), 0, BCM_PKTIO_REASON_COUNTS) 

/* Macro to check if a set of reasons is empty. */
#define BCM_PKTIO_REASON_IS_NULL(_reasons)  \
    SHR_BITNULL_RANGE(((_reasons).pbits), 0, BCM_PKTIO_REASON_COUNTS) 

/* Macro to itterate over a set of reasons. */
#define BCM_PKTIO_REASON_ITER(_reasons, _reason)  \
    for((_reason) = BCM_PKTIO_REASON_NONE; \
        (_reason) < BCM_PKTIO_REASON_COUNTS; \
        (_reason)++) \
        if(BCM_PKTIO_REASON_GET(_reasons, _reason)) 

/* Macro to count number of active reasons in a set of reasons. */
#define BCM_PKTIO_REASON_COUNT(_reasons, _count)  \
    SHR_BITCOUNT_RANGE(((_reasons).pbits), _count, 0, BCM_PKTIO_REASON_COUNTS) 

/* Macro to compare two sets of reasons. */
#define BCM_PKTIO_REASON_EQ(_reasons1, _reasons2)  \
    SHR_BITEQ_RANGE(((_reasons1).pbits), ((_reasons2).pbits), \
                    0, BCM_PKTIO_REASON_COUNTS) 

#define BCM_PKTIO_TX_MC_QUEUE   0x1        /* Indicates packet goes to MC queue. */

/* Packet metadata. */
typedef struct bcm_pktio_txpmd_s {
    bcm_port_t tx_port; /* TX port. */
    uint8 prio_int;     /* Internal priority of the packet. */
    uint8 cos;          /* The local COS queue to use. */
    uint32 flags;       /* BCM_PKTIO_TX_xxx flags. */
} bcm_pktio_txpmd_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Transmit one packet. */
extern int bcm_pktio_pmd_set(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    bcm_pktio_txpmd_t *txpmd);

/* Transmit one packet. */
extern int bcm_pktio_tx(
    int unit, 
    bcm_pktio_pkt_t *packet);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Return values from packet I/O RX callout routines. */
typedef enum bcm_pktio_rx_e {
    BCM_PKTIO_RX_NOT_HANDLED = 0,   /* Packet not processed. Dispatcher will
                                       deliver it to the next callback. */
    BCM_PKTIO_RX_HANDLED = 1        /* Packet handled. Dispatcher will skip next
                                       callback. */
} bcm_pktio_rx_t;

/* Callback function type for applications using packet IO facility. */
typedef bcm_pktio_rx_t (*bcm_pktio_rx_cb_f)(
    int unit, 
    bcm_pktio_pkt_t *packet, 
    void *cookie);

#ifndef BCM_HIDE_DISPATCHABLE

/* Register receive callbacks for received packets. */
extern int bcm_pktio_rx_register(
    int unit, 
    const char *name, 
    bcm_pktio_rx_cb_f callback, 
    uint8 priority, 
    void *cookie, 
    uint32 flags);

/* Unregister receive callbacks for received packets. */
extern int bcm_pktio_rx_unregister(
    int unit, 
    bcm_pktio_rx_cb_f callback, 
    uint8 priority);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_PKTIO_NETIF_NAME_MAX    16         /* Maximum chars are allowed in
                                                  network interface name. */
#define BCM_PKTIO_NETIF_MAX_IDS     64         /* Maximum Network interface ID
                                                  number. Valid ID is from 1 to
                                                  63. 0 is reserved. */

#define BCM_PKTIO_NETIF_F_RCPU_ENCAP    (1 << 0)   /* RCPU header encapsulation
                                                      is used for delivering
                                                      packet metadata to/from
                                                      applications.
                                                      Applications should
                                                      encapsulate RCPU header
                                                      when transmitting packets
                                                      to the netif,
                                                      and may parser RCPU header
                                                      when receiving packets
                                                      from the netif. */
#define BCM_PKTIO_NETIF_F_BIND_RX_CH    (1 << 1)   /* Bind this netif with a RX
                                                      DMA channel. All packets
                                                      from
                                                      the DMA channel will be
                                                      forwarded to this netif. */
#define BCM_PKTIO_NETIF_F_BIND_TX_PORT  (1 << 2)   /* Bind this network
                                                      interface to a front-panel
                                                      switch port for
                                                      transmission.  All packets
                                                      from this network
                                                      interface will be
                                                      forwarded to the bound
                                                      switch port. */
#define BCM_PKTIO_NETIF_F_ADD_TAG       (1 << 3)   /* Add VLAN tag for packets
                                                      transmitted via this
                                                      network interface. */

/* Packet network interface structure. */
typedef struct bcm_pktio_netif_s {
    int id;                             /* Network interface ID. */
    uint32 flags;                       /* Creation flag. Refer to
                                           BCM_PKTIO_NETIF_F_XXX flags. */
    bcm_mac_t mac_addr;                 /* MAC address associated with this
                                           network interface. */
    uint16 vlan;                        /* Default VLAN ID associated with this
                                           network interface. */
    bcm_port_t port;                    /* Bind with a network interface for
                                           transmit destination port. */
    char port_encap[10];                /* port_encap works with port to tell
                                           the encapsulation type of the port. */
    int port_queue;                     /* port_queue works with port to tell
                                           egress queue number. */
    int dma_chan_id;                    /* Bind a Rx DMA channel with this
                                           netif. */
    uint32 max_frame_size;              /* Max packet size is for this netif.
                                           Any packet which size is bigger than
                                           this setting will be dropped. */
    char name[BCM_PKTIO_NETIF_NAME_MAX]; /* Network interface name. */
} bcm_pktio_netif_t;

/* Network interface traverse callback function */
typedef int (*bcm_pktio_netif_traverse_cb_f)(
    int unit, 
    bcm_pktio_netif_t *netif, 
    void *cb_data);

#define BCM_PKTIO_FILTER_T_RX_PKT   1          /* Packet filter for RX
                                                  direction. */

#define BCM_PKTIO_FILTER_F_STRIP_TAG    0x00000001 /* Strip VLAN tag from
                                                      packets sent to virtual
                                                      network interfaces. */

#define BCM_PKTIO_DEST_T_NULL       0          /* Null destination (drop
                                                  packet). */
#define BCM_PKTIO_DEST_T_NETIF      1          /* Send packet to virtual network
                                                  interface. */
#define BCM_PKTIO_DEST_T_BCM_RX_API 2          /* Send packet to BCM Rx API. */
#define BCM_PKTIO_DEST_T_CALLBACK   3          /* Send packet to kernel 
                                                  call-back function. */

#define BCM_PKTIO_FILTER_M_RAW          0x00000001 /* Match raw packet data. */
#define BCM_PKTIO_FILTER_M_VLAN         0x00000002 /* Match VLAN ID. */
#define BCM_PKTIO_FILTER_M_INGPORT      0x00000004 /* Match local ingress port. */
#define BCM_PKTIO_FILTER_M_SRC_MODPORT  0x00000008 /* Match source module port. */
#define BCM_PKTIO_FILTER_M_SRC_MODID    0x00000010 /* Match source module ID. */
#define BCM_PKTIO_FILTER_M_REASON       0x00000020 /* Match copy-to-CPU reason
                                                      code */
#define BCM_PKTIO_FILTER_M_FP_RULE      0x00000040 /* Match filter processor
                                                      rule number. */
#define BCM_PKTIO_FILTER_M_ERROR        0x00000080 /* Match error bit. */
#define BCM_PKTIO_FILTER_M_CPU_QUEUE    0x00000100 /* Match CPU queue (rx
                                                      queue). */

#define BCM_PKTIO_FILTER_DESC_MAX   32         /* Filter description maximum
                                                  size. */
#define BCM_PKTIO_FILTER_SIZE_MAX   256        /* Packet raw data maximum size. */

/* Packet filter structure. */
typedef struct bcm_pktio_filter_s {
    int id;                             /* Filter ID. */
    uint32 type;                        /* Filter type. Refer to
                                           BCM_PKTIO_FILTER_T_XXX. */
    uint32 flags;                       /* Filter flags. Refer to
                                           BCM_PKTIO_FILTER_F_XXX. */
    uint32 priority;                    /* Filter priority (0 is highest). */
    uint32 dest_type;                   /* Destination type. Refer to
                                           BCM_PKTIO_DEST_T_XXX. */
    int dest_id;                        /* Filter destination ID. */
    uint16 dest_proto;                  /* If non-zero this value overrides the
                                           default protocol type when matching
                                           packet is passed to network stack. */
    uint32 mirror_type;                 /* Destination type. Refer to
                                           BCM_PKTIO_DEST_T_XXX. */
    int mirror_id;                      /* Mirror destination ID. */
    uint16 mirror_proto;                /* If non-zero this value overrides the
                                           default protocol type when matching
                                           packet is passed to network stack. */
    int dma_chan;                       /* Source RX DMA channel to match. */
    uint32 match_flags;                 /* Refert to BCM_PKTIO_FILTER_M_XXX. */
    char desc[BCM_PKTIO_FILTER_DESC_MAX]; /* Filter description (optional). */
    uint16 m_vlan;                      /* VLAN ID to match. */
    bcm_port_t m_ingport;               /* Local ingress port to match. */
    bcm_port_t m_src_modport;           /* Source module port to match. */
    int m_src_modid;                    /* Source module ID to match. */
    int m_cpu_queue;                    /* Source CPU port queue to match. */
    bcm_pktio_bitmap_t m_reason;        /* Copy-to-CPU reason to match. */
    uint32 m_fp_rule;                   /* Filter processor rule to match. */
    uint32 raw_size;                    /* Size of valid raw data and mask. */
    uint8 m_raw_data[BCM_PKTIO_FILTER_SIZE_MAX]; /* Raw data to match. */
    uint8 m_raw_mask[BCM_PKTIO_FILTER_SIZE_MAX]; /* Raw data mask to match. */
} bcm_pktio_filter_t;

/* Network interface traverse callback function */
typedef int (*bcm_pktio_filter_traverse_cb_f)(
    int unit, 
    bcm_pktio_filter_t *filter, 
    void *cb_data);

#define BCM_PKTIO_TRACE_LEARN   0x1        /* Learning enable on trace packet. */
#define BCM_PKTIO_TRACE_NO_IFP  0x2        /* Disable ingress field processor
                                              lookup on trace packet. */
#define BCM_PKTIO_TRACE_FORWARD 0x4        /* Forward internal trace packet to
                                              egress. */

/* Trace information used to construct trace packet. */
typedef struct bcm_pktio_trace_pkt_s {
    uint32 flags;       /* Trace flags refer to BCM_PKTIO_TRACE_XXX. */
    bcm_port_t port;    /* Local front panel port that acts as a masquerade
                           port. */
    int len;            /* Trace packet length. */
    uint8 *pkt;         /* Trace packet data. */
} bcm_pktio_trace_pkt_t;

#define BCM_PKTIO_TRACE_SIZE_BYTES  112        /* Maximum size of raw trace data
                                                  (in bytes). */

/* Raw trace data. */
typedef struct bcm_pktio_trace_data_s {
    uint32 len;                         /* Amount of available trace data. */
    uint8 buf[BCM_PKTIO_TRACE_SIZE_BYTES]; /* Trace data buffer. */
} bcm_pktio_trace_data_t;

#define BCM_PKTIO_TRACE_BITMAP_GET(_bitmap, _bit)  \
    SHR_BITGET(((_bitmap).pbits), (_bit)) 

#define BCM_PKTIO_TRACE_BITMAP_SET(_bitmap, _bit)  \
    SHR_BITSET(((_bitmap).pbits), (_bit)) 

#define BCM_PKTIO_TRACE_BITMAP_CLEAR_ALL(_bitmap)  \
    SHR_BITCLR_RANGE(((_bitmap).pbits), 0, BCM_PKTIO_BITMAP_WORD_SIZE * 32) 

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize packet IO module. */
extern int bcm_pktio_init(
    int unit);

/* Cleanup packet IO module. */
extern int bcm_pktio_cleanup(
    int unit);

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_PKTIO_H__ */
