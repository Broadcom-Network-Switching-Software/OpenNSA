/*
 * 
 * This software is governed by the Broadcom Switch APIs license.
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenNSA/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2019 Broadcom Inc. All rights reserved.
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_ECN_H__
#define __BCM_ECN_H__

#include <bcm/types.h>

/* ECN traffic map flag. */
#define BCM_ECN_TRAFFIC_MAP_RESPONSIVE  (1 << 0)   /* 1: Responsive, 0:
                                                      Non-responsive. */

/* Tunnel types definition for ECN traffic map. */
typedef enum bcm_ecn_traffic_map_tunnel_type_e {
    bcmEcnTrafficMapNonTunnel = 0,  /* None tunnel traffic. */
    bcmEcnTrafficMapL2Tunnel = 1,   /* L2 tunnel traffic, VxLAN and VPLS. */
    bcmEcnTrafficMapL3Tunnel = 2,   /* L3 tunnel traffic, IPinIP, L3GRE and L3
                                       MPLS. */
    bcmEcnTrafficMapMpls = 3,       /* MPLS transit traffic. */
    bcmEcnTrafficMapCount = 4       /* End of list. */
} bcm_ecn_traffic_map_tunnel_type_t;

/* ECN traffic map info. */
typedef struct bcm_ecn_traffic_map_info_s {
    uint32 flags;                       /* BCM_ECN_TRAFFIC_MAP_XXX flag
                                           definitions. */
    uint8 ecn;                          /* ECN value of packet's IP header. */
    int int_cn;                         /* Mapped internal congestion
                                           notification(int_cn) value. */
    uint8 tunnel_ecn;                   /* ECN information of packet's tunnel
                                           header. */
    bcm_ecn_traffic_map_tunnel_type_t tunnel_type; /* Tunnel type. */
} bcm_ecn_traffic_map_info_t;

/* ECN traffic action types */
#define BCM_ECN_TRAFFIC_ACTION_TYPE_ENQUEUE (0x1)      /* Action of enqueue
                                                          stage. */
#define BCM_ECN_TRAFFIC_ACTION_TYPE_DEQUEUE (0x2)      /* Action of dequeue
                                                          stage. */
#define BCM_ECN_TRAFFIC_ACTION_TYPE_EGRESS  (0x3)      /* Action of egress
                                                          stage. */

/* ECN traffic action flags */
#define BCM_ECN_TRAFFIC_ACTION_NONE         (0x0)      /* Action none */
#define BCM_ECN_TRAFFIC_ACTION_ENQUEUE_WRED_RESPONSIVE (1 << 0)   /* If set, enabled WRED
                                                          responsive dropping.
                                                          Otherwise, enables
                                                          WRED non-responsive
                                                          dropping. */
#define BCM_ECN_TRAFFIC_ACTION_ENQUEUE_MARK_ELIGIBLE (1 << 1)   /* If set, avoids WRED
                                                          dropping when ECN
                                                          marking is enabled. */
#define BCM_ECN_TRAFFIC_ACTION_DEQUEUE_CONGESTION_INT_CN_UPDATE (1 << 2)   /* If set, updates the
                                                          value of int_cn when
                                                          congestion is
                                                          experienced. */
#define BCM_ECN_TRAFFIC_ACTION_DEQUEUE_NON_CONGESTION_INT_CN_UPDATE (1 << 3)   /* If set, updates the
                                                          value of int_cn when
                                                          congestion is not
                                                          experienced. */
#define BCM_ECN_TRAFFIC_ACTION_EGRESS_ECN_MARKING (1 << 4)   /* If set, indicates that
                                                          the packet's ECN bits
                                                          need to be updated. */
#define BCM_ECN_TRAFFIC_ACTION_EGRESS_DROP  (1 << 5)   /* If set, indicates to
                                                          drop packet in egress. */
#define BCM_ECN_TRAFFIC_ACTION_INGRESS_DROP (1 << 6)   /* If set, indicates to
                                                          drop packet in
                                                          ingress. */
#define BCM_ECN_TRAFFIC_ACTION_EGRESS_EXP_MARKING (1 << 7)   /* If set, indicates to
                                                          update EXP. */
#define BCM_ECN_TRAFFIC_ACTION_INGRESS_ECN_MARKING (1 << 8)   /* If set, indicates to
                                                          update ECN. */
#define BCM_ECN_TRAFFIC_ACTION_RESPONSIVE   (1 << 9)   /* If set, indicates to
                                                          set configurations for
                                                          ecn responsive
                                                          traffic. */

/* 
 * ECN traffic action configuration.
 * 
 * Contains information required for assigning the actions of ECN
 * traffic.
 */
typedef struct bcm_ecn_traffic_action_config_s {
    uint32 action_type;         /* See BCM_ECN_TRAFFIC_ACTION_TYPE_XXX flag
                                   definitions. */
    uint32 action_flags;        /* See BCM_ECN_TRAFFIC_ACTION_XXX flag
                                   definitions. */
    int int_cn;                 /* Internal congestion notification. */
    bcm_color_t color;          /* Packet color. */
    uint8 ecn;                  /* ECN value of packet;s IP header. */
    uint8 new_ecn;              /* New ECN value for remarking. */
    int congested_int_cn;       /* New int_cn to be updated when the congestion
                                   is experienced. */
    int non_congested_int_cn;   /* New int_cn to be updated when the congestion
                                   is not experienced. */
    int responsive;             /* New responsive value to be used in the egress
                                   pipeline. */
} bcm_ecn_traffic_action_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * To configure the value of responsive indication of the IP protocol
 * value.
 */
extern int bcm_ecn_responsive_protocol_get(
    int unit, 
    uint8 ip_proto, 
    int *responsive);

/* 
 * To configure the value of responsive indication of the IP protocol
 * value.
 */
extern int bcm_ecn_responsive_protocol_set(
    int unit, 
    uint8 ip_proto, 
    int responsive);

/* To set/get the mapped internal congestion notification (int_cn). */
extern int bcm_ecn_traffic_map_get(
    int unit, 
    bcm_ecn_traffic_map_info_t *map);

/* To set/get the mapped internal congestion notification (int_cn). */
extern int bcm_ecn_traffic_map_set(
    int unit, 
    bcm_ecn_traffic_map_info_t *map);

/* Assign/Retrieve the actions to the specified ECN traffic. */
extern int bcm_ecn_traffic_action_config_get(
    int unit, 
    bcm_ecn_traffic_action_config_t *ecn_config);

/* Assign/Retrieve the actions to the specified ECN traffic. */
extern int bcm_ecn_traffic_action_config_set(
    int unit, 
    bcm_ecn_traffic_action_config_t *ecn_config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize an ECN traffic map information structure. */
extern void bcm_ecn_traffic_map_info_t_init(
    bcm_ecn_traffic_map_info_t *ecn_map);

/* Initialize an ECN traffic action configure structure. */
extern void bcm_ecn_traffic_action_config_t_init(
    bcm_ecn_traffic_action_config_t *ecn_action);

/* ECN map flags. */
#define BCM_ECN_MAP_WITH_ID             0x00000001 /* ECN map ID is specified by
                                                      users */
#define BCM_ECN_MAP_INGRESS             0x00000002 /* create an ingress map used
                                                      in conjunction with map
                                                      type */
#define BCM_ECN_MAP_EGRESS              0x00000004 /* create an egress map used
                                                      in conjunction with map
                                                      type */
#define BCM_ECN_MAP_MPLS                0x00000008 /* create an MPLS type of map */
#define BCM_ECN_MAP_MPLS_INT_CN_TO_EXP  0x00000010 /* create an INT_CN to EXP
                                                      map */
#define BCM_ECN_MAP_TUNNEL_TERM         0x00000020 /* create a tunnel term ecn
                                                      map */

#if defined(INCLUDE_L3)
/* MPLS ECN Map Structure. */
typedef struct bcm_ecn_map_s {
    uint32 action_flags;        /* action flags for ECN map. */
    int int_cn;                 /* Internal congestion. */
    uint8 inner_ecn;            /* IP ECN value in payload. */
    uint8 ecn;                  /* IP ECN value. */
    uint8 exp;                  /* Mpls EXP value. */
    uint8 new_ecn;              /* New ECN value. */
    uint8 new_exp;              /* New EXP value. */
    uint32 nonip_action_flags;  /* action flags for Non-ip ECN map. */
} bcm_ecn_map_t;
#endif

#ifndef BCM_HIDE_DISPATCHABLE

#if defined(INCLUDE_L3)
/* To create an ECN mapping profile. */
extern int bcm_ecn_map_create(
    int unit, 
    uint32 flags, 
    int *ecn_map_id);
#endif

#if defined(INCLUDE_L3)
/* To destroy an ECN mapping profile. */
extern int bcm_ecn_map_destroy(
    int unit, 
    int ecn_map_id);
#endif

#if defined(INCLUDE_L3)
/* To set an ECN mapping entry in an ECN mapping profile. */
extern int bcm_ecn_map_set(
    int unit, 
    uint32 options, 
    int ecn_map_id, 
    bcm_ecn_map_t *ecn_map);
#endif

#if defined(INCLUDE_L3)
/* To get an ECN mapping entry from an ECN mapping profile. */
extern int bcm_ecn_map_get(
    int unit, 
    int ecn_map_id, 
    bcm_ecn_map_t *ecn_map);
#endif

#endif /* BCM_HIDE_DISPATCHABLE */

#if defined(INCLUDE_L3)
/* To init an ECN mapping structure. */
extern void bcm_ecn_map_t_init(
    bcm_ecn_map_t *ecn_map);
#endif

/* ECN port map flags. */
#define BCM_ECN_EGRESS_PORT_ECN_TO_EXP_MAP  0x00000001 /* Indicate an ECN_TO_EXP
                                                          map */
#define BCM_ECN_EGRESS_PORT_INT_CN_TO_EXP_MAP 0x00000002 /* Indicate an
                                                          INT_CN_TO_EXP map */
#define BCM_ECN_INGRESS_PORT_TUNNEL_TERM_MAP 0x00000004 /* Indicate a tunnel term
                                                          ECN map */

#if defined(INCLUDE_L3)
/* MPLS ecn port Map Structure. */
typedef struct bcm_ecn_port_map_s {
    uint32 flags;   /* flags for ECN port map. */
    int ecn_map_id; /* Ecn map id. */
} bcm_ecn_port_map_t;
#endif

#if defined(INCLUDE_L3)
/* To initialize an ecn port map structure. */
extern void bcm_ecn_port_map_t_init(
    bcm_ecn_port_map_t *ecn_map);
#endif

#ifndef BCM_HIDE_DISPATCHABLE

#if defined(INCLUDE_L3)
/* To set/get the egress ecn_map_id on the specific port. */
extern int bcm_ecn_port_map_get(
    int unit, 
    bcm_gport_t port, 
    bcm_ecn_port_map_t *ecn_map);
#endif

#if defined(INCLUDE_L3)
/* To set/get the egress ecn_map_id on the specific port. */
extern int bcm_ecn_port_map_set(
    int unit, 
    bcm_gport_t port, 
    bcm_ecn_port_map_t *ecn_map);
#endif

#endif /* BCM_HIDE_DISPATCHABLE */

#if defined(INCLUDE_L3)
/* ecn dscp map mode */
typedef enum bcm_ecn_dscp_map_mode_e {
    bcmEcnDscpMapModeDraft = 0,     /* Draft mode */
    bcmEcnDscpMapModeRfc3168 = 1,   /* Mode defined in RFC3168 */
    bcmEcnDscpMapModeCount = 2      /* End of list */
} bcm_ecn_dscp_map_mode_t;
#endif

#if defined(INCLUDE_L3)
/* ecn map mode information */
typedef struct bcm_ecn_map_mode_s {
    int dscp;                           /* value of -1 to change all entries */
    bcm_ecn_dscp_map_mode_t dscp_map_mode; /* ecn map mode setting. */
} bcm_ecn_map_mode_t;
#endif

#if defined(INCLUDE_L3)
/* To initialize an ecn mapping mode structure. */
extern void bcm_ecn_map_mode_t_init(
    bcm_ecn_map_mode_t *ecn_map_mode);
#endif

#ifndef BCM_HIDE_DISPATCHABLE

#if defined(INCLUDE_L3)
/* Configure the ECN mapping mode. */
extern int bcm_ecn_map_mode_set(
    int unit, 
    bcm_ecn_map_mode_t *ecn_map_mode);
#endif

#if defined(INCLUDE_L3)
/* Retrieve the ECN mapping mode. */
extern int bcm_ecn_map_mode_get(
    int unit, 
    bcm_ecn_map_mode_t *ecn_map_mode);
#endif

#endif /* BCM_HIDE_DISPATCHABLE */

#endif /* __BCM_ECN_H__ */
