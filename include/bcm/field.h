/*
 * 
 * This software is governed by the Broadcom Switch APIs license.
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenNSA/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2020 Broadcom Inc. All rights reserved.
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_FIELD_H__
#define __BCM_FIELD_H__

#include <bcm/types.h>
#include <sal/core/libc.h>
#include <shared/field.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/rx.h>
#include <bcm/flowtracker.h>

/* Entry priority. */
#define BCM_FIELD_ENTRY_PRIO_HIGHEST    (0x7fffffff) /* Highest possible entry
                                                      priority in a group. */
#define BCM_FIELD_ENTRY_PRIO_DONT_CARE  BCM_FIELD_ENTRY_PRIO_LOWEST /* Default entry priority. */
#define BCM_FIELD_ENTRY_PRIO_LOWEST     (0)        /* Lowest possible entry
                                                      priority in a group. */

/* Macros for Replace L2 Field Actions */
#define BCM_FIELD_REPLACE_VLAN_PRIORITY     0          /* Replace vlan priority
                                                          with user provided
                                                          Priority without CFI
                                                          bit being set. User
                                                          provides Vlan priority
                                                          value (0-7) as an
                                                          input through param1
                                                          and CFI (bit being
                                                          unset) bit is appended
                                                          internally by FP
                                                          action handler. */
#define BCM_FIELD_REPLACE_VLAN_PRIORITY_USE_INTERNAL_CFI 1          /* Replace vlan priority
                                                          with user provided
                                                          priority with CFI bit
                                                          set. User provides
                                                          Vlan priority value
                                                          (0-7) as an input
                                                          through param1 and CFI
                                                          bit ((bit being set) 
                                                          is appended internally
                                                          by FP action handler. */
#define BCM_FIELD_REPLACE_VLAN_PRIORITY_FROM_INT_PRIO_AND_CNG 2          /* Replace Vlan priority
                                                          mapped from internal
                                                          priority and CNG
                                                          derived for a packet.
                                                          Param1 is not
                                                          applicable to this
                                                          type. */

#define BCM_FIELD_ENTRY_PRIO_DEFAULT    BCM_FIELD_ENTRY_PRIO_LOWEST /* Default priority assigned
                                                      to new entries */

#define BCM_FIELD_MAX_NAME_LEN  100        /* Maximum length for a name */

#define BCM_FIELD_EXTRACTION_FLAG_CONSTANT  (0x00000001) /* Indicates constant
                                                          value will be used
                                                          instead of qualifier
                                                          extraction */
#define BCM_FIELD_EXTRACTION_FLAG_DATA_FIELD (0x00000002) /* Indicates qualifier
                                                          specified is data
                                                          field ID instead of
                                                          bcmFieldQualify* */

#define BCM_FIELD_ENTRY_INVALID (-1)       /* Indicates invalid and/or free
                                              entry */

/* Macros for field entry copy */
#define BCM_FIELD_ENTRY_COPY_WITHOUT_STATS  (1 << 0)   /* Avoid copying stats
                                                          during entry copy */

/* Macros for field contol bcmFieldControlGbpSrcMacMcastBitSet */
#define BCM_FIELD_GBP_SRC_ID_NEQ_DST_ID (0x0)      /* Applies this control only
                                                      when GBP Source ID not
                                                      equals to GBP Destination
                                                      ID (GBP_SID!=GBP_DID) */
#define BCM_FIELD_GBP_SRC_ID_EQ_DST_ID  (0x1)      /* Applies this control only
                                                      when GBP Source ID equals
                                                      to GBP Destination ID
                                                      (GBP_SID==GBP_DID) */

/* Macros for field stage slice info retrieval */
#define BCM_FIELD_SLICE_ALLOCATED           (1 << 0)   /* Specify whether the
                                                          slice is allocated to
                                                          any group 0 if not
                                                          allocated. 1 if
                                                          allocated */
#define BCM_FIELD_SLICE_MODE_SINGLE         (1 << 1)   /* Slice mode is single
                                                          wide */
#define BCM_FIELD_SLICE_MODE_DOUBLE         (1 << 2)   /* Slice mode is double
                                                          wide */
#define BCM_FIELD_SLICE_MODE_TRIPLE         (1 << 3)   /* Slice mode is triple
                                                          wide */
#define BCM_FIELD_SLICE_MODE_INTRADOUBLE    (1 << 4)   /* Slice mode is intra
                                                          slice double wide */
#define BCM_FIELD_SLICE_PART_PRIMARY        (1 << 5)   /* Slice is the primary
                                                          part */
#define BCM_FIELD_SLICE_PART_SECONDARY      (1 << 6)   /* Slice is the secondary
                                                          part */
#define BCM_FIELD_SLICE_PART_TERTIARY       (1 << 7)   /* Slice is the tertiary
                                                          part */
#define BCM_FIELD_SLICE_PART_PRIMARY_EXPANDED (1 << 8)   /* Slice is auto expanded
                                                          primary part */
#define BCM_FIELD_SLICE_PART_SECONDARY_EXPANDED (1 << 9)   /* Slice is auto expanded
                                                          secondary part */
#define BCM_FIELD_SLICE_PART_TERTIARY_EXPANDED (1 << 10)  /* Slice is auto expanded
                                                          tertiary part */
#define BCM_FIELD_SLICE_PART_INTRADOUBLE_EXPANDED (1 << 11)  /* Slice is auto expanded
                                                          intra slice double
                                                          wide part */
#define BCM_FIELD_SLICE_MW_SUPPORTED        (1 << 12)  /* Slice supports multi
                                                          wide groups */
#define BCM_FIELD_MAX_GROUPS_PER_SLICE      32         /* Maximum number of
                                                          groups allowed in a
                                                          slice */
#define BCM_FIELD_STAGE_MAX_SLICES          18         /* Maximum number of
                                                          slices per stage */

/* This structure holds details of entries in a slice */
typedef struct bcm_field_stage_slice_info_s {
    int total_entries;                  /* Total number of entries available in
                                           given slice */
    int free_entries;                   /* Total number of free entries
                                           available in given slice */
    int flags;                          /* Flags to identify the properties of
                                           slice */
    int slice_gid_ct;                   /* Number of groups sharing the given
                                           slice */
    bcm_field_group_t slice_gid_list[BCM_FIELD_MAX_GROUPS_PER_SLICE]; /* The groupIds associated with the
                                           slice */
} bcm_field_stage_slice_info_t;

/* bcm_field_stat_action_e */
typedef enum bcm_field_stat_action_e {
    bcmFieldStatActionNone = 0,         /* No Operation. */
    bcmFieldStatActionIncrement = 1,    /* Increment the stat. */
    bcmFieldStatActionIncrementCancel = 2, /* Do not increment the stat. */
    bcmFieldStatActionSample = 3,       /* Sample the stat value to the packet. */
    bcmFieldStatActionCount = 4         /* Always Last. Not a usable value. */
} bcm_field_stat_action_t;

#define BCM_FIELD_STAT_ACTION \
{ \
    "None", \
    "Increment", \
    "IncrementCancel", \
    "Sample"  \
}

/* Oam Stat Action Structure. */
typedef struct bcm_field_oam_stat_action_s {
    bcm_stat_object_t stat_object;  /* Flex Stat Object */
    uint32 stat_mode_id;            /* Flex Stat Mode */
    bcm_field_stat_action_t action; /* Field Stat Action */
} bcm_field_oam_stat_action_t;

/* Packet content (data) qualification object flags. */
#define BCM_FIELD_DATA_QUALIFIER_WITH_ID    (1 << 0)   
#define BCM_FIELD_DATA_QUALIFIER_REPLACE    (1 << 1)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_IP4_OPTIONS_ADJUST (1 << 2)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_IP6_EXTENSIONS_ADJUST (1 << 3)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_GRE_OPTIONS_ADJUST (1 << 4)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_NEGATIVE (1 << 5)   /* The 'offset' field is
                                                          interpretated as
                                                          negative */
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_BIT_RES (1 << 6)   /* The 'offset' field is
                                                          computed with a bit
                                                          resolution */
#define BCM_FIELD_DATA_QUALIFIER_LENGTH_BIT_RES (1 << 7)   /* The 'length' field is
                                                          computed with a bit
                                                          resolution */
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_PREDEFINED (1 << 8)   /* The 'qualifier' field
                                                          is used instead of
                                                          'offset_base' */
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_FLEX_HASH (1 << 9)   /* The 'qualifier' field
                                                          is used to create flex
                                                          hash entry' */
#define BCM_FIELD_DATA_QUALIFIER_STAGE_LOOKUP (1 << 10)  /* The 'qualifier' field
                                                          is used to create for
                                                          Lookup Stage */
#define BCM_FIELD_DATA_QUALIFIER_TYPE_L2    (1 << 11)  /* The 'qualifier' type
                                                          will be L2 */
#define BCM_FIELD_DATA_QUALIFIER_TYPE_IPV4  (1 << 12)  /* The 'qualifier' type
                                                          will be ipv4 */
#define BCM_FIELD_DATA_QUALIFIER_TYPE_IPV6  (1 << 13)  /* The 'qualifier' type
                                                          will be ipv6 */
#define BCM_FIELD_DATA_QUALIFIER_TYPE_MPLS  (1 << 14)  /* The 'qualifier' type
                                                          will be mpls */
#define BCM_FIELD_DATA_QUALIFIER_BIT_OFFSET_DNX_ORDER (1 << 15)  /* Control the qualifier
                                                          bit numbering */

/* Packet content (data) qualification vlan tag format. */
#define BCM_FIELD_DATA_FORMAT_VLAN_TAG_ANY  (0xffff)   
#define BCM_FIELD_DATA_FORMAT_VLAN_NO_TAG   (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_VLAN_SINGLE_TAGGED (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_VLAN_DOUBLE_TAGGED (1 << 2)   

/* Packet content (data) qualification L2 header format. */
#define BCM_FIELD_DATA_FORMAT_L2_ANY    (0xffff)   
#define BCM_FIELD_DATA_FORMAT_L2_ETH_II (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_L2_SNAP   (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_L2_LLC    (1 << 2)   

/* Packet content (data) qualification L3 header version. */
#define BCM_FIELD_DATA_FORMAT_IP_ANY        (0xffff)   
#define BCM_FIELD_DATA_FORMAT_IP_NONE       (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_IP4           (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_IP6           (1 << 2)   
#define BCM_FIELD_DATA_FORMAT_IP4_WITH_OPTIONS (1 << 3)   
#define BCM_FIELD_DATA_FORMAT_IP6_WITH_OPTIONS (1 << 4)   

/* Packet content (data) qualification Mpls encapsulation. */
#define BCM_FIELD_DATA_FORMAT_MPLS_ANY      (0xffff)   
#define BCM_FIELD_DATA_FORMAT_MPLS_ONE_LABEL (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_MPLS_TWO_LABELS (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_MPLS_THREE_LABELS (1 << 2)   
#define BCM_FIELD_DATA_FORMAT_MPLS_FOUR_LABELS (1 << 3)   
#define BCM_FIELD_DATA_FORMAT_MPLS_FIVE_LABELS (1 << 4)   

/* Packet content (data) qualification FCoE encapsulation. */
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN_ANY (0xffff)   
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN    (1 << 0)   /* Standard fibre-channel
                                                          header */
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN_ENCAP (1 << 1)   /* Encapsulation header */
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN_VIRTUAL (1 << 2)   /* Virtual fabric tag
                                                          (VFT) header */
#define BCM_FIELD_DATA_FORMAT_FIBRE_CHAN_ROUTED (1 << 3)   /* Interfabric routing
                                                          (IFR) header */

/* Packet content (data) qualification Tunnel. */
#define BCM_FIELD_DATA_FORMAT_TUNNEL_ANY    (0xffff)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_NONE   (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_IP_IN_IP (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_GRE    (1 << 2)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_MPLS   (1 << 3)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_FCOE   (1 << 4)   /* Fibre Channel over
                                                          Ethernet (FCoE),
                                                          EtherType 0x8906 */
#define BCM_FIELD_DATA_FORMAT_TUNNEL_FCOE_INIT (1 << 5)   /* FCoE initialization
                                                          protocol (FIP),
                                                          EtherType 0x8914 */

/* Packet content (data) qualification Flags. */
#define BCM_FIELD_DATA_FORMAT_F_MASK        (0x3ff)    
#define BCM_FIELD_DATA_FORMAT_F_ENCAP_STACK (1 << 0)   /* Indicates incoming
                                                          packet is a HiGig
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_ENCAP_STACK (1 << 1)   /* Indicates incoming
                                                          packet is not a HiGig
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_VNTAG       (1 << 2)   /* Indicates incoming
                                                          packet is a VNTAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_VNTAG    (1 << 3)   /* Indicates incoming
                                                          packet is not a VNTAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_CNTAG       (1 << 4)   /* Indicates incoming
                                                          packet is a CNTAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_CNTAG    (1 << 5)   /* Indicates incoming
                                                          packet is not a CNTAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_ETAG        (1 << 6)   /* Indicates incoming
                                                          packet is a ETAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_ETAG     (1 << 7)   /* Indicates incoming
                                                          packet is not a ETAG
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_ICNM        (1 << 8)   /* Indicates incoming
                                                          packet is a ICNM
                                                          Packet */
#define BCM_FIELD_DATA_FORMAT_F_NO_ICNM     (1 << 9)   /* Indicates incoming
                                                          packet is not a ICNM
                                                          Packet */

/* bcm_field_data_offset_base_e */
typedef enum bcm_field_data_offset_base_e {
    bcmFieldDataOffsetBasePacketStart = 0, /* Offset provided from the beginning of
                                           a packet. */
    bcmFieldDataOffsetBaseOuterL3Header = 1, /* Offset provided from the beginning of
                                           outer L3 header. */
    bcmFieldDataOffsetBaseInnerL3Header = 2, /* Offset provided from the beginning of
                                           inner L3 header. */
    bcmFieldDataOffsetBaseOuterL4Header = 3, /* Offset provided from the beginning of
                                           outer L4 header.. */
    bcmFieldDataOffsetBaseInnerL4Header = 4, /* Offset provided from the beginning of
                                           inner L4 header. */
    bcmFieldDataOffsetBaseHigigHeader = 5, /* Offset provided from the beginning of
                                           HiGig header. */
    bcmFieldDataOffsetBaseHigig2Header = 6, /* Offset provided from the beginning of
                                           HiGig header. */
    bcmFieldDataOffsetBaseFcoeHeader = 7, /* Offset provided from the beginning of
                                           FCoE header. */
    bcmFieldDataOffsetBaseDeprecated8 = 8, /* Deprecated 8. */
    bcmFieldDataOffsetBaseL2Header = 9, /* Ethernet header. */
    bcmFieldDataOffsetBaseFirstHeader = 10, /* First header after Ethernet. */
    bcmFieldDataOffsetBaseSecondHeader = 11, /* Second header after Ethernet. */
    bcmFieldDataOffsetBaseThirdHeader = 12, /* Third header after Ethernet. */
    bcmFieldDataOffsetBaseMplsLabel1Header = 13, /* Offset provided from the beginning of
                                           the Mpls Label 1 header. */
    bcmFieldDataOffsetBaseMplsLabel2Header = 14, /* Offset provided from the beginning of
                                           the Mpls Label 2 header. */
    bcmFieldDataOffsetBaseMplsLabel3Header = 15, /* Offset provided from the beginning of
                                           the Mpls Label 3 header. */
    bcmFieldDataOffsetBaseInnerL2Header = 16, /* Offset provided from the beginning of
                                           inner L2 header. */
    bcmFieldDataOffsetBaseTrillHeader = 17, /* Offset provided from the beginning of
                                           Trill header. */
    bcmFieldDataOffsetBaseFourthHeader = 18, /* Fourth header after Ethernet. */
    bcmFieldDataOffsetBaseForwardingHeader = 19, /* Header used for the forwarding. */
    bcmFieldDataOffsetBaseNextForwardingHeader = 20, /* First header after the forwarding
                                           header. */
    bcmFieldDataOffsetBaseTrillPayload = 21, /* Offset provided from the beginning of
                                           Trill Payload. */
    bcmFieldDataOffsetBaseCount = 22    /* Always Last. Not a usable value. */
} bcm_field_data_offset_base_t;

#define BCM_FIELD_DATA_OFFSET_BASE \
{ \
    "bcmFieldDataOffsetBasePacketStart", \
    "bcmFieldDataOffsetBaseOuterL3Header", \
    "bcmFieldDataOffsetBaseInnerL3Header", \
    "bcmFieldDataOffsetBaseOuterL4Header", \
    "bcmFieldDataOffsetBaseInnerL4Header", \
    "bcmFieldDataOffsetBaseHigigHeader", \
    "bcmFieldDataOffsetBaseHigig2Header", \
    "bcmFieldDataOffsetBaseFcoeHeader", \
    "bcmFieldDataOffsetBaseDeprecated8", \
    "bcmFieldDataOffsetBaseL2Header", \
    "bcmFieldDataOffsetBaseFirstHeader", \
    "bcmFieldDataOffsetBaseSecondHeader", \
    "bcmFieldDataOffsetBaseThirdHeader", \
    "bcmFieldDataOffsetBaseMplsLabel1Header", \
    "bcmFieldDataOffsetBaseMplsLabel2Header", \
    "bcmFieldDataOffsetBaseMplsLabel3Header", \
    "bcmFieldDataOffsetBaseInnerL2Header", \
    "bcmFieldDataOffsetBaseTrillHeader", \
    "bcmFieldDataOffsetBaseFourthHeader", \
    "bcmFieldDataOffsetBaseForwardingHeader", \
    "bcmFieldDataOffsetBaseNextForwardingHeader", \
    "bcmFieldDataOffsetBaseTrillPayload"  \
}

/* EtherType based DATA packet qualifier structure. */
typedef struct bcm_field_data_ethertype_s {
    int relative_offset;            /* Packet byte offset relative to qualifier
                                       byte offset. */
    bcm_port_ethertype_t ethertype; /* Ether type. */
    uint16 l2;                      /* Packet l2 format.
                                       (FIELD_DATA_FORMAT_L2_XXX) */
    uint16 vlan_tag;                /* vlan_tag_format.
                                       (FIELD_DATA_FORMAT_VLAN_XXX) */
    uint32 flags;                   /* Flags. (FIELD_DATA_FORMAT_F_XXX) */
} bcm_field_data_ethertype_t;

/* Ip protocol/Next header based DATA packet qualifier structure. */
typedef struct bcm_field_data_ip_protocol_s {
    int relative_offset;    /* Packet byte offset relative to qualifier byte
                               offset. */
    uint16 flags;           /* Packet ip header version.
                               (FIELD_DATA_FORMAT_IP_XXX) */
    uint8 ip;               /* Ip protocol id. */
    uint16 l2;              /* Packet l2 format. (FIELD_DATA_FORMAT_L2_XXX) */
    uint16 vlan_tag;        /* vlan_tag_format. (FIELD_DATA_FORMAT_VLAN_XXX) */
} bcm_field_data_ip_protocol_t;

/* Packet format based DATA qualifier specification structure. */
typedef struct bcm_field_data_packet_format_s {
    int relative_offset;        /* Packet byte offset relative to qualifier byte
                                   offset. */
    uint16 l2;                  /* Packet l2 format. (FIELD_DATA_FORMAT_L2_XXX) */
    uint16 vlan_tag;            /* vlan_tag_format. (FIELD_DATA_FORMAT_VLAN_XXX) */
    uint16 outer_ip;            /* Outer IP header
                                   version.(FIELD_DATA_FORMAT_IP_XXX) */
    uint16 inner_ip;            /* Inner IP header
                                   version.(FIELD_DATA_FORMAT_IP_XXX) */
    uint16 tunnel;              /* Tunnel.(FIELD_DATA_FORMAT_TUNNEL_XXX) */
    uint16 mpls;                /* Mpls labels.(FIELD_DATA_FORMAT_MPLS_XXX) */
    uint16 fibre_chan_outer;    /* Header
                                   type.(FIELD_DATA_FORMAT_FIBRE_CHAN_XXX) */
    uint16 fibre_chan_inner;    /* Header
                                   type.(FIELD_DATA_FORMAT_FIBRE_CHAN_XXX) */
    uint32 flags;               /* Flags. (FIELD_DATA_FORMAT_F_XXX) */
} bcm_field_data_packet_format_t;

/* Packet colors. */
#define BCM_FIELD_COLOR_PRESERVE    0          
#define BCM_FIELD_COLOR_GREEN       1          
#define BCM_FIELD_COLOR_YELLOW      2          
#define BCM_FIELD_COLOR_RED         3          
#define BCM_FIELD_COLOR_BLACK       4          

/* IPv4 Flags from RFC-791 (for bcm_field_qualify_IpFlags). */
#define BCM_FIELD_IPFLAGS_MF    0x1        /* More Fragments. */
#define BCM_FIELD_IPFLAGS_DF    0x2        /* Don't Fragment. */
#define BCM_FIELD_IPFLAGS_RF    0x4        /* Reserved. */
#define BCM_FIELD_IPFLAGS_MASK  0x7        /* All bits. */

/* TCP Control Flags from RFC-793 (for bcm_field_qualify_TcpControl). */
#define BCM_FIELD_TCPCONTROL_FIN    0x01       /* No more data. */
#define BCM_FIELD_TCPCONTROL_SYN    0x02       /* Sync seq numbers. */
#define BCM_FIELD_TCPCONTROL_RST    0x04       /* Reset connection. */
#define BCM_FIELD_TCPCONTROL_PSH    0x08       /* Push. */
#define BCM_FIELD_TCPCONTROL_ACK    0x10       /* Ack field valid. */
#define BCM_FIELD_TCPCONTROL_URG    0x20       /* Urgent field valid. */
#define BCM_FIELD_TCPCONTROL_R40    0x40       /* Reserved. */
#define BCM_FIELD_TCPCONTROL_R80    0x80       /* Reserved. */
#define BCM_FIELD_TCPCONTROL_MASK   0x3f       /* All non-reserved bits. */

/* L2Mac Info (for bcm_field_qualify_L2MacInfo). */
#define BCM_FIELD_L2MAC_DMAC_MATCH_DIP  0x0001     /* Lower 32b of dmac matches
                                                      lower 32b of Ipv6 DIP or
                                                      lower 23b of dmac matches
                                                      lower 23b of Ipv4 DIP. */
#define BCM_FIELD_L2MAC_SMAC_LT_DMAC    0x0002     /* Source mac address is less
                                                      than destination mac
                                                      address. */
#define BCM_FIELD_L2MAC_SMAC_EQ_DMAC    0x0004     /* Source mac address is same
                                                      as destination mac
                                                      address. */
#define BCM_FIELD_L2MAC_BCAST_DMAC      0x0008     /* Destination mac address is
                                                      broadcast. */
#define BCM_FIELD_L2MAC_MCAST_DMAC      0x0010     /* Destination mac address is
                                                      multicast. */
#define BCM_FIELD_L2MAC_IPMCAST_DMAC    0x0020     /* Destination mac address is
                                                      IP mutlicast, set when
                                                      upper 25 bits dmac matches
                                                      0x01005e for Ipv4 or upper
                                                      16b of dmac matches 0x3333
                                                      for Ipv6 */
#define BCM_FIELD_L2MAC_ZERO_SMAC       0x0040     /* Source mac address is
                                                      zero. */
#define BCM_FIELD_L2MAC_MCAST_SMAC      0x0080     /* Source mac address is
                                                      multicast. */

/* IP Info (for bcm_field_qualify_IpInfo). */
#define BCM_FIELD_IP_HDR_OFFSET_ZERO        0x0001     
#define BCM_FIELD_IP_HDR_FLAGS_MF           0x0002     
#define BCM_FIELD_IP_CHECKSUM_OK            0x0004     
#define BCM_FIELD_IP_VERSION_ERR            0x0008     /* Error in the IP
                                                          'version' field value */
#define BCM_FIELD_IP_HDR_SIP_LT_DIP         0x0010     /* Source Ip address is
                                                          less than destination
                                                          Ip address. */
#define BCM_FIELD_IP_HDR_SIP_EQ_IP          0x0020     /* Source Ip address is
                                                          equal to destination
                                                          Ip address. */
#define BCM_FIELD_IP_HDR_BCAST_DIP          0x0040     /* Destination Ip address
                                                          is broadcast. */
#define BCM_FIELD_IP_HDR_MCAST_SIP          0x0080     /* Source Ip address is
                                                          multicast. */
#define BCM_FIELD_IP_HDR_RESERVED_MCAST_DIP 0x0100     /* Destination Ip address
                                                          is reserved multicast. */
#define BCM_FIELD_IP_HDR_BFD_LOOPBACK_DIP   0x0200     /* Destionation Ip
                                                          address is BFD
                                                          loopback. */
#define BCM_FIELD_IP_HDR_OFFSET_ONE         0x0400     /*  */
#define BCM_FIELD_IP_ERROR_DIP              0x0800     /* Destination IP address
                                                          have error. */
#define BCM_FIELD_IP_ERROR_SIP              0x1000     /* Source Ip address have
                                                          error. */
#define BCM_FIELD_IP_SPECIAL_DIP            0x2000     /* Destination Ip address
                                                          is special */
#define BCM_FIELD_IP_SMALL_PKT              0x4000     /* Ip packet is small. */
#define BCM_FIELD_IP_BIG_PKT                0x8000     /* IP packet is big. */
#define BCM_FIELD_IP_VERSION_V4             0x010000   /* IP packet is v4. */
#define BCM_FIELD_IP_VERSION_V6             0x020000   /* IP packet is v6. */

/* L4 Header Info (for bcm_field_qualify_L4Info). */
#define BCM_FIELD_L4_HDR_SRCPORT_LT_1024    0x0001     /* L4 Source Port is less
                                                          than 1024. */
#define BCM_FIELD_L4_HDR_SRCPORT_EQ_DSTPORT 0x0002     /* L4 source port is
                                                          equal to destination
                                                          port number. */
#define BCM_FIELD_L4_TCP_SEQUENCE_ZERO      0x0004     /* TCP Sequence is zeo. */

/* L2 learn commands (for bcm_field_qualify_L2LearnCommands). */
#define BCM_FIELD_L2_LEARN_COMMANDS_DO_NOT_LEARN 0x0001     /* Do not learn L2 MACSA */
#define BCM_FIELD_L2_LEARN_COMMANDS_LEARN_MACSA 0x0002     /* L2 MACSA is learnt. */
#define BCM_FIELD_L2_LEARN_COMMANDS_RELEARN_MACSA 0x0004     /* L2 MACSA is relearnt. */
#define BCM_FIELD_L2_LEARN_COMMANDS_UNRESOLVED_MACSA 0x0008     /* L2 MACSA is
                                                          unresolved. */

/* Tunnel termination status (for bcm_field_qualify_TunnelTermStatus). */
#define BCM_FIELD_TUNNEL_TERM               0x0001     /* Tunnel terminated
                                                          packet. */
#define BCM_FIELD_TUNNEL_TERM_L3            0x0002     /* L3 Tunnel terminated. */
#define BCM_FIELD_TUNNEL_TERM_L2            0x0004     /* L2 Tunnel terminated. */
#define BCM_FIELD_TUNNEL_TERM_TRIGGER_SECOND_PASS 0x0008     /* Tunnel termination
                                                          trigger for second
                                                          pass. */

/* Loopback Header Flags (for bcm_field_qualify_LoopbackHdrFlags). */
#define BCM_FIELD_LOOPBACK_VISIBILITY_PKT   0x0001     /* Loopback packet is a
                                                          visibility packet. */
#define BCM_FIELD_LOOPBACK_ROUTED_PKT       0x0002     /* Loopback packet is a
                                                          routed packet. */

/* Packet Status (for bcm_field_qualify_PacketStatus). */
#define BCM_FIELD_PKT_STATUS_MCASTKNOWN     0x0001     /* Known multicast
                                                          packet. */
#define BCM_FIELD_PKT_STATUS_MCASTUNKNOWN   0x0002     /* Unknown multicast
                                                          packet. */
#define BCM_FIELD_PKT_STATUS_UCASTUNKNOWN   0x0004     /* Unknown unicast
                                                          packet. */
#define BCM_FIELD_PKT_STATUS_BCAST          0x0008     /* Broadcast packet. */

/* Packet Forwarding Status (for bcm_field_qualify_ForwardingStatus). */
#define BCM_FIELD_FORWARDING_STATUS_L2_SWITCHED 0x0001     /* L2 switched packet. */
#define BCM_FIELD_FORWARDING_STATUS_L3_UNICAST_ROUTED 0x0002     /* L3 unicast routed
                                                          packet. */
#define BCM_FIELD_FORWARDING_STATUS_IPMC_ROUTED 0x0004     /* IPMC forwarded packet. */

/* Packet Forwarding Status (for bcm_field_qualify_ForwardingEligible). */
#define BCM_FIELD_FORWARDING_ELIGIBLE_L3_UNICAST_ROUTE 0x0001     /* Packet is eligible for
                                                          L3 unitcast flow. */
#define BCM_FIELD_FORWARDING_ELIGIBLE_IPMC_ROUTE 0x0002     /* Packet is eligible for
                                                          IPMC flow. */
#define BCM_FIELD_FORWARDING_ELIGIBLE_L2_SWITCH 0x0004     /* Packet is eligible for
                                                          L2 switching. */
#define BCM_FIELD_FORWARDING_ELIGIBLE_IPMC_FALLBACK_TO_L2_SWITCH 0x0008     /* Packet eligible for
                                                          ipmc flow fallen back
                                                          to l2 switching. */

/* Packet L3 check(for bcm_field_qualify_L3Check). */
#define BCM_FIELD_L3_CHECK_GOOD_L3_UNICAST_ROUTE_PKT 0x0001     /* Packet is eligible for
                                                          L3 unicast routing as
                                                          there is no IP header
                                                          or TTL error. */
#define BCM_FIELD_L3_CHECK_GOOD_IPMC_PKT    0x0002     /* Packet is eligible for
                                                          ipmc routing as there
                                                          is no IP header error. */
#define BCM_FIELD_L3_CHECK_PIM_FAIL         0x0004     /* PIMSIM packet
                                                          interface check failed */

/* Mirror Packet Type (for bcm_field_qualify_MirrorPktType). */
#define BCM_FIELD_MIRROR_PKT_TYPE_INGRESS   0x0001     /* Ingress mirror packet. */
#define BCM_FIELD_MIRROR_PKT_TYPE_COPY      0x0002     /* Mirror copy. */
#define BCM_FIELD_MIRROR_PKT_TYPE_COPY_TRUNCATE 0x0004     /* Mirror copy truncate
                                                          enable. */

/* PTP packet control (for bcm_field_qualify_PtpPktCtrl). */
#define BCM_FIELD_PTP_MATCH_ETHERTYPE_OR_UDP_DEST_PORT 0x0001     /* 1588 packet matching
                                                          either EtherType or
                                                          udp dest port. */
#define BCM_FIELD_PTP_MATCH_UDP_DEST_PORT   0x0002     /* 1588 packet matching
                                                          UDP dest port. */

/* 
 * Field Qualifier VlanFormat (for bcm_field_qualify_VlanFormat).
 * Used to qualify packets based on vlan tag format.
 */
#define BCM_FIELD_VLAN_FORMAT_UNTAGGED      0x0        /* Untagged packet
                                                          present. */
#define BCM_FIELD_VLAN_FORMAT_OUTER_TAGGED  0x1        /* Outer tag present. */
#define BCM_FIELD_VLAN_FORMAT_INNER_TAGGED  0x2        /* Inner tag present. */
#define BCM_FIELD_VLAN_FORMAT_OUTER_TAGGED_VID_ZERO 0x4        /* Outer tag present and
                                                          vlan id is zero. */
#define BCM_FIELD_VLAN_FORMAT_INNER_TAGGED_VID_ZERO 0x8        /* Inner tag present and
                                                          vlan id is zero. */

/* Packet Resolution Values (for bcm_field_qualify_PacketRes). */
#define BCM_FIELD_PKT_RES_UNKNOWN           0x0        /* No resolution. */
#define BCM_FIELD_PKT_RES_CONTROL           0x1        /* Ethernet control
                                                          (8808). */
#define BCM_FIELD_PKT_RES_BPDU              0x2        /* L2 cache BPDU bit. */
#define BCM_FIELD_PKT_RES_L2BC              0x3        /* L2 broadcast. */
#define BCM_FIELD_PKT_RES_L2UC              0x4        /* L2 unicast. */
#define BCM_FIELD_PKT_RES_L2UNKNOWN         0x5        /* Unknown L2 dest (DLF). */
#define BCM_FIELD_PKT_RES_L3MCUNKNOWN       0x6        /* Unknown L3 multicast. */
#define BCM_FIELD_PKT_RES_L3MCKNOWN         0x7        /* Known L3 multicast. */
#define BCM_FIELD_PKT_RES_L2MCKNOWN         0x8        /* Known L2 multicast. */
#define BCM_FIELD_PKT_RES_L2MCUNKNOWN       0x9        /* Unknown L2 multicast. */
#define BCM_FIELD_PKT_RES_L3UCKNOWN         0xa        /* Known L3 unicast. */
#define BCM_FIELD_PKT_RES_L3UCUNKNOWN       0xb        /* Unknown L3 unicast. */
#define BCM_FIELD_PKT_RES_MPLSKNOWN         0xc        /* Known MPLS packet   . */
#define BCM_FIELD_PKT_RES_MPLSL3KNOWN       0xd        /* Known MPLS L3 packet. */
#define BCM_FIELD_PKT_RES_MPLSL2KNOWN       0xe        /* Known MPLS L2 packet. */
#define BCM_FIELD_PKT_RES_MPLSUNKNOWN       0xf        /* Unknown MPLS packet . */
#define BCM_FIELD_PKT_RES_MIMKNOWN          0x10       /* Known MIM packet. */
#define BCM_FIELD_PKT_RES_MIMUNKNOWN        0x11       /* Unknown MIM packet . */
#define BCM_FIELD_PKT_RES_TRILLKNOWN        0x12       /* Known TRILL packet */
#define BCM_FIELD_PKT_RES_TRILLUNKNOWN      0x13       /* Unknown TRILL packet */
#define BCM_FIELD_PKT_RES_NIVKNOWN          0x14       /* Known NIV packet */
#define BCM_FIELD_PKT_RES_NIVUNKNOWN        0x15       /* Unknown NIV packet */
#define BCM_FIELD_PKT_RES_OAM               0x16       /* Packet hit OAM CFM
                                                          LMEP */
#define BCM_FIELD_PKT_RES_BFD               0x17       /* Packet hit BFD session */
#define BCM_FIELD_PKT_RES_ICNM              0x18       /* Congestion
                                                          notification */
#define BCM_FIELD_PKT_RES_IEEE1588          0x19       /* IEEE 1588 packet */
#define BCM_FIELD_PKT_RES_L2GREKNOWN        0x1a       /* Known L2 GRE packet */
#define BCM_FIELD_PKT_RES_VXLANKNOWN        0x1b       /* Known VxLan Packet */
#define BCM_FIELD_PKT_RES_FCOEKNOWN         0x1c       /* Known FCoE Packet */
#define BCM_FIELD_PKT_RES_FCOEUNKNOWN       0x1d       /* Unknown FCoE Packet */
#define BCM_FIELD_PKT_RES_MPLSMCKNOWN       0x1e       /* Known MPLS Multicast
                                                          packet */
#define BCM_FIELD_PKT_RES_PIMBIDIRUNKNOWN   0x1f       /* Unknown PIM-BIDIR
                                                          packet from DF */
#define BCM_FIELD_PKT_RES_L2_ANY            0x20       /* To match any L2
                                                          packet. It combines
                                                          the resolution types
                                                          BCM_FIELD_PKT_RES_L2BC,
                                                          BCM_FIELD_PKT_RES_L2UC,
                                                          BCM_FIELD_PKT_RES_L2UNKNOWN,
                                                          BCM_FIELD_PKT_RES_L2MCKNOWN
                                                          and
                                                          BCM_FIELD_PKT_RES_L2MCUNKNOWN */
#define BCM_FIELD_PKT_RES_L2MC_ANY          0x21       /* To match any L2 MC
                                                          packet. This options
                                                          is to combine the
                                                          resolution types
                                                          BCM_FIELD_PKT_RES_L2MCKNOW
                                                          and
                                                          BCM_FIELD_PKT_RES_L2MCUNKNOWN */
#define BCM_FIELD_PKT_RES_TRILL_ANY         0x22       /* To match any Trill
                                                          packet. This option is
                                                          to combine the
                                                          resolution types
                                                          BCM_FIELD_PKT_RES_TRILLKNOWN
                                                          and
                                                          BCM_FIELD_PKT_RES_TRILLUNKNOWN */
#define BCM_FIELD_PKT_RES_NIV_ANY           0x23       /* To match any NIV
                                                          packet. This option is
                                                          to combine resolution
                                                          types
                                                          BCM_FIELD_PKT_RES_NIVKNOWN
                                                          and
                                                          BCM_FIELD_PKT_RES_NIVUNKNOWN */
#define BCM_FIELD_PKT_RES_MPLS_ANY          0x24       /* To match any FCOE
                                                          packet. This option is
                                                          to combine resolution
                                                          types
                                                          BCM_FIELD_PKT_RES_MPLSKNOWN,
                                                          BCM_FIELD_PKT_RES_MPLSL3KNOWN,
                                                          BCM_FIELD_PKT_RES_MPLSL2KNOWN,
                                                          BCM_FIELD_PKT_RES_MPLSUNKNOWN
                                                          and
                                                          BCM_FIELD_PKT_RES_MPLSMCKNOWN */
#define BCM_FIELD_PKT_RES_MIM_ANY           0x25       /* To match any MIM
                                                          packet. This option is
                                                          to combine resolution
                                                          types
                                                          BCM_FIELD_PKT_RES_MIMKNOWN
                                                          and
                                                          BCM_FIELD_PKT_RES_MIMUNKNOWN */
#define BCM_FIELD_PKT_RES_FCOE_ANY          0x26       /* To match any FCOE
                                                          packet. This option is
                                                          to combine resolution
                                                          types
                                                          BCM_FIELD_PKT_RES_FCOEKNOWN
                                                          and
                                                          BCM_FIELD_PKT_RES_FCOEUNKNOWN */
#define BCM_FIELD_PKT_RES_L3_ANY            0x27       /* To match any L3
                                                          packet. This option is
                                                          to combine resolution
                                                          types
                                                          BCM_FIELD_PKT_RES_L3MCKNOWN,
                                                          BCM_FIELD_PKT_RES_L3MCUNKNOWN,
                                                          BCM_FIELD_PKT_RES_L3KNOWN
                                                          and
                                                          BCM_FIELD_PKT_RES_L3UNKNOWN */
#define BCM_FIELD_PKT_RES_LAST              (BCM_FIELD_PKT_RES_L3_ANY) /* Must be >= highest
                                                          valid
                                                          BCM_FIELD_PKT_RES_* */

/* 
 * Vlan Translation Lookup status values (for
 * bcm_field_qualify_VlanTranslationHit)
 */
#define BCM_FIELD_VXLT_LOOKUP_STATUS_NO_HIT 0x0        /* No Hit */
#define BCM_FIELD_VXLT_LOOKUP_STATUS_HIT    0x1        /* Hit(First or Second
                                                          Hit) */
#define BCM_FIELD_VXLT_LOOKUP_STATUS_FIRST_HIT 0x2        /* First Hit */
#define BCM_FIELD_VXLT_LOOKUP_STATUS_SECOND_HIT 0x4        /* Second Hit */

/* 
 * Mpls Forwarding Label action values (for
 * bcm_field_qualify_MplsForwardingLabelAction)
 */
#define BCM_FIELD_MPLS_FORWARDING_LABEL_ACTION_INVALID 0x0        /* Invalid */
#define BCM_FIELD_MPLS_FORWARDING_LABEL_ACTION_PHP 0x2        /* PHP */
#define BCM_FIELD_MPLS_FORWARDING_LABEL_ACTION_SWAP 0x3        /* SWAP the MPLS label */
#define BCM_FIELD_MPLS_FORWARDING_LABEL_ACTION_POP 0x4        /* POP the MPLS label.
                                                          This action is valid
                                                          for MPLS scenarios
                                                          which supports more
                                                          than 3 label lookups
                                                          through loopback. This
                                                          was added in TR3 which
                                                          supports upto 6 label
                                                          lookup. So 3 labels
                                                          can be POPed in first
                                                          pass and using this
                                                          action encoding in
                                                          IFP, we can catch such
                                                          packets. But for other
                                                          devices which supports
                                                          only 2 or 3 label
                                                          lookups, this encoding
                                                          is not valid. */
#define BCM_FIELD_MPLS_FORWARDING_LABEL_ACTION_POP_USE_L2_VPN 0x5        /* POP the MPLS label and
                                                          use L2 VPN */
#define BCM_FIELD_MPLS_FORWARDING_LABEL_ACTION_POP_USE_L3_VPN 0x6        /* POP the MPLS label and
                                                          use L3 VPN */
#define BCM_FIELD_MPLS_FORWARDING_LABEL_ACTION_POP_USE_ENTROPY 0x7        /* POP the MPLS label and
                                                          use Entropy */

/* Inband telemetry stat action values */
#define BCM_FIELD_INT_DO_NOT_ADD_STATISTICS 0x0        /* Do not add INT
                                                          statistics. */
#define BCM_FIELD_INT_QUEUE_BUFFER          0x1        /* Queue buffer usage
                                                          request. */
#define BCM_FIELD_INT_QUEUE_WATERMARK       0x2        /* Queue watermark
                                                          request. */
#define BCM_FIELD_INT_POOL_BUFFER_AVAILABLE 0x3        /* Buffer available in
                                                          pool request. */
#define BCM_FIELD_INT_MIN_BUFFER_AVAIALBLE  0x4        /* Minimum buffer
                                                          available in pool
                                                          request. */

/* FibreChanZoneCheck values (for bcm_field_qualify_FibreChanZoneCheck) */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_NOT_DONE 0x0        /* Zone Check Did Not
                                                          Take Place */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_ALLOW 0x1        /* Allow + Hit */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_MISS 0x2        /* Miss */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_DENY 0x3        /* Deny + Hit */

/* Module header opcodes (for bcm_field_qualify_MHOpcode). */
#define BCM_FIELD_MHOPCODE_CONTROL          0          
#define BCM_FIELD_MHOPCODE_UNICAST          1          
#define BCM_FIELD_MHOPCODE_BROADCAST_DLF    2          
#define BCM_FIELD_MHOPCODE_MULTICAST        3          
#define BCM_FIELD_MHOPCODE_IPMULTICAST      4          
#define BCM_FIELD_MHOPCODE_L2MULTICAST      5          

/* User-defined field maximums. */
#define BCM_FIELD_USER_MAX_UDF_NUM  1          /* UDF0 or UDF1. */
#define BCM_FIELD_USER_MAX_USER_NUM 3          /* Valid range: 0..3 */
#define BCM_FIELD_USER_NUM_UDFS     277        
#define BCM_FIELD_USER_FIELD_SIZE   4          /* Bytes per user_num. */
#define BCM_FIELD_USER_MAX_LENGTH   (1 << 5)   /* Number of bits. */

/* Meter select parameters. */
#define BCM_FIELD_METER_PEAK        1          
#define BCM_FIELD_METER_COMMITTED   2          

/* Metering modes for bcmFieldActionMeterConfig param0. */
#define BCM_FIELD_METER_MODE_DEFAULT        0x0        
#define BCM_FIELD_METER_MODE_FLOW           0x1        
#define BCM_FIELD_METER_MODE_trTCM_COLOR_BLIND 0x2        
#define BCM_FIELD_METER_MODE_trTCM_COLOR_AWARE 0x3        
#define BCM_FIELD_METER_MODE_srTCM_COLOR_BLIND 0x6        
#define BCM_FIELD_METER_MODE_srTCM_COLOR_AWARE 0x7        

/* Policy options for bcmFieldActionPrioPktNew param1. */
#define BCM_FIELD_SPCP_MARK_MAPPED          0x01       
#define BCM_FIELD_SPCP_MARK_USE_INNER_PCP   0x02       
#define BCM_FIELD_SPCP_MARK_USE_OUTER_PCP   0x04       
#define BCM_FIELD_SPCP_MARK_USE_PORT_DEFAULT 0x08       
#define BCM_FIELD_SPCP_MARK_MASK            0x0f       
#define BCM_FIELD_CPCP_MARK_MAPPED          0x10       
#define BCM_FIELD_CPCP_MARK_USE_INNER_PCP   0x20       
#define BCM_FIELD_CPCP_MARK_USE_OUTER_PCP   0x40       
#define BCM_FIELD_CPCP_MARK_USE_PORT_DEFAULT 0x80       
#define BCM_FIELD_CPCP_MARK_MASK            0xf0       

/* 
 * Policy options for bcmFieldActionInnerVlanNew and
 * bcmFieldActionOuterVlanNew param1.
 */
#define BCM_FIELD_TAG_AS_RECEIVED   0x01       
#define BCM_FIELD_TAG_AS_NORMALIZED 0x02       
#define BCM_FIELD_TAG_COPY          0x04       
#define BCM_FIELD_TAG_REMOVE        0x08       
#define BCM_FIELD_TAG_REPLACE       0x10       

/* 
 * Counter pair modes for bcmFieldActionUpdateCounter
 * 
 * Specifies increment mode for upper (counter_num=1) and lower
 * (counter_num=0) counter in the pair. For example: GREEN_YELLOW would
 * increment the upper counter for green packets and the lower counter
 * for yellow packets.
 * 
 * BCM_FIELD_COUNTER_MODE_BYTES can be ORd with any of the other values
 * to make the counter count bytes instead of packets.
 */
#define BCM_FIELD_COUNTER_MODE_NO_NO        0x0000     
#define BCM_FIELD_COUNTER_MODE_NO_YES       0x0001     
#define BCM_FIELD_COUNTER_MODE_YES_NO       0x0002     
#define BCM_FIELD_COUNTER_MODE_RED_NOTRED   0x0003     
#define BCM_FIELD_COUNTER_MODE_GREEN_NOTGREEN 0x0004     
#define BCM_FIELD_COUNTER_MODE_GREEN_RED    0x0005     
#define BCM_FIELD_COUNTER_MODE_GREEN_YELLOW 0x0006     
#define BCM_FIELD_COUNTER_MODE_RED_YELLOW   0x0007     
#define BCM_FIELD_COUNTER_MODE_BYTES_PACKETS 0x0008     /* Upper counter is
                                                          bytes; lower counter
                                                          is packets */
#define BCM_FIELD_COUNTER_MODE_GREEN        0x0010     
#define BCM_FIELD_COUNTER_MODE_YELLOW       0x0020     
#define BCM_FIELD_COUNTER_MODE_RED          0x0040     
#define BCM_FIELD_COUNTER_MODE_ALL          0x0070     
#define BCM_FIELD_COUNTER_MODE_PACKETS      0x0000     
#define BCM_FIELD_COUNTER_MODE_BYTES        0x0100     
#define BCM_FIELD_COUNTER_MODE_DEFAULT      BCM_FIELD_COUNTER_MODE_NO_YES 

/* Redirect ECMP hash key selection. */
#define BCM_FIELD_MULTIPATH_HASH_DISABLE    0x0        
#define BCM_FIELD_MULTIPATH_HASH_DIP        0x1        
#define BCM_FIELD_MULTIPATH_HASH_SIP        0x2        
#define BCM_FIELD_MULTIPATH_HASH_SIP_DIP    0x3        
#define BCM_FIELD_MULTIPATH_HASH_DST_SRC_L4_DIP_SIP 0x4        
#define BCM_FIELD_MULTIPATH_HASH_SRC_DST_L4_SIP_DIP 0x5        
#define BCM_FIELD_MULTIPATH_HASH_SRC_L4_SIP 0x6        
#define BCM_FIELD_MULTIPATH_HASH_DST_L4_DIP 0x7        

/* Filter types for bcmFieldActionFilters. */
#define BCM_FIELD_FILTER_LAG            0x1        /* LAG Filter overrides the
                                                      rule */
#define BCM_FIELD_FILTER_TAGGED         0x2        /* Tag Framing Filter
                                                      overrides the rule */
#define BCM_FIELD_FILTER_PORT_MASK      0x4        /* Port Mask Filter overrides
                                                      the rule */
#define BCM_FIELD_FILTER_STP            0x8        /* STP Filter overrides the
                                                      rule */
#define BCM_FIELD_FILTER_EAP            0x10       /* EAP Filter overrides the
                                                      rule */
#define BCM_FIELD_FILTER_INGRESS_VLAN   0x20       /* Ingress Vlan Filter
                                                      overrides the rule */
#define BCM_FIELD_FILTER_EGRESS_VLAN    0x40       /* Egress Vlan Filter
                                                      overrides the rule */
#define BCM_FIELD_FILTER_SA             0x80       /* Source address Filter
                                                      overrides the rule */
#define BCM_FIELD_FILTER_SA_DISABLED    0x100      /* Disable SA filtering */
#define BCM_FIELD_FILTER_BYPASS_ALL     0x200      /* Bypass all filtering */
#define BCM_FIELD_FILTER_ALL            0x3ff      

/* Policer use options for bcmFieldActionUsePolicerResult param0. */
#define BCM_FIELD_USE_POLICER_RESULT_INGRESS 0x01       /* Use policer result on
                                                          ingress */
#define BCM_FIELD_USE_POLICER_RESULT_EGRESS 0x02       /* Use policer result on
                                                          egress */

/* 
 * Global policer selection flag.
 * 
 * If policer ID passed to (bcm_field_entry_policer_attach) API
 * corresponds to global meters, below flag can be used to configure
 * highest priority to lookup table policer with respect to the priority
 * of the policers in other tables.
 */
#define BCM_FIELD_POLICER_GLOBAL_METER_USE_STAGE_LOOKUP_ACTION 0x01       /* Use lookup stage
                                                          policer */

/* Flags for bcm_field_qualify_HiGigDoNotFlags. */
#define BCM_FIELD_HIGIG_DONOT_MODIFY    0x1        /* Packet should be sent to
                                                      the destination port
                                                      unmodified. This flag can
                                                      be used only for Egress
                                                      packet modification on
                                                      Virtual Ports and is not
                                                      applicable to Offload
                                                      Engines. */
#define BCM_FIELD_HIGIG_DONOT_LEARN     0x2        /* Do not perform MAC
                                                      learning. */

/* Flags for bcmFieldQualifyHiGigOffloadEngineVxltStatus. */
#define BCM_FIELD_HIGIG_OFFLOAD_ENGINE_VXLT_NOT_ATTEMPTED 0x0        /* VLAN Translation was
                                                          not attempted on this
                                                          packet. */
#define BCM_FIELD_HIGIG_OFFLOAD_ENGINE_VXLT_NOT_DONE 0x1        /* VLAN Translation was
                                                          allowed by the
                                                          redirect rule, but
                                                          there was no
                                                          translation to be done
                                                          i.e. no vxt-related
                                                          packet modifications
                                                          were done */
#define BCM_FIELD_HIGIG_OFFLOAD_ENGINE_VXLT_DONE 0x2        /* VLAN translation was
                                                          allowed by the
                                                          redirect rule, and
                                                          VLAN translation was
                                                          done. */

/* Flags for bcmFieldQualifyHiGigOffloadEngineDeferredFlags. */
#define BCM_FIELD_HIGIG_OFFLOAD_ENGINE_DEFERRED_DROP 0x01       /* Defer Drop Action. */
#define BCM_FIELD_HIGIG_OFFLOAD_ENGINE_DEFERRED_CHANGE_PKT_PRIORITY 0x02       /* Defer Change in Packet
                                                          Priority. */
#define BCM_FIELD_HIGIG_OFFLOAD_ENGINE_DEFERRED_CHANGE_DSCP 0x04       /* Defer Change in DSCP
                                                          value. */

/* Flags for bcmFieldQualifyHiGigLabelType. */
#define BCM_FIELD_HIGIG_LABEL_TYPE_HIGIGPLUS_OVERLAY 0x00       /* Original HiGig+
                                                          Overlay. */
#define BCM_FIELD_HIGIG_LABEL_TYPE_INGRESS_MODPORT 0x01       /* The module ID and port
                                                          number through which
                                                          the packet originally
                                                          entered the system. */
#define BCM_FIELD_HIGIG_LABEL_TYPE_MIRROR_CLASSIFICATION_TAG 0x02       /* An opaque field
                                                          generated by the ACL
                                                          that triggers this
                                                          packet. Can be used to
                                                          assist the MTP in
                                                          packet classification. */
#define BCM_FIELD_HIGIG_LABEL_TYPE_QTAG     0x03       /* QTAG (Used to pass
                                                          QTAG when usage using
                                                          EH is not desirable) */

/* 
 * Flags for bcmFieldQualifyHiGigPreserveFlags and
 * bcmFieldQualifyHiGigVpPreserveFlags.
 */
#define BCM_FIELD_HIGIG_PRESERVE_DSCP   0x1        /* Do not change DSCP of the
                                                      outermost IP header. */
#define BCM_FIELD_HIGIG_PRESERVE_DOT1P  0x2        /* Do not change 802.1p/CFI
                                                      bits of the outermost L2
                                                      header. */

/* Flags for bcmFieldQualifyHiGigMirrorOrSwitchPkt. */
#define BCM_FIELD_HIGIG_MIRROR  0x01       /* Mirror and Switch. */

/* 
 * Flags for
 * bcmFieldQualifyHiGig3Flags/bcmFieldQualifyLoopbackHiGig3Flags.
 */
#define BCM_FIELD_HIGIG3_SWITCH_GENERATED   0x0001     /* HiGig3 packet with
                                                          switch generated flag
                                                          set. */
#define BCM_FIELD_HIGIG3_LAG_FAILOVER       0x0002     /* HiGig3 packet with LAG
                                                          failover flag set. */
#define BCM_FIELD_HIGIG3_DO_NOT_LEARN       0x0004     /* HiGig3 packet with do
                                                          not learn flag set. */

/* 
 * Various header format extension values for qualification /
 * preselection
 */
typedef enum bcm_field_header_format_extension_e {
    bcmFieldHeaderFormatExtensionDontCare = 0, /* Select packets with any header format
                                           extension */
    bcmFieldHeaderFormatExtensionFtmh = 1, /* Select only packets which are FTMH */
    bcmFieldHeaderFormatExtensionIpUdpGtp1 = 2, /* Select only packets which UDP/IP and
                                           GPRS Tunneling Protocol (GTP1) */
    bcmFieldHeaderFormatExtensionIpUdpGtp2 = 3, /* Select only packets which UDP/IP and
                                           GPRS Tunneling Protocol (GTP2) */
    bcmFieldHeaderFormatExtensionFcoe = 4, /* Select only packets which are Fiber
                                           Channel Over Ethernet */
    bcmFieldHeaderFormatExtensionMplsNonL4IPV4IsH3 = 5, /* 'Non_L4' stands for IPV4 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser speculates that,
                                           following MPLS, the next protocol is
                                           IPV4 (on the third header) but not L4 */
    bcmFieldHeaderFormatExtensionMplsNonL4IPV6IsH3 = 6, /* 'Non_L4' stands for IPV6 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser speculates that,
                                           following MPLS, the next protocol is
                                           IPV6 (on the third header) but not L4 */
    bcmFieldHeaderFormatExtensionMplsL4IPV4isH3 = 7, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser speculates that,
                                           following MPLS, the next protocol is
                                           L4 of IPV4 (on the third header) */
    bcmFieldHeaderFormatExtensionMplsL4IPV6isH3 = 8, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser speculates that,
                                           following MPLS, the next protocol is
                                           L4 of IPV6 (on the third header) */
    bcmFieldHeaderFormatExtensionMplsETHisH3 = 9, /* Hit is marked when parser speculates
                                           that, following MPLS, the next
                                           protocol is Ethernet (on the third
                                           header) */
    bcmFieldHeaderFormatExtensionMplsNonL4IPV4isH4 = 10, /* 'Non_L4' stands for IPV4 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser speculates that,
                                           following MPLS, the next protocol is
                                           Ethernet followed by IPV4 (on the
                                           fourth header) but not L4 */
    bcmFieldHeaderFormatExtensionMplsNonL4IPV6isH4 = 11, /* 'Non_L4' stands for IPV4 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser speculates that,
                                           following MPLS, the next protocol is
                                           Ethernet followed by IPV6 (on the
                                           fourth header) but not L4 */
    bcmFieldHeaderFormatExtensionMplsL4IPV4isH4 = 12, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser speculates that,
                                           following MPLS, the next protocol is
                                           Ethernet followed by L4 of IPV4 (on
                                           the fourth header) */
    bcmFieldHeaderFormatExtensionMplsL4IPV6isH4 = 13, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser speculates that,
                                           following MPLS, the next protocol is
                                           Ethernet followed by L4 of IPV6 (on
                                           the fourth header) */
    bcmFieldHeaderFormatExtensionMplsNonL4IPV4IsAny = 14, /* Group combining
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV4IsH3
                                           &
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV4isH4 */
    bcmFieldHeaderFormatExtensionMplsNonL4IPV6IsAny = 15, /* Group combining
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV6IsH3
                                           &
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV6isH4 */
    bcmFieldHeaderFormatExtensionMplsAnyL4IPV4IsH3 = 16, /* Group combining
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV4IsH3
                                           &
                                           bcmFieldHeaderFormatExtensionMplsL4IPV4isH3 */
    bcmFieldHeaderFormatExtensionMplsAnyL4IPV6IsH3 = 17, /* Group combining
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV6IsH3
                                           &
                                           bcmFieldHeaderFormatExtensionMplsL4IPV6isH3 */
    bcmFieldHeaderFormatExtensionMplsNonL4IPV4isH5 = 18, /* 'Non_L4' stands for IPV4 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser speculates that,
                                           following MPLS, the next protocol is
                                           Ethernet followed by IPV4 (on the
                                           fifth header) but not L4 */
    bcmFieldHeaderFormatExtensionMplsNonL4IPV6isH5 = 19, /* 'Non_L4' stands for IPV4 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser speculates that,
                                           following MPLS, the next protocol is
                                           Ethernet followed by IPV6 (on the
                                           fifth header) but not L4 */
    bcmFieldHeaderFormatExtensionMplsAnyL4IPV4IsH5 = 20, /* Group combining
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV4IsH5
                                           &
                                           bcmFieldHeaderFormatExtensionMplsL4IPV4isH5 */
    bcmFieldHeaderFormatExtensionMplsAnyL4IPV6IsH5 = 21, /* Group combining
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV6IsH5
                                           &
                                           bcmFieldHeaderFormatExtensionMplsL4IPV6isH5 */
    bcmFieldHeaderFormatExtensionMplsETHisH4 = 22, /* Hit is marked when parser speculates
                                           that, following MPLS, the next
                                           protocol is Ethernet (on the fourth
                                           header) */
    bcmFieldHeaderFormatExtensionMplsAnyEthIsH3H4 = 23, /* Group combining
                                           bcmFieldHeaderFormatExtensionMplsETHisH3
                                           &
                                           bcmFieldHeaderFormatExtensionMplsETHisH4 */
    bcmFieldHeaderFormatExtensionMplsAnyL4IPV4IsH4 = 24, /* Group combining
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV4IsH4
                                           &
                                           bcmFieldHeaderFormatExtensionMplsL4IPV4isH4 */
    bcmFieldHeaderFormatExtensionMplsAnyL4IPV6IsH4 = 25, /* Group combining
                                           bcmFieldHeaderFormatExtensionMplsNonL4IPV6IsH4
                                           &
                                           bcmFieldHeaderFormatExtensionMplsL4IPV6isH4 */
    bcmFieldHeaderFormatExtensionMplsL4IPV4isH5 = 26, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser speculates that,
                                           following MPLS, the next protocol is
                                           Ethernet followed by L4 of IPV4 (on
                                           the fifth header). */
    bcmFieldHeaderFormatExtensionMplsL4IPV6isH5 = 27, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser speculates that,
                                           following MPLS, the next protocol is
                                           Ethernet followed by L4 of IPV6 (on
                                           the fifth header). */
    bcmFieldHeaderFormatExtensionCount = 28 /* Always Last. Not a usable value. */
} bcm_field_header_format_extension_t;

#define BCM_FIELD_HEADER_FORMAT_EXTENSION \
{ \
    "DontCare", \
    "Ftmh", \
    "IpUdpGtp1", \
    "IpUdpGtp2", \
    "Fcoe", \
    "MplsNonL4IPV4IsH3", \
    "MplsNonL4IPV6IsH3", \
    "MplsL4IPV4isH3", \
    "MplsL4IPV6isH3", \
    "MplsETHisH3", \
    "MplsNonL4IPV4isH4", \
    "MplsNonL4IPV6isH4", \
    "MplsL4IPV4isH4", \
    "MplsL4IPV6isH4", \
    "MplsNonL4IPV4IsAny", \
    "MplsNonL4IPV6IsAny", \
    "MplsAnyL4IPV4IsH3", \
    "MplsAnyL4IPV6IsH3", \
    "MplsNonL4IPV4isH5", \
    "MplsNonL4IPV6isH5", \
    "MplsAnyL4IPV4IsH5", \
    "MplsAnyL4IPV6IsH5", \
    "MplsETHisH4", \
    "MplsAnyEthIsH3H4", \
    "MplsAnyL4IPV4IsH4", \
    "MplsAnyL4IPV6IsH4", \
    "MplsL4IPV4isH5", \
    "MplsL4IPV6isH5"  \
}

/* Various packet header formats for qualification / preselection */
typedef enum bcm_field_header_format_e {
    bcmFieldHeaderFormatL2 = 0,         /* L2 packet (headers = L2) */
    bcmFieldHeaderFormatIp4 = 1,        /* IPv4 packet (headers = L2, IPv4, L4) */
    bcmFieldHeaderFormatIp4AnyL2L3 = 2, /* Any IPv4 packet (headers = L2, IPv4,
                                           Any) */
    bcmFieldHeaderFormatIp6 = 3,        /* IPv6 packet (headers = L2, IPv6, L4) */
    bcmFieldHeaderFormatIp6AnyL2L3 = 4, /* Any IPv6 packet (headers = L2, IPv6,
                                           Any) */
    bcmFieldHeaderFormatMplsLabel1 = 5, /* MPLS packet with one label (headers =
                                           L2, MPLS (1 label), L4) */
    bcmFieldHeaderFormatMplsLabel1AnyL2L3 = 6, /* Any MPLS packet with one label
                                           (headers = L2, MPLS (1 label), Any) */
    bcmFieldHeaderFormatMplsLabel2 = 7, /* MPLS packet with two labels (headers
                                           = L2, MPLS (2 labels), L4) */
    bcmFieldHeaderFormatMplsLabel2AnyL2L3 = 8, /* Any MPLS packet with two labels
                                           (headers = L2, MPLS (2 labels), Any) */
    bcmFieldHeaderFormatMplsLabel3 = 9, /* MPLS packet with three labels
                                           (headers = L2, MPLS (3 labels), L4) */
    bcmFieldHeaderFormatMplsLabel3AnyL2L3 = 10, /* Any MPLS packet with three labels
                                           (headers = L2, MPLS (3 labels), Any) */
    bcmFieldHeaderFormatTrill = 11,     /* Trill packet (headers = L2, Trill) */
    bcmFieldHeaderFormatEthEth = 12,    /* L2 over L2 packet (headers = L2, L2) */
    bcmFieldHeaderFormatEthTrillEth = 13, /* L2 over Trill packet (headers = L2,
                                           Trill, L2) */
    bcmFieldHeaderFormatIp4Ip4 = 14,    /* IPv4 over IPv4 packet (headers = L2,
                                           IPv4, IPv4) */
    bcmFieldHeaderFormatIp6Ip4 = 15,    /* IPv6 over IPv4 packet (headers = L2,
                                           IPv4, IPv6) */
    bcmFieldHeaderFormatIp4MplsLabel1 = 16, /* IPv4 over MPLS with one label
                                           (headers = L2, MPLS (one label),
                                           IPv4) */
    bcmFieldHeaderFormatIp4MplsLabel2 = 17, /* IPv4 over MPLS with two labels
                                           (headers = L2, MPLS (two labels),
                                           IPv4) */
    bcmFieldHeaderFormatIp4MplsLabel3 = 18, /* IPv4 over MPLS with three labels
                                           (headers = L2, MPLS (three labels),
                                           IPv4) */
    bcmFieldHeaderFormatIp6MplsLabel1 = 19, /* IPv6 over MPLS with one label
                                           (headers = L2, MPLS (one label),
                                           IPv6) */
    bcmFieldHeaderFormatIp6MplsLabel2 = 20, /* IPv6 over MPLS with two labels
                                           (headers = L2, MPLS (two labels),
                                           IPv6) */
    bcmFieldHeaderFormatIp6MplsLabel3 = 21, /* IPv6 over MPLS with three labels
                                           (headers = L2, MPLS (three labels),
                                           IPv6) */
    bcmFieldHeaderFormatEthMplsLabel1 = 22, /* L2 over MPLS with one label (headers
                                           = L2, MPLS (one label), L2) */
    bcmFieldHeaderFormatEthMplsLabel2 = 23, /* L2 over MPLS with two labels (headers
                                           = L2, MPLS (two labels), L2) */
    bcmFieldHeaderFormatEthMplsLabel3 = 24, /* L2 over MPLS with three labels
                                           (headers = L2, MPLS (three labels),
                                           L2) */
    bcmFieldHeaderFormatIp4EthMplsLabel1 = 25, /* IPv4 over L2 over MPLS with one label
                                           (headers = L2, MPLS (one label), L2,
                                           IPv4) */
    bcmFieldHeaderFormatIp4EthMplsLabel2 = 26, /* IPv4 over L2 over MPLS with two
                                           labels (headers = L2, MPLS (two
                                           labels), L2, IPv4) */
    bcmFieldHeaderFormatIp4EthMplsLabel3 = 27, /* IPv4 over L2 over MPLS with three
                                           labels (headers = L2, MPLS (three
                                           labels), L2, IPv4) */
    bcmFieldHeaderFormatTrafficManagement = 28, /* Traffic Management packet injected by
                                           an external Packet Processor */
    bcmFieldHeaderFormatEthIp4Eth = 29, /* L2 over IPv4 over L2 packet (headers
                                           = L2, IPv4, L2) */
    bcmFieldHeaderFormatFCoE = 30,      /* FCoE packet */
    bcmFieldHeaderFormatMplsAnyLabelAnyL2L3 = 31, /* Any Number of MPLS labels 1/2/3 and
                                           any L2/L3 */
    bcmFieldHeaderFormatAfterTunnelTerminatedNonL4IPV4IsH3 = 32, /* 'Non_L4' stands for IPV4 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser detected that, after MPLS
                                           termination, the next protocol is
                                           IPV4 (on the third header) but not
                                           L4. */
    bcmFieldHeaderFormatAfterTunnelTerminatedNonL4IPV6IsH3 = 33, /* 'Non_L4' stands for IPV6 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser detected that, after MPLS
                                           termination, the next protocol is
                                           IPV6 (on the third header) but not
                                           L4. */
    bcmFieldHeaderFormatAfterTunnelTerminatedL4IPV4IsH3 = 34, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser detected that,
                                           after MPLS termination, the next
                                           protocol is L4 of IPV4 (on the third
                                           header). */
    bcmFieldHeaderFormatAfterTunnelTerminatedL4IPV6IsH3 = 35, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser detected that,
                                           after MPLS termination, the next
                                           protocol is L4 of IPV6 (on the third
                                           header). */
    bcmFieldHeaderFormatAfterTunnelTerminatedEthIsH3 = 36, /* Hit is marked when parser detected
                                           that, after MPLS termination, the
                                           next protocol Ethernet (on the third
                                           header). */
    bcmFieldHeaderFormatAfterTunnelTerminatedNonL4IPV4IsH4ETHisH3 = 37, /* 'Non_L4' stands for IPV4 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser detected that, after MPLS
                                           termination, the next protocol is
                                           Ethernet followed by IPV4 (on the
                                           fourth header) but not L4. */
    bcmFieldHeaderFormatAfterTunnelTerminatedNonL4IPV6IsH4ETHisH3 = 38, /* 'Non_L4' stands for IPV4 which is
                                           neither UDP nor TCP. Hit is marked
                                           when parser detected that, after MPLS
                                           termination, the next protocol is
                                           Ethernet followed by IPV6 (on the
                                           fourth header) but not L4. */
    bcmFieldHeaderFormatAfterTunnelTerminatedL4IPV4IsH4ETHisH3 = 39, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser detected that,
                                           after MPLS termination, the next
                                           protocol is Ethernet followed by L4
                                           of IPV4 (on the fourth header). */
    bcmFieldHeaderFormatAfterTunnelTerminatedL4IPV6IsH4ETHisH3 = 40, /* 'L4' stands for UDP/TCP. Hit is
                                           marked when parser detected that,
                                           after MPLS termination, the next
                                           protocol is Ethernet followed by L4
                                           of IPV6 (on the fourth header). */
    bcmFieldHeaderFormatMpls = 41,      /* MPLS packet (Packet containing MPLS) */
    bcmFieldHeaderFormatIp4Ip6 = 42,    /* IPv4 over IPv6 packet (headers = L2,
                                           IPv4, IPv6) */
    bcmFieldHeaderFormatIp6Ip6 = 43,    /* IPv6 over IPv6 packet (headers = L2,
                                           IPv6, IPv6) */
    bcmFieldHeaderFormatFCoENoEncap = 44, /* FCoE packet with standard header only
                                           (no extended header) */
    bcmFieldHeaderFormatCount = 45      /* Always Last. Not a usable value. */
} bcm_field_header_format_t;

#define BCM_FIELD_HEADER_FORMAT \
{ \
    "L2", \
    "Ip4", \
    "Ip4AnyL2L3", \
    "Ip6", \
    "Ip6AnyL2L3", \
    "MplsLabel1", \
    "MplsLabel1AnyL2L3", \
    "MplsLabel2", \
    "MplsLabel2AnyL2L3", \
    "MplsLabel3", \
    "MplsLabel3AnyL2L3", \
    "Trill", \
    "EthEth", \
    "EthTrillEth", \
    "Ip4Ip4", \
    "Ip6Ip4", \
    "Ip4MplsLabel1", \
    "Ip4MplsLabel2", \
    "Ip4MplsLabel3", \
    "Ip6MplsLabel1", \
    "Ip6MplsLabel2", \
    "Ip6MplsLabel3", \
    "EthMplsLabel1", \
    "EthMplsLabel2", \
    "EthMplsLabel3", \
    "Ip4EthMplsLabel1", \
    "Ip4EthMplsLabel2", \
    "Ip4EthMplsLabel3", \
    "TrafficManagement", \
    "EthIp4Eth", \
    "FCoE", \
    "MplsAnyLabelAnyL2L3", \
    "AfterTunnelTerminatedNonL4IPV4IsH3", \
    "AfterTunnelTerminatedNonL4IPV6IsH3", \
    "AfterTunnelTerminatedL4IPV4IsH3", \
    "AfterTunnelTerminatedL4IPV6IsH3", \
    "AfterTunnelTerminatedEthIsH3", \
    "AfterTunnelTerminatedNonL4IPV4IsH4ETHisH3", \
    "AfterTunnelTerminatedNonL4IPV6IsH4ETHisH3", \
    "AfterTunnelTerminatedL4IPV4IsH4ETHisH3", \
    "AfterTunnelTerminatedL4IPV6IsH4ETHisH3", \
    "Mpls", \
    "Ip4Ip6", \
    "Ip6Ip6", \
    "FCoENoEncap"  \
}

/* 
 * Specifies a set of possible header formats for matching, for use with
 * bcmFieldQualifyHeaderFormatSet.
 */
typedef struct bcm_field_header_format_set_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(bcmFieldHeaderFormatCount)]; 
} bcm_field_header_format_set_t;

#define BCM_FIELD_HEADER_FORMAT_SET_INIT(hfset)  \
    sal_memset(&(hfset), 0, sizeof(bcm_field_header_format_set_t)) 

#define BCM_FIELD_HEADER_FORMAT_SET_ADD(hfset, hf)  SHR_BITSET(((hfset).w), (hf)) 

#define BCM_FIELD_HEADER_FORMAT_SET_REMOVE(hfset, hf)  SHR_BITCLR(((hfset).w), (hf)) 

#define BCM_FIELD_HEADER_FORMAT_SET_TEST(hfset, hf)  SHR_BITGET(((hfset).w), (hf)) 

/* Opaque handle to a field action priority. */
typedef uint32 bcm_field_action_priority_t;

/* 
 * Structure to indicate selected FEM id, identifying it by array to
 * clarify priority between FEMs abd FESes.
 */
typedef struct bcm_field_array_n_position_s {
    uint8 array_id;                 /* Index of the FES/FEM array in the stage. */
    uint16 fem_position_in_array;   /* Position of FES/FEM (by FES/FEM ID)
                                       within the FES/FEM array. */
} bcm_field_array_n_position_t;

/* 
 * Field Qualifiers
 * 
 * Field qualifiers are collected into qualifier sets (qsets), which are
 * used to allocate field groups.
 * 
 * Note: These are in order of their bit width. Do not change the order
 * or the field select code algorithm for wide-mode will get slower.
 */
typedef enum bcm_field_qualify_e {
    bcmFieldQualifySrcIp6 = 0,          /*  Source IPv6 Address. */
    bcmFieldQualifyDstIp6 = 1,          /*  Destination IPv6 Address. */
    bcmFieldQualifySrcIp6High = 2,      /*  Src. IPv6 Address (High/Upper 64
                                           bits). */
    bcmFieldQualifyDstIp6High = 3,      /*  Dest IPv6 Address (High/Upper 64
                                           bits). */
    bcmFieldQualifySrcIp6Low = 4,       /*  Src. IPv6 Address (Low/Lower 64
                                           bits). */
    bcmFieldQualifyDstIp6Low = 5,       /*  Dest IPv6 Address (Low/Lower 64
                                           bits). */
    bcmFieldQualifySrcMac = 6,          /*  Source L2 MAC Address. */
    bcmFieldQualifyDstMac = 7,          /*  Destination L2 MAC Address. */
    bcmFieldQualifySnap = 8,            /*  40: SNAP Header. */
    bcmFieldQualifySrcIp = 9,           /*  Source IPv4 Address. */
    bcmFieldQualifyDstIp = 10,          /*  Destination IPv4 Address. */
    bcmFieldQualifyLlc = 11,            /*  24: LLC Header. */
    bcmFieldQualifyInPort = 12,         /*  Single Input Port. */
    bcmFieldQualifyInPorts = 13,        /*  Input Port Bitmap. */
    bcmFieldQualifyOutPorts = 14,       /*  Output Port Bitmap. */
    bcmFieldQualifyDrop = 15,           /*  Packet is flagged to be dropped . */
    bcmFieldQualifyIp6FlowLabel = 16,   /*  IPv6 Flow Label. */
    bcmFieldQualifyOuterVlan = 17,      /*  Outer VLAN. */
    bcmFieldQualifyOuterVlanId = 18,    /*  Outer VLAN Id. */
    bcmFieldQualifyOuterVlanPri = 19,   /*  Outer VLAN priority. */
    bcmFieldQualifyOuterVlanCfi = 20,   /*  Outer VLAN Cfi. */
    bcmFieldQualifyInnerVlan = 21,      /*  Inner VLAN (double-tagged pkts
                                           only). */
    bcmFieldQualifyInnerVlanId = 22,    /*  Inner VLAN Id. */
    bcmFieldQualifyInnerVlanPri = 23,   /*  Inner VLAN priority. */
    bcmFieldQualifyInnerVlanCfi = 24,   /*  Inner VLAN Cfi. */
    bcmFieldQualifyLookupStatus = 25,   /*  DEPRECATED Lookup status
                                           (BCM_FIELD_LOOKUP_xxx). */
    bcmFieldQualifyRangeCheck = 26,     /*  TCP/UDP Port Range Check Results. */
    bcmFieldQualifyL4PortRangeCheck = bcmFieldQualifyRangeCheck, /* TCP/UDP Port Range Check Results */
    bcmFieldQualifyL4SrcPort = 27,      /*  TCP/UDP Source Port. */
    bcmFieldQualifyL4DstPort = 28,      /*  TCP/UDP Destination Port. */
    bcmFieldQualifyEtherType = 29,      /*  Ethernet Type. */
    bcmFieldQualifyIpProtocol = 30,     /*  IP Protocol Field. */
    bcmFieldQualifyIp6NextHeader = bcmFieldQualifyIpProtocol, /*  IPv6 Next Header/IP Protocol. */
    bcmFieldQualifyDSCP = 31,           /*  Diffserv Code Point. */
    bcmFieldQualifyTos = bcmFieldQualifyDSCP, /*  Tos - same as DSCP. */
    bcmFieldQualifyIp6TrafficClass = bcmFieldQualifyDSCP, /*  IPv6 Traffic Class. */
    bcmFieldQualifyTtl = 32,            /*  Time To Live/Hop Limit. */
    bcmFieldQualifyIp6HopLimit = bcmFieldQualifyTtl, /*  IPv6 Hop Limit. */
    bcmFieldQualifySrcModid = 33,       /*  Source Module ID (deprecated). */
    bcmFieldQualifySrcPortTgid = 34,    /*  Source Port/Trunk Group ID
                                           (deprecated). */
    bcmFieldQualifySrcPort = 35,        /*  Source Module ID and Port . */
    bcmFieldQualifySrcTrunk = 36,       /*  Source Trunk Group ID . */
    bcmFieldQualifySrcTrunkMemberGport = 37, /*  Source Trunk Member Port . */
    bcmFieldQualifyDstModid = 38,       /*  Destination Module ID (deprecated). */
    bcmFieldQualifyDstPortTgid = 39,    /*  Dest Port/Trunk Group ID
                                           (deprecated. */
    bcmFieldQualifyDstPort = 40,        /*  Destination Module ID and Port . */
    bcmFieldQualifyDstTrunk = 41,       /*  Destination Trunk Group ID . */
    bcmFieldQualifyTcpControl = 42,     /*  TCP Control Flags. */
    bcmFieldQualifyPacketRes = 43,      /*  Pkt resolution
                                           (BCM_FIELD_PKT_RES_xxx). */
    bcmFieldQualifyPacketFormat = 44,   /*  DEPRECATED Packet Format
                                           (BCM_FIELD_PKT_FMT_xxx). */
    bcmFieldQualifySrcClassL2 = 45,     /*  Source Class based on L2 lookup
                                           result. */
    bcmFieldQualifySrcClassL3 = 46,     /*  Source Class based on L3 lookup
                                           result. */
    bcmFieldQualifySrcClassField = 47,  /*  Source Class based on
                                           bcmFieldStageLookup result. */
    bcmFieldQualifyDstClassL2 = 48,     /*  Destination Class based on L2 lookup
                                           result. */
    bcmFieldQualifyDstClassL3 = 49,     /*  Destination Class based on L3 lookup
                                           result. */
    bcmFieldQualifyDstClassField = 50,  /*  Destination Class based on
                                           bcmFieldStageLookup result. */
    bcmFieldQualifyIpInfo = 51,         /*  IP Information (BCM_FIELD_IP_xxx). */
    bcmFieldQualifyIpProtocolCommon = 52, /*  3: Common IP protocols. */
    bcmFieldQualifyMHOpcode = 53,       /*  Module Header Opcode. */
    bcmFieldQualifyIpFlags = 54,        /*  IPv4 Flags. */
    bcmFieldQualifyInnerTpid = 55,      /*  2: Inner VLAN TPID. */
    bcmFieldQualifyOuterTpid = 56,      /*  2: Outer VLAN TPID. */
    bcmFieldQualifyInnerIpType = 57,    /*  Inner ip header IP Type
                                           (bcmFieldIpTypeXXX). */
    bcmFieldQualifyTunnelType = 58,     /*  TunnelType (bcmFieldTunnelXXX). */
    bcmFieldQualifyLoopbackType = 59,   /*  LoopbackType
                                           (bcmFieldLoopbackTypeXXX). */
    bcmFieldQualifyLoopback = 60,       /*  Packets forwarded through loopback
                                           interface. */
    bcmFieldQualifyIpType = 61,         /*  IP Type (bcmFieldIpTypeXXX). */
    bcmFieldQualifyForwardingType = 62, /*  Packet forwarding type
                                           (bcmFieldForwardingTypeXXX). */
    bcmFieldQualifyDecap = 63,          /*  Decapsulation occurred. */
    bcmFieldQualifyHiGig = 64,          /*  HiGig packet. */
    bcmFieldQualifyHiGigProxy = 65,     /*  HiGig proxy processing is enabled. */
    bcmFieldQualifyDstHiGig = 66,       /*  Packet being forwarded to higig
                                           port. */
    bcmFieldQualifyStage = 67,          /*  Field Processor pipeline stage. */
    bcmFieldQualifyStageIngress = 68,   /*  Field Processor pipeline ingress
                                           stage. */
    bcmFieldQualifyStageIngressSecurity = 69, /*  Field Processor ingress security
                                           stage. */
    bcmFieldQualifyStageIngressQoS = 70, /*  Field Processor ingress QOS stage. */
    bcmFieldQualifyStageLookup = 71,    /*  Field Processor pipeline lookup
                                           stage. */
    bcmFieldQualifyStageEgress = 72,    /*  Field Processor pipeline egress
                                           stage. */
    bcmFieldQualifyStageEgressSecurity = 73, /*  Field Processor egress security
                                           stage. */
    bcmFieldQualifyStageExternal = 74,  /*  Field Processor Rules in External
                                           slice. */
    bcmFieldQualifyDeprecated75 = 75,   /* Deprecated 75 */
    bcmFieldQualifyDeprecated76 = 76,   /* Deprecated 76 */
    bcmFieldQualifyTcpSequenceZero = 77, /*  Sequence number = 0. */
    bcmFieldQualifyTcpHeaderSize = 78,  /*  TCP Header Size. */
    bcmFieldQualifyInterfaceClassL2 = 79, /*  Vlan Class Id. */
    bcmFieldQualifyInterfaceClassL3 = 80, /*  L3 Interface Class Id. */
    bcmFieldQualifyInterfaceClassPort = 81, /*  Port Class Id. */
    bcmFieldQualifyL3Routable = 82,     /*  L3 routable bit for FB2. */
    bcmFieldQualifyIpFrag = 83,         /*  IP Fragment info. */
    bcmFieldQualifyVrf = 84,            /*  VRF Id for FB 2. */
    bcmFieldQualifyL3Ingress = 85,      /*  L3 ingress interface. */
    bcmFieldQualifyOutPort = 86,        /*  Single Output Port. */
    bcmFieldQualifyIp4 = 87,            /*  Qualify IpType == IPv4Any. */
    bcmFieldQualifyIp6 = 88,            /*  Qualify IpType == Ipv6Any. */
    bcmFieldQualifyL2Format = 89,       /*  Qualify on L2 header format. */
    bcmFieldQualifyVlanFormat = 90,     /*  Qualify on vlan tag format. */
    bcmFieldQualifyTranslatedVlanFormat = 91, /*  Qualify on translated vlan tag
                                           format. */
    bcmFieldQualifyExtensionHeaderType = 92, /*  Qualify on  Next Header Field in
                                           First Extension Header. */
    bcmFieldQualifyExtensionHeaderSubCode = 93, /*  Qualify on First byte after
                                           extension header length field. */
    bcmFieldQualifyExtensionHeader2Type = 94, /*  Qualify on  Next Header Field in
                                           Second Extension Header. */
    bcmFieldQualifyL4Ports = 95,        /*  Four bytes after L3 header are
                                           available. */
    bcmFieldQualifyMirrorCopy = 96,     /*  Qualify mirrored traffic. */
    bcmFieldQualifyTunnelTerminated = 97, /*  Qualify tunnel terminated traffic. */
    bcmFieldQualifyMplsTerminated = 98, /*  Qualify mpls terminated traffic. */
    bcmFieldQualifyInnerSrcIp = 99,     /*  Inner ip header source IPv4 Address. */
    bcmFieldQualifyInnerDstIp = 100,    /*  Inner ip header destination IPv4
                                           Address. */
    bcmFieldQualifyInnerSrcIp6 = 101,   /*  Inner ip header source IPv6 Address. */
    bcmFieldQualifyInnerDstIp6 = 102,   /*  Inner ip header destination IPv6
                                           Address. */
    bcmFieldQualifyInnerSrcIp6High = 103, /*  Inner ip header Src. IPv6 Address
                                           (High/Upper 64 bits). */
    bcmFieldQualifyInnerDstIp6High = 104, /*  Inner ip header Dest IPv6 Address
                                           (High/Upper 64 bits). */
    bcmFieldQualifyInnerTtl = 105,      /*  Inner ip header time To Live/Hop
                                           Limit. */
    bcmFieldQualifyInnerIp6HopLimit = bcmFieldQualifyInnerTtl, /*  Inner IPv6 header Hop Limit. */
    bcmFieldQualifyInnerTos = 106,      /*  Inner ip header diffserv Code Point. */
    bcmFieldQualifyInnerDSCP = bcmFieldQualifyInnerTos, /*  Inner DSCP */
    bcmFieldQualifyInnerIp6TrafficClass = bcmFieldQualifyInnerTos, /*  Inner IPv6 header Traffic Class. */
    bcmFieldQualifyInnerIpProtocol = 107, /*  Inner ip header IP Protocol Field. */
    bcmFieldQualifyInnerIp6NextHeader = bcmFieldQualifyInnerIpProtocol, /*  Inner Ip6 header  Next Header/IP
                                           Protocol. */
    bcmFieldQualifyInnerIpFrag = 108,   /*  Inner ip header IP Fragment info. */
    bcmFieldQualifyVlanTranslationHit = 109, /*  Vlan Translation table hit. */
    bcmFieldQualifyForwardingVlanValid = 110, /*  Forwarding vlan is valid. */
    bcmFieldQualifyIngressStpState = 111, /*  Ingress Vlan STG STP state. */
    bcmFieldQualifyL2SrcHit = 112,      /*  L2 Source lookup success. */
    bcmFieldQualifyL2SrcStatic = 113,   /*  L2 Source is static entry. */
    bcmFieldQualifyL2DestHit = 114,     /*  L2 Destination lookup success. */
    bcmFieldQualifyL2StationMove = 115, /*  L2 Source port mismatch. */
    bcmFieldQualifyL2CacheHit = 116,    /*  L2 Destination cache lookup success. */
    bcmFieldQualifyL3SrcHostHit = 117,  /*  L3 Source lookup host table hit. */
    bcmFieldQualifyL3DestHostHit = 118, /*  L3 Destination lookup host table
                                           hit. */
    bcmFieldQualifyL3DestRouteHit = 119, /*  L3 Destination lookup route table
                                           hit. */
    bcmFieldQualifyIpmcStarGroupHit = 120, /*  L3 Multicast lookup (Star,Group)
                                           hit. */
    bcmFieldQualifyDosAttack = 121,     /*  Denial of Service attack frame. */
    bcmFieldQualifyDeprecated122 = 122, /* Deprecated 122 */
    bcmFieldQualifyClassId = 123,       /*  internal use only. */
    bcmFieldQualifyDeprecated124 = 124, /* Deprecated 124 */
    bcmFieldQualifyIcmpTypeCode = 125,  /*  internal use only. */
    bcmFieldQualifyDeprecated126 = 126, /* Deprecated 126 */
    bcmFieldQualifyInnerIpProtocolCommon = 127, /*  Inner ip header IP Protocol Common
                                           Field. */
    bcmFieldQualifyInnerL4SrcPort = 128, /*  TCP/UDP Source Port. */
    bcmFieldQualifyInnerL4DstPort = 129, /*  TCP/UDP Destination Port. */
    bcmFieldQualifyInnerIp6FlowLabel = 130, /*  Inner IPv6 header Flow Label. */
    bcmFieldQualifyDstL3Egress = 131,   /*  Egress Object id. */
    bcmFieldQualifyDstMulticastGroup = 132, /*  Multicast Group id. */
    bcmFieldQualifySrcMplsGport = 133,  /*  Source Mpls gport. */
    bcmFieldQualifyDstMplsGport = 134,  /*  Destination Mpls gport. */
    bcmFieldQualifySrcMimGport = 135,   /*  Source Mim gport. */
    bcmFieldQualifyDstMimGport = 136,   /*  Destination Mim gport. */
    bcmFieldQualifySrcWlanGport = 137,  /*  Source Wlan gport. */
    bcmFieldQualifyDstWlanGport = 138,  /*  Destination Wlan gport. */
    bcmFieldQualifySrcModPortGport = 139, /*  Source module/port pair. */
    bcmFieldQualifySrcModuleGport = 140, /*  Source module. */
    bcmFieldQualifyColor = 141,         /*  Packet color. */
    bcmFieldQualifyIntPriority = 142,   /*  Internal priority. */
    bcmFieldQualifyForwardingVlanId = 143, /*  Forwarding vlan id. */
    bcmFieldQualifyVpn = 144,           /*  Vpn id. */
    bcmFieldQualifyFlowId = 145,        /*  Flow id. */
    bcmFieldQualifyInVPort = 146,       /*  Ingress virtual port id. */
    bcmFieldQualifyOutVPort = 147,      /*  Egress virtual port id. */
    bcmFieldQualifyFibreChanOuter = 148, /*  Outer Fibre Channel header type. */
    bcmFieldQualifyFibreChanInner = 149, /*  Inner Fibre Channel header type. */
    bcmFieldQualifyVnTag = 150,         /*  NIV VN tag. */
    bcmFieldQualifyCnTag = 151,         /*  QCN CN tag. */
    bcmFieldQualifyFabricQueueTag = 152, /*  Fabric queue tag. */
    bcmFieldQualifyMyStationHit = 153,  /*  When RIOT is not enabled or not
                                           supported, qualifies on L2 tunnel
                                           termination lookup or Routing hit
                                           status (default). When RIOT is
                                           supported and enabled, qualifies on
                                           L2 underlay tunnel termination lookup
                                           hit status. */
    bcmFieldQualifyDstMultipath = 154,  /*  Destination Multipath ID. */
    bcmFieldQualifyL2PayloadFirstEightBytes = 155, /*  First eight bytes of L2 Payload. */
    bcmFieldQualifySrcVirtualPortValid = 156, /*  Source Virtual Port is valid. */
    bcmFieldQualifyDstL3EgressNextHops = 157, /*  Consecutive L3 Egress Next hops. */
    bcmFieldQualifyRecoverableDrop = 158, /*  Recoverable drop indication. */
    bcmFieldQualifyRepCopy = 159,       /*  Externally-replicated copy. */
    bcmFieldQualifyIpTunnelHit = 160,   /*  IP tunnel lookup hit. */
    bcmFieldQualifyMplsLabel1Hit = 161, /*  MPLS label 1 lookup hit. */
    bcmFieldQualifyTrillEgressRbridgeHit = 162, /*  TRILL egress Rbridge lookup hit. */
    bcmFieldQualifyL2GreSrcIpHit = 163, /*  Layer 2 GRE source IP address lookup
                                           hit. */
    bcmFieldQualifyMimSrcGportHit = 164, /*  MiM source port lookup hit. */
    bcmFieldQualifyMplsLabel2Hit = 165, /*  MPLS label 2 lookup hit. */
    bcmFieldQualifyTrillIngressRbridgeHit = 166, /*  TRILL ingress Rbridge lookup hit. */
    bcmFieldQualifyL2GreVfiHit = 167,   /*  Layer 2 GRE VFI lookup hit. */
    bcmFieldQualifyMimVfiHit = 168,     /*  MiM VFI lookup hit. */
    bcmFieldQualifyGenericAssociatedChannelLabelValid = 169, /*  MPLS GAL valid. */
    bcmFieldQualifyRouterAlertLabelValid = 170, /*  MPLS RAL valid. */
    bcmFieldQualifyDstIpLocal = 171,    /*  Dest IP is local. */
    bcmFieldQualifyNormalizeIpAddrs = 172, /*  Normalize IP addresses. */
    bcmFieldQualifyNormalizeMacAddrs = 173, /*  Normalize MAC addresses. */
    bcmFieldQualifyIpAddrsNormalized = 174, /*  IP addresses were normalized. */
    bcmFieldQualifyMacAddrsNormalized = 175, /*  MAC addresses were normalized. */
    bcmFieldQualifyMplsForwardingLabel = 176, /*  MPLS forwarding label. */
    bcmFieldQualifyMplsForwardingLabelTtl = 177, /*  TTL field of MPLS forwarding label. */
    bcmFieldQualifyMplsForwardingLabelBos = 178, /*  BOS field of MPLS forwarding label. */
    bcmFieldQualifyMplsForwardingLabelExp = 179, /*  EXP field of MPLS forwarding label. */
    bcmFieldQualifyMplsForwardingLabelId = 180, /*  ID field of MPLS forwarding label. */
    bcmFieldQualifyMplsControlWord = 181, /*  MPLS control word. */
    bcmFieldQualifyRtag7AHashUpper = 182, /*  Upper half of RTAG7 hash A result. */
    bcmFieldQualifyRtag7AHashLower = 183, /*  Lower half of RTAG7 hash A result. */
    bcmFieldQualifyRtag7BHashUpper = 184, /*  Upper half of RTAG7 hash B result. */
    bcmFieldQualifyRtag7BHashLower = 185, /*  Lower half of RTAG7 hash B result. */
    bcmFieldQualifyMplsForwardingLabelAction = 186, /*  MPLS forwarding label action. */
    bcmFieldQualifyMplsControlWordValid = 187, /*  MPLS control word valid. */
    bcmFieldQualifyEgressClass = 188,   /* Class assigned by next hop */
    bcmFieldQualifyEgressClassL3Interface = 189, /* Class assigned by egress interface */
    bcmFieldQualifyEgressClassTrill = 190, /* Class assigned by egress TRILL */
    bcmFieldQualifyEgressClassWlan = 191, /* Class assigned by egress WLAN */
    bcmFieldQualifyEgressClassL2Gre = 192, /* Class assigned by egress L2 GRE */
    bcmFieldQualifyLlidValue = 193,     /*  LLID value (2 bytes) in preamble. */
    bcmFieldQualifyCpuQueue = 194,      /*  CPU COS Queue value. */
    bcmFieldQualifyMpls = 195,          /* Qualify on MPLS packets */
    bcmFieldQualifySrcGport = 196,      /*  Source module/port pair or
                                           MPLS/MiM/WLAN/Niv/Vlan port. */
    bcmFieldQualifyHeaderFormat = 197,  /* Qualify on header format */
    bcmFieldQualifyHeaderFormatSet = 198, /* Qualify on header format set */
    bcmFieldQualifyL2Learn = 199,       /* Set if L2 learning is enabled */
    bcmFieldQualifyPortOrientation = 200, /* Orientation in a Hub-Spoke topology
                                           (Hub or Spoke) */
    bcmFieldQualifyEcnValue = 201,      /* ECN Value */
    bcmFieldQualifyRxTrapCode = 202,    /* Rx Trap Id */
    bcmFieldQualifyPtch = 203,          /* Opaque attribute field of the
                                           Injected packets. Part of the PTCH
                                           header in 88650 */
    bcmFieldQualifyMplsBos = 204,       /* Qualify on packets whose header
                                           parsing reached the MPLS BoS label */
    bcmFieldQualifyRxTrapData = 205,    /* Rx Trap Data */
    bcmFieldQualifyPolicerIntPrio = 206, /* Internal priority for the policer */
    bcmFieldQualifyPacketTerminatedBytes = 207, /* Number of bytes terminated */
    bcmFieldQualifyBypassFilter = 208,  /* Qualify packets bypassing any
                                           filtering */
    bcmFieldQualifyReplicantAny = 209,  /* Qualify any Multicast packets */
    bcmFieldQualifyReplicantFirst = 210, /* First-replication copy of the packet */
    bcmFieldQualifyTrillEgressRbridge = 211, /* Egress RBridge Nickname */
    bcmFieldQualifyISid = 212,          /* I-SID (MAC-in-MAC lookup-id) */
    bcmFieldQualifyInterfaceClassProcessingPort = 213, /* Packet-processing Port Class ID */
    bcmFieldQualifyDstRpfGport = 214,   /* RPF destination (gport) for the RPF
                                           Check */
    bcmFieldQualifyTrunkHashResult = 215, /* Trunk Hash Result (i.e., the
                                           Load-balancing Key) */
    bcmFieldQualifyDhcp = 216,          /* Qualify DHCP packets */
    bcmFieldQualifySnoopCopy = 217,     /* Snooped traffic */
    bcmFieldQualifyForwardCopy = 218,   /* Forwarded traffic */
    bcmFieldQualifyInterfaceClassVPort = 219, /* Virtual Port Interface Class ID */
    bcmFieldQualifyVPortRangeCheck = 220, /* Virtual Port Range Check Results */
    bcmFieldQualifyPacketLengthRangeCheck = 221, /* Packet length Range Check Results */
    bcmFieldQualifyStageIngressVlanTranslation = 222, /* VLAN Translation stage */
    bcmFieldQualifyStageIngressTunnelTerminated = 223, /* Tunnel termination stage */
    bcmFieldQualifyStageIngressMplsTerminated = 224, /* MPLS Termination stage */
    bcmFieldQualifyStageIngressIpTunnel = 225, /* IP tunnel termination stage */
    bcmFieldQualifyStageIngressL2Src = 226, /* L2 Source lookup stage */
    bcmFieldQualifyStageIngressL2Dest = 227, /* L2 Destination lookup stage */
    bcmFieldQualifyStageIngressL3SrcRoute = 228, /* L3 Source Route lookup stage */
    bcmFieldQualifyStageIngressL3DestRoute = 229, /* L3 Destination Route lookup stage */
    bcmFieldQualifyStageIngressIpmc = 230, /* IP Multicast lookup stage */
    bcmFieldQualifyTunnelTerminatedHit = 231, /* Tunnel termination hit */
    bcmFieldQualifyMplsTerminatedHit = 232, /* MPLS Termination hit */
    bcmFieldQualifyL3SrcRouteHit = 233, /* L3 Source Route lookup hit */
    bcmFieldQualifyIpmcHit = 234,       /* IP Multicast lookup hit */
    bcmFieldQualifyVlanTranslationValue = 235, /* VLAN Translation lookup value */
    bcmFieldQualifyTunnelTerminatedValue = 236, /* Tunnel Termination lookup value */
    bcmFieldQualifyMplsTerminatedValue = 237, /* MPLS Termination lookup value */
    bcmFieldQualifyIpTunnelValue = 238, /* IP Tunnel Termination lookup value */
    bcmFieldQualifyL2SrcValue = 239,    /* L2 Source lookup value */
    bcmFieldQualifyL2DestValue = 240,   /* L2 Destination lookup value */
    bcmFieldQualifyL3SrcRouteValue = 241, /* L3 Source lookup value */
    bcmFieldQualifyL3DestRouteValue = 242, /* L3 Destination lookup value */
    bcmFieldQualifyIpmcValue = 243,     /* IP Multicast lookup value */
    bcmFieldQualifyLearnSrcMac = 244,   /* MAC Source Address learnt */
    bcmFieldQualifyLearnVlan = 245,     /* Vlan learnt */
    bcmFieldQualifyLearnSrcPort = 246,  /* Source Port learnt */
    bcmFieldQualifyPacketSize = 247,    /* Packet size in Bytes. */
    bcmFieldQualifyInnerSrcMac = 248,   /* Inner Source L2 MAC Address. */
    bcmFieldQualifyInnerDstMac = 249,   /* Inner Destination L2 MAC Address. */
    bcmFieldQualifyInnerEtherType = 250, /* Inner Ethernet Type */
    bcmFieldQualifyMplsLabel1 = 251,    /* MPLS Label 1 */
    bcmFieldQualifyMplsLabel1Ttl = 252, /* TTL field of the first MPLS Label */
    bcmFieldQualifyMplsLabel1Bos = 253, /* BoS field of the first MPLS Label */
    bcmFieldQualifyMplsLabel1Exp = 254, /* Exp field of the first MPLS Label */
    bcmFieldQualifyMplsLabel1Id = 255,  /* ID field of the first MPLS Label */
    bcmFieldQualifyMplsLabel2 = 256,    /* MPLS Label 2 */
    bcmFieldQualifyMplsLabel2Ttl = 257, /* TTL field of the second MPLS Label */
    bcmFieldQualifyMplsLabel2Bos = 258, /* BoS field of the second MPLS Label */
    bcmFieldQualifyMplsLabel2Exp = 259, /* Exp field of the second MPLS Label */
    bcmFieldQualifyMplsLabel2Id = 260,  /* ID field of the second MPLS Label */
    bcmFieldQualifyMplsLabel3 = 261,    /* MPLS Label 3 */
    bcmFieldQualifyMplsLabel3Ttl = 262, /* TTL field of the third MPLS Label */
    bcmFieldQualifyMplsLabel3Bos = 263, /* BoS field of the third MPLS Label */
    bcmFieldQualifyMplsLabel3Exp = 264, /* Exp field of the third MPLS Label */
    bcmFieldQualifyMplsLabel3Id = 265,  /* ID field of the third MPLS Label */
    bcmFieldQualifyCascadedKeyValue = 266, /* Value of key cascaded from prior
                                           group in cascade */
    bcmFieldQualifyMplsOuterLabelPop = 267, /* Qualifies MPLS Outer Label Popped
                                           Packets */
    bcmFieldQualifyMplsStationHitTunnelUnterminated = 268, /* Qualifies Mpls Station Hit Tunnel
                                           Unterminated Packets */
    bcmFieldQualifyIngressClassField = 269, /* Class Id assigned for packet by
                                           Ingress Stage */
    bcmFieldQualifyIngressInterfaceClassPort = 270, /* Class Id assigned for packet based on
                                           Ingress Port */
    bcmFieldQualifyExternalValue0 = 271, /* External lookup 0 value */
    bcmFieldQualifyExternalValue1 = 272, /* External lookup 1 value */
    bcmFieldQualifyExternalValue2 = 273, /* External lookup 2 value */
    bcmFieldQualifyExternalValue3 = 274, /* External lookup 3 value */
    bcmFieldQualifyExternalHit0 = 275,  /* External lookup 0 hit */
    bcmFieldQualifyExternalHit1 = 276,  /* External lookup 1 hit */
    bcmFieldQualifyExternalHit2 = 277,  /* External lookup 2 hit */
    bcmFieldQualifyExternalHit3 = 278,  /* External lookup 3 hit */
    bcmFieldQualifyVpnUnknownDstMacDstPort = 279, /* Destination for unknown-DA packets.
                                           Set per Vpn. */
    bcmFieldQualifyVxlanNetworkId = 280, /* Vxlan Network/Segment Id */
    bcmFieldQualifyVxlanFlags = 281,    /* VxLan header Flags */
    bcmFieldQualifyNatNeeded = 282,     /* Qualify packets where NAT is needed */
    bcmFieldQualifyNatDstRealmId = 283, /* Qualify packets on Dst Realm Id */
    bcmFieldQualifyNatSrcRealmId = 284, /* Qualify packets on Src Realm Id */
    bcmFieldQualifyIcmpError = 285,     /* Qualifies any packet with ICMP Error */
    bcmFieldQualifyTunnelId = 286,      /* Tunnel Id */
    bcmFieldQualifyArpSenderIp4 = 287,  /* Sender IPv4 field of ARP header */
    bcmFieldQualifyArpTargetIp4 = 288,  /* Target IPv4 field of ARP header */
    bcmFieldQualifyArpOpcode = 289,     /* Opcode field of ARP header.Values set
                                           according to bcmFieldArpOpcode */
    bcmFieldQualifyTranslatedOuterVlan = 290, /* Translated Outer VLAN ID, Cfi,
                                           Priority */
    bcmFieldQualifyTranslatedOuterVlanId = 291, /* Translated Outer VLAN ID */
    bcmFieldQualifyTranslatedOuterVlanPri = 292, /* Translated Outer VLAN Priority */
    bcmFieldQualifyTranslatedOuterVlanCfi = 293, /* Translated Outer VLAN Cfi */
    bcmFieldQualifyTranslatedInnerVlan = 294, /* Translated Inner VLAN ID, Cfi,
                                           Priority */
    bcmFieldQualifyTranslatedInnerVlanId = 295, /* Translated Inner VLAN ID */
    bcmFieldQualifyTranslatedInnerVlanPri = 296, /* Translated Inner VLAN Priority */
    bcmFieldQualifyTranslatedInnerVlanCfi = 297, /* Translated Inner VLAN Cfi */
    bcmFieldQualifyConstantZero = 298,  /* Constant zero-value. Useful for
                                           Direct group mode. */
    bcmFieldQualifyConstantOne = 299,   /* Constant one-value. Useful for Direct
                                           group mode. */
    bcmFieldQualifyFibreChanRCtl = 300, /* Fibre Channel's R_Ctl (Routing
                                           Control) flags. */
    bcmFieldQualifyFibreChanFCtl = 301, /* Fibre Channel's F_Ctl (Frame Control)
                                           flags. */
    bcmFieldQualifyFibreChanCSCtl = 302, /* Fibre Channel's CS_Ctl (Class
                                           Specified Control) flags. */
    bcmFieldQualifyFibreChanDFCtl = 303, /* Fibre Channel's DF_Ctl (Data Field
                                           Control) flags. */
    bcmFieldQualifyFibreChanType = 304, /* Match an FP entry based on Fibre
                                           Channel's Type. */
    bcmFieldQualifyFibreChanSrcId = 305, /* Fibre Channel's Src Id */
    bcmFieldQualifyFibreChanDstId = 306, /* Fibre Channel's Dst Id. */
    bcmFieldQualifyFibreChanZoneCheck = 307, /* Fibre Channel's Zone Check Status
                                           (BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_xxx). */
    bcmFieldQualifyFibreChanSrcFpmaCheck = 308, /* Fibre Channel's Src FPMA Prefix Check
                                           Status. */
    bcmFieldQualifyFibreChanSrcBindCheck = 309, /* Fibre Channel's Src Bind Check
                                           Status. */
    bcmFieldQualifyFibreChanVFTVersion = 310, /* Fibre Channel's VFT version. */
    bcmFieldQualifyFibreChanVFTPri = 311, /* Fibre Channel's VFT Priority. */
    bcmFieldQualifyFibreChanVFTFabricId = 312, /* Fibre Channel's VFT Fabric Id. */
    bcmFieldQualifyFibreChanVFTHopCount = 313, /* Fibre Channel's VFT Hop Count. */
    bcmFieldQualifyFibreChanVFTVsanId = 314, /* Fibre Channel's VFT Internal VSAN ID. */
    bcmFieldQualifyFibreChanVFTVsanPri = 315, /* Fibre Channel's VFT VSAN Priority. */
    bcmFieldQualifyFibreChanVFTValid = 316, /* Fibre Channel's VFT header
                                           presence/validity. */
    bcmFieldQualifyFcoeSOF = 317,       /* Match an FP entry based on Fcoe SOF. */
    bcmFieldQualifyFcoeVersionIsZero = 318, /* FCoE Version Is Zero. */
    bcmFieldQualifyForwardingHeaderOffset = 319, /* Distance of the forwarding header
                                           from the start-of-packet. Unit:
                                           bytes. */
    bcmFieldQualifyL3SrcBind = 320,     /*  L3 source bind lookup success. */
    bcmFieldQualifyECid = 321,          /* E-CID base. Same as ExtenderPortVid. */
    bcmFieldQualifyIngressECid = 322,   /* Ingress E-CID base. */
    bcmFieldQualifyETag = 323,          /* E-Tag value. */
    bcmFieldQualifyIngressVPortBridgeDisable = 324, /* Ingress VPort Bridge same-interface
                                           disabled */
    bcmFieldQualifyHashValue = 325,     /* Hash value */
    bcmFieldQualifyIsEqualValue = 326,  /* Result value of the is-equal
                                           operation */
    bcmFieldQualifyStageHash = 327,     /* Hashing stage */
    bcmFieldQualifyUrpfMode = 328,      /* URPF mode according to
                                           bcm_field_urpf_mode_t */
    bcmFieldQualifyAppType = 329,       /*  Packet Application type
                                           (bcmFieldAppTypeXXX). */
    bcmFieldQualifySubportPktTag = 330, /* Ingress LLTAG. */
    bcmFieldQualifySrcVxlanGport = 331, /* Qualify vxlan source gport. */
    bcmFieldQualifyDstVxlanGport = 332, /*  Qualify vxlan destination gport. */
    bcmFieldQualifyOamMdl = 333,        /*  Qualify OAM Maintenance Domain
                                           Levels. */
    bcmFieldQualifyIntCongestionNotification = 334, /*  Qualify internal congestion
                                           notification value. */
    bcmFieldQualifySrcNivGport = 335,   /*  Source Niv gport. */
    bcmFieldQualifyDstNivGport = 336,   /*  Destination Niv gport. */
    bcmFieldQualifyDstGport = 337,      /*  Destination Niv port. */
    bcmFieldQualifyMirrorEgressDisabled = 338, /*  Egress Mirroring disabled. */
    bcmFieldQualifyBypassSrcMacFilter = 339, /*  Qualify packets bypassing Source MAC
                                           Address filtering. */
    bcmFieldQualifyRxTrapCodeForSnoop = 340, /*  Rx Trap code ID used for snoop. */
    bcmFieldQualifyIpmcStarGroupValue = 341, /*  L3 Multicast lookup (Star,Group)
                                           Value. */
    bcmFieldQualifyNativeVSwitch = 342, /*  Native-VSwitch (for
                                           Routing-over-overlay packets). */
    bcmFieldQualifyNativeVSwitchValid = 343, /*  Valid native-VSwitch (for
                                           Routing-over-overlay packets). */
    bcmFieldQualifyTrillIVersion = 344, /*  TRILL version field. */
    bcmFieldQualifyTrillIngressRbridge = 345, /*  Ingress Rbridge Nickname. */
    bcmFieldQualifyTrillMultiDestination = 346, /*  RILL Multi-destination field. */
    bcmFieldQualifyTrillOpLength = 347, /*  TRILL Options length field. */
    bcmFieldQualifyTrillHopCount = 348, /*  TRILL Hop count field . */
    bcmFieldQualifyTrillPayload = 349,  /*  Payload of TRILL header. */
    bcmFieldQualifyMplsForwardingLabelPayload = 350, /*  Payload of MPLS forwarding label. */
    bcmFieldQualifyIncomingIpIfClass = 351, /*  Incoming IP interface Class ID. */
    bcmFieldQualifyL2GreProtocolType = 352, /*  L2GRE Protocol type field . */
    bcmFieldQualifyL2GreVsid = 353,     /*  L2GRE Virtual Subnet ID field. */
    bcmFieldQualifyL2GreFlowId = 354,   /*  L2GRE Flow ID field. */
    bcmFieldQualifyMimVlanPri = 355,    /*  MAC-in-MAC VLAN Priority field. */
    bcmFieldQualifyMimVlanCfi = 356,    /*  MAC-in-MAC VLAN Cfi field. */
    bcmFieldQualifyFhei = 357,          /*  DNX FHEI header field. */
    bcmFieldQualifyFheiSize = 358,      /*  DNX FHEI header size in bytes. */
    bcmFieldQualifyEthernetOamHeaderBits0_31 = 359, /*  Ethernet OAM Header First 4 Bytes. */
    bcmFieldQualifyEthernetOamHeaderBits32_63 = 360, /*  Ethernet OAM Header Second 4 Bytes. */
    bcmFieldQualifyEthernetOamDstClassL2 = 361, /*  Ethernet OAM Destination Class based
                                           on L2 lookup result. */
    bcmFieldQualifyEthernetOamTxPktUPMEP = 362, /*  Ethernet OAM UP-MEP Tx Packet. */
    bcmFieldQualifyEthernetOamInterfaceClassNiv = 363, /*  Ethernet OAM ClassId from Source VP
                                           Table. */
    bcmFieldQualifyEthernetOamInterfaceClassMim = 364, /*  Ethernet OAM ClassId from Source VP
                                           Table. */
    bcmFieldQualifyEthernetOamInterfaceClassVxlan = 365, /*  Ethernet OAM ClassId from Source VP
                                           Table. */
    bcmFieldQualifyEthernetOamInterfaceClassVlan = 366, /*  Ethernet OAM ClassId from Source VP
                                           Table. */
    bcmFieldQualifyEthernetOamInterfaceClassPort = 367, /*  Ethernet OAM Class Id assigned for
                                           packet based on Ingress Port. */
    bcmFieldQualifyEthernetOamClassVlanTranslateKeyFirst = 368, /*  Ethernet OAM Class Id assigned for
                                           packet based on 1st Lookup in
                                           Vlan_Xlate table. */
    bcmFieldQualifyEthernetOamClassVlanTranslateKeySecond = 369, /*  Ethernet OAM Class Id assigned for
                                           packet based on 2nd Lookup in
                                           Vlan_Xlate table. */
    bcmFieldQualifyEthernetOamInterfaceClassMpls = 370, /*  Ethernet OAM Class Id assigned for
                                           packet based on Source VP table. */
    bcmFieldQualifyEthernetOamClassVpn = 371, /*  Ethernet OAM Class Id assigned for
                                           packet based on VFI table. */
    bcmFieldQualifyMplsOamHeaderBits0_31 = 372, /*  Mpls OAM Header First 4 Bytes. */
    bcmFieldQualifyMplsOamHeaderBits32_63 = 373, /*  Mpls OAM Header Second 4 Bytes. */
    bcmFieldQualifyMplsOamGALLabelOnly = 374, /*  MPLS OAM packets having GAL Label
                                           Only. */
    bcmFieldQualifyMplsOamUpperLabelDataDrop = 375, /* MPLS OAM Labels above the forwarding
                                           label. */
    bcmFieldQualifyMplsOamGALExposed = 376, /*  MPLS OAM packets having GAL exposed. */
    bcmFieldQualifyMplsOamACH = 377,    /*  MPLS OAM ACH Header. */
    bcmFieldQualifyMplsOamControlPktType = 378, /*  MPLS OAM control packets based on
                                           Packet Type. */
    bcmFieldQualifyMplsOamClassMplsSwitchLabel = 379, /*  MPLS OAM Class Id assigned for
                                           packet based on MPLS table. */
    bcmFieldQualifyOamHeaderBits0_31 = 380, /*  OAM Header First 4 Bytes. */
    bcmFieldQualifyOamHeaderBits32_63 = 381, /*  OAM Header Second 4 Bytes. */
    bcmFieldQualifyOamEgressClassVxlt = 382, /*  OAM Class Id assigned for packet
                                           based on EGR_VXLT table. */
    bcmFieldQualifyOamEgressClassPort = 383, /*  OAM Class Id assigned for packet
                                           based on Port table. */
    bcmFieldQualifyUdf = 384,           /* Qualify UDF selected data */
    bcmFieldQualifyOuterVlanActionRange = 385, /* compressed outer vlan tag */
    bcmFieldQualifyInnerVlanActionRange = 386, /* compressed inner vlan tag */
    bcmFieldQualifyIngressInterfaceClassVPort = 387, /* Class Id assigned for packet based on
                                           Ingress GPort */
    bcmFieldQualifySrcVlanGport = 388,  /* Qualify Source Vlan Gport */
    bcmFieldQualifyDstVlanGport = 389,  /* Qualify Destination Vlan Gport */
    bcmFieldQualifyOamType = 390,       /*  Qualify Ethernet/MPLS OAM. */
    bcmFieldQualifySrcVlanGports = 391, /* Qualify Source Vlan Gports */
    bcmFieldQualifyDstVlanGports = 392, /* Qualify Destination Vlan Gports */
    bcmFieldQualifySrcVxlanGports = 393, /* Qualify Source Vxlan Gports */
    bcmFieldQualifyDstVxlanGports = 394, /* Qualify Destination Vxlan Gports */
    bcmFieldQualifySrcWlanGports = 395, /* Qualify Source Wlan Gports */
    bcmFieldQualifyDstWlanGports = 396, /* Qualify Destination Wlan Gports */
    bcmFieldQualifySrcMplsGports = 397, /* Qualify Source Mpls Gports */
    bcmFieldQualifyDstMplsGports = 398, /* Qualify Destination Mpls Gports */
    bcmFieldQualifySrcGports = 399,     /* Qualify Source module/port pair or
                                           MPLS/MiM/WLAN/Niv/Vlan ports */
    bcmFieldQualifyDstGports = 400,     /* Qualify Destination Niv Gports */
    bcmFieldQualifySrcMimGports = 401,  /* Qualify Source Mim Gports */
    bcmFieldQualifyDstMimGports = 402,  /* Qualify Destination Mim Gports */
    bcmFieldQualifySrcNivGports = 403,  /* Qualify Source Niv Gports */
    bcmFieldQualifyDstNivGports = 404,  /* Qualify Destination Niv Gports */
    bcmFieldQualifySrcModPortGports = 405, /* Qualify Source ModPort Gports */
    bcmFieldQualifyLearnInVPort = 406,  /* Qualify Learnt Incoming VPort */
    bcmFieldQualifyStackingRoute = 407, /* Qualify Stacking Route */
    bcmFieldQualifyRxTrapStrength = 408, /* Qualify Rx Trap Strength */
    bcmFieldQualifyVxlanHeaderBits8_31 = 409, /* Qualify Reserved_1 field in Vxlan
                                           Header */
    bcmFieldQualifyVxlanHeaderBits56_63 = 410, /* Qualify Reserved_2 field in Vxlan
                                           Header */
    bcmFieldQualifyOamInLifIdValid = 411, /* Indicates if the LIF that has been
                                           found is an OAM LIF. */
    bcmFieldQualifyOamInLifId = 412,    /* Indicates the last OAM LIF that has
                                           been found. This value is valid only
                                           if SOC_PPC_FP_QUAL_VTT_OAM_LIF_VALID
                                           is set. */
    bcmFieldQualifyOamUpMep = 413,      /* It indicates if the OAM packet is
                                           UP-MEP (sent to a destination in the
                                           network, as opposed to a specific
                                           port). This term belongs to the OAM
                                           jargon. */
    bcmFieldQualifyOamSubtype = 414,    /* In OAM the packet type is specified
                                           in the OAM header and mapped to a
                                           subtype in the hardware. This value
                                           indicates the hardware type that it
                                           is mapped to. */
    bcmFieldQualifyOamHeaderOffset = 415, /* This field indicates the offset of
                                           the OAM header relative to the start
                                           of packet (as opposed to start of
                                           header-offset) */
    bcmFieldQualifyOamStampOffset = 416, /* This qualifier indicates the offset
                                           to the position, in the OAM header,
                                           where the ToD or counter value should
                                           be stamped
                                                                 relative to the
                                           start of packet (as opposed to start
                                           of header-offset[0]). */
    bcmFieldQualifyOamMepId = 417,      /* This qualifier indicates is according
                                           to the following encoding: OAM-ID
                                           (17) = OAM-2-Match ?
                                                                  {4'b0,
                                           OAM-2-ID (13)} : {1'b1, OAM-LIF (16)}
                                           If MEP is handled in OAMP, then the
                                           OAM-ID is the MEP-ID
                                                                      
                                           (equivalent to the index used to
                                           access the MEP DB). */
    bcmFieldQualifyOamMeterDisable = 418, /* This qualifier is an attribute that
                                           is passed to the PMF and can also be
                                           configured by the user per MEP.
                                                              It has no meaning
                                           other than being a qualifier in the
                                           PMF. */
    bcmFieldQualifyOamTsSystemHeader = 419, /* The entire OAM-TS is passed to the
                                           egress PMF (48 bit) */
    bcmFieldQualifyDstMulticastGroups = 420, /* Qualify Multicast Group ids */
    bcmFieldQualifyInterfaceInPorts = 421, /* Qualify Interface In Ports */
    bcmFieldQualifyDestVirtualPortValid = 422, /* Destination Virtual Port is valid. */
    bcmFieldQualifyInVPortWide = 423,   /* Wide attribute of Ingress VPort . */
    bcmFieldQualifyStageClass = 424,    /* Pseudo Compression Class Stage. */
    bcmFieldQualifyStageClassExactMatch = 425, /* Pseudo Compression Exact Match Class
                                           Stage. */
    bcmFieldQualifyFcoeOxID = 426,      /* FCoE Originator Exchange ID. */
    bcmFieldQualifyFcoeRxID = 427,      /* FCoE Responder Exchange ID. */
    bcmFieldQualifyIpProtocolClass = 428, /* IP Protocol ID Class. */
    bcmFieldQualifyEtherTypeClass = 429, /* EtherType Class. */
    bcmFieldQualifyL4SrcPortClass = 430, /* L4 Source Port Class. */
    bcmFieldQualifyL4DstPortClass = 431, /* L4 Destination Port Class. */
    bcmFieldQualifySrcIpClass = 432,    /* IPv4 SIP Class. */
    bcmFieldQualifySrcIpClassMsbNibble = 433, /* IPv4 SIP Class 4-bits. */
    bcmFieldQualifySrcIpClassLower = 434, /* IPv4 SIP Class Lower 16-bits. */
    bcmFieldQualifySrcIpClassUpper = 435, /* IPv4 SIP Class Upper 16-bits. */
    bcmFieldQualifySrcIp6Class = 436,   /* IPv6 SIP Class. */
    bcmFieldQualifySrcIp6ClassMsbNibble = 437, /* IPv6 SIP Class 4-bits. */
    bcmFieldQualifySrcIp6ClassLower = 438, /* Ipv6 SIP Class Lower 16-bits. */
    bcmFieldQualifySrcIp6ClassUpper = 439, /* IPv6 SIP Class Upper 16-bits. */
    bcmFieldQualifyFcoeOxIDClass = 440, /* FCoE Originator Exchange ID Class. */
    bcmFieldQualifyDstIpClass = 441,    /* IPv4 DIP Class. */
    bcmFieldQualifyDstIpClassMsbNibble = 442, /* IPv4 DIP Class 4-bits. */
    bcmFieldQualifyDstIpClassLower = 443, /* IPv4 DIP Class Lower 16-bits. */
    bcmFieldQualifyDstIpClassUpper = 444, /* IPv4 DIP Class Upper 16-bits. */
    bcmFieldQualifyDstIp6Class = 445,   /* IPv6 DIP Class. */
    bcmFieldQualifyDstIp6ClassMsbNibble = 446, /* Ipv6 DIP Class 4-bits. */
    bcmFieldQualifyDstIp6ClassLower = 447, /* IPv6 DIP Class Lower 16-bits. */
    bcmFieldQualifyDstIp6ClassUpper = 448, /* IPv6 DIP Class Upper 16-bits. */
    bcmFieldQualifyFcoeRxIDClass = 449, /* FCoE Responder Exchange ID Class. */
    bcmFieldQualifyFibreChanSrcIdClass = 450, /* Fibre Channel Src Id Class. */
    bcmFieldQualifyFibreChanSrcIdClassMsbNibble = 451, /* Fibre Channel Src Id Class 4-bits. */
    bcmFieldQualifyFibreChanSrcIdClassLower = 452, /* Fibre Channel Src Id Class Lower
                                           16-bits. */
    bcmFieldQualifyFibreChanSrcIdClassUpper = 453, /* Fibre Channel Src Id Class Upper
                                           16-bits. */
    bcmFieldQualifyFibreChanDstIdClass = 454, /* Fibre Channel Dst Id Class. */
    bcmFieldQualifyFibreChanDstIdClassMsbNibble = 455, /* Fibre Channel Dst Id Class 4-bits. */
    bcmFieldQualifyFibreChanDstIdClassLower = 456, /* Fibre Channel Dst Id Class Lower
                                           16-bits. */
    bcmFieldQualifyFibreChanDstIdClassUpper = 457, /* Fibre Channel Dst Id Class Upper
                                           16-bits. */
    bcmFieldQualifyTcpClassZero = 458,  /* TCP Class from TCP_FN0. */
    bcmFieldQualifyTosClassZero = 459,  /* TOS Class from TOS_FN0. */
    bcmFieldQualifyTtlClassZero = 460,  /* TTL Class from TTL_FN0. */
    bcmFieldQualifyTcpClassOne = 461,   /* TCP Class from TCP_FN1. */
    bcmFieldQualifyTosClassOne = 462,   /* TOS Class from TOS_FN1. */
    bcmFieldQualifyTtlClassOne = 463,   /* TTL Class from TTL_FN1. */
    bcmFieldQualifyOuterVlanPriCfi = 464, /*  Outer VLAN Pri + Cfi (4 bits). */
    bcmFieldQualifyForwardHdrSrcMac = 465, /*  FWD Header SA MAC (48 bits). */
    bcmFieldQualifyForwardHdrDstMac = 466, /*  FWD Header DA MAC (48 bits). */
    bcmFieldQualifyForwardHdrVlanId = 467, /*  FWD Header Vlan Id (12 bits). */
    bcmFieldQualifyDstSysPortExt = 468, /*  FTMH Destination System Port (DSP)
                                           Extension. */
    bcmFieldQualifyStageIngressExactMatch = 469, /*  Field Processor pipeline ingress
                                           exact match stage. */
    bcmFieldQualifyLearnExtension = 470, /* Learn Extension Data. */
    bcmFieldQualifyIpFragNonOrFirst = 471, /*  Non Fragmented IP Packet or First
                                           Fragment of IP Packet. */
    bcmFieldQualifyPacketLength = 472,  /*  Packet Length Excluding L2 Header(+
                                           Vlan Tag for Tagged packets). */
    bcmFieldQualifyGroupClass = 473,    /*  Field Group Class Id (Logical Table
                                           Class Id) assigned by pre-selection
                                           entry. */
    bcmFieldQualifyUdfClass = 474,      /*  Class ID associated to packet on UDF
                                           match. */
    bcmFieldQualifyInterfaceLookupClassPort = 475, /*  VFP Port Class Id that can be
                                           matched in Ingress Filter Processor. */
    bcmFieldQualifyHiGigDstMulticast = 476, /* Indicates if the HiGig Destination is
                                           a Multicast or Unicast. */
    bcmFieldQualifyHiGigDstMulticastGroupId = 477, /* Destination Multicast Group Id. */
    bcmFieldQualifyHiGigTrafficClass = 478, /* QOS provided by Fabric when
                                           forwarding the packet through Fabric. */
    bcmFieldQualifyHiGigDstModuleGport = 479, /* Destination Module ID. */
    bcmFieldQualifyHiGigDstPortGport = 480, /* Destination Port. */
    bcmFieldQualifyHiGigDstModPortGport = 481, /* Destination Module ID and Port. */
    bcmFieldQualifyHiGigSrcModuleGport = 482, /* Source Module ID. */
    bcmFieldQualifyHiGigSrcPortGport = 483, /* Source Port. */
    bcmFieldQualifyHiGigSrcModPortGport = 484, /* Source Module ID and Port. */
    bcmFieldQualifyHiGigLoadBalanceID = 485, /* A packet flow hashing index for
                                           distribution of packet flows through
                                           a multipath fabric. */
    bcmFieldQualifyHiGigColor = 486,    /* Indicates Traffic rate violation
                                           status of the packet measured by
                                           Ingress Module.This can be
                                           Green/Yellow/Red */
    bcmFieldQualifyHiGigIntCongestionNotification = 487, /* Indicates ECN and Transport Protocol
                                           Class Information generated by
                                           Ingress Module. */
    bcmFieldQualifyHiGigIngressTagged = 488, /* Tagged packet was ingressed at the
                                           HiGig Port. */
    bcmFieldQualifyHiGigDstTrunk = 489, /* Is the Destination port is Trunk
                                           Port? */
    bcmFieldQualifyHiGigDstTrunkId = 490, /* Destination HiGig Trunk Group Id. */
    bcmFieldQualifyHiGigIngressL3SwitchPkt = 491, /* Packet is L3 switched at the Source
                                           Port */
    bcmFieldQualifyHiGigLabel = 492,    /* 20 Bit Label Present in HiGig Header.
                                           Label Type can be QTag/Mirror
                                           Classification Tag/System Ingress
                                           Port. */
    bcmFieldQualifyHiGigReplicationId = 493, /* Replication ID used to identify
                                           Packet modifications to be applied
                                           for this replicated copy. */
    bcmFieldQualifyHiGigVlan = 494,     /* Vlan tag information in HiGig Header */
    bcmFieldQualifyHiGigPortFilteringMode = 495, /* Port Filtering mode used for
                                           Multicast packets. */
    bcmFieldQualifyHiGigSrcTrunk = 496, /* Indicates the packet is originally
                                           ingressed on Trunk Port. */
    bcmFieldQualifyHiGigIngressClassificationTag = 497, /* Classification Tag assigned to packet
                                           in Ingress Filter Processor(IFP). */
    bcmFieldQualifyHiGigEgressMcast = 498, /* Indicates whether the packet is sent
                                           to a single point or a multi-point
                                           tree within the egress chip. */
    bcmFieldQualifyHiGigVni = 499,      /* Virtual Network Identifier (ISID)
                                           which identifies the service instance
                                           for this packet. */
    bcmFieldQualifyHiGigDstGport = 500, /* The destination VP index for egress
                                           chip packet modification and
                                           encapsulation. */
    bcmFieldQualifyHiGigMulticastIndex = 501, /* The destination multicast index for
                                           egress chip packet modification and
                                           encapsulation. */
    bcmFieldQualifyHiGigVpReplicationId = 502, /* The destination Replication ID for
                                           egress chip packet modification and
                                           encapsulation. */
    bcmFieldQualifyHiGigSrcGport = 503, /* The Source VP index from which the
                                           packet ingressed the system. */
    bcmFieldQualifyHiGigProtectionSwitchingStatus = 504, /* This indicates the egress packet
                                           processor to use working / protection
                                           path based on the decision made in
                                           the ingress packet processor. */
    bcmFieldQualifyHiGigMirrorToVp = 505, /* Indicates whether the packet is a
                                           mirrored copy or Switched Copy */
    bcmFieldQualifyHiGigDstType = 506,  /* Indicates whether the destination is
                                           Virtual or Physical. */
    bcmFieldQualifyHiGigSrcType = 507,  /* Indicates whether the source is
                                           Virtual or Physical. */
    bcmFieldQualifyHiGigOffloadEngineClassificationTag = 508, /* Opaque field generated by the ACL
                                           rule that triggered the redirect to
                                           the offload engine. */
    bcmFieldQualifyHiGigOffloadEnginePktPriNew = 509, /* New 802.1p bits */
    bcmFieldQualifyHiGigOffloadEngineDscpNew = 510, /* New DSCP value. */
    bcmFieldQualifyLoopBackQueue = 511, /* Loopback Port Queue Number. It is
                                           used in the MMU for buffer account
                                           and flow control of traffic received
                                           on the internal loopback port. */
    bcmFieldQualifyLoopBackSrcGport = 512, /* Source field for the packet. It can
                                           be a Virtual/Physical port. */
    bcmFieldQualifyPktIsVisible = 513,  /* Triggers capture of intermediate
                                           packet processing results for this
                                           packet. */
    bcmFieldQualifyLoopBackCpuMasqueradePktProfile = 514, /* Pointer to indicate disposition of
                                           these packets in the Ingress
                                           Pipeline. */
    bcmFieldQualifyLoopBackColor = 515, /* Indicates Traffic rate violation
                                           status of the packet measured by
                                           Ingress Module.This can be
                                           Green/Yellow/Red. */
    bcmFieldQualifyLoopBackTrafficClass = 516, /* QOS provided by Fabric when
                                           forwarding the packet through Fabric. */
    bcmFieldQualifyLoopBackPacketProcessingPort = 517, /* Device Port Number which is to be
                                           used for processing the packet in the
                                           Ingress Pipeline. This must be a port
                                           that is programmed in the device to
                                           be a front panel (Ethernet) port. */
    bcmFieldQualifyMixedSrcClassId = 518, /* Mixed Source ID value used in
                                           Pre-selection. */
    bcmFieldQualifyITag = 519,          /* Service Instance Tag in MAC-in-MAC. */
    bcmFieldQualifyInterfaceIngressKeySelectClassPort = 520, /* Ingress port class id assigned to
                                           port by port table. */
    bcmFieldQualifyBfdYourDiscriminator = 521, /* BFD Your Discriminator. */
    bcmFieldQualifyCpuVisibilityPacket = 522, /* CPU visibility packet. */
    bcmFieldQualifyDstL2MulticastGroup = 523, /* Destination L2 Multicast Group Id. */
    bcmFieldQualifyDstL3MulticastGroup = 524, /* Destination L3 Multicast Group Id. */
    bcmFieldQualifyExactMatchHitStatus = 525, /* Exact Match Hit Status. */
    bcmFieldQualifyExactMatchActionClassId = 526, /* Exact Match Action Class Identifier. */
    bcmFieldQualifyExactMatchGroupClassId = 527, /* Exact Match Group Class Identifier. */
    bcmFieldQualifyL2PayLoad = 528,     /* Qualify Bytes after L2 Header */
    bcmFieldQualifyCustomHeaderPkt = 529, /* Qualify Custom Header packets. */
    bcmFieldQualifyCustomHeaderData = 530, /* Qualify the content of Custom Header
                                           32-bits. */
    bcmFieldQualifyMimlPkt = 531,       /* Qualify for MiML or non-MiML packet. */
    bcmFieldQualifyMimlSrcMac = 532,    /* Mac-in-Mac Lite(MiML) Source MAC
                                           Address. */
    bcmFieldQualifyMimlDstMac = 533,    /* Mac-in-Mac Lite(MiML) Destination MAC
                                           Address. */
    bcmFieldQualifyMimlVlan = 534,      /* Mac-in-Mac Lite(MiML) VLAN ID, Cfi,
                                           Priority. */
    bcmFieldQualifyMimlVlanId = 535,    /* Mac-in-Mac Lite(MiML) VLAN ID. */
    bcmFieldQualifyMimlVlanPri = 536,   /* Mac-in-Mac Lite(MiML) VLAN Priority. */
    bcmFieldQualifyMimlVlanCfi = 537,   /* Mac-in-Mac Lite(MiML) VLAN Cfi. */
    bcmFieldQualifyMimlInnerTag = 538,  /* Mac-in-Mac Lite(MiML) inner tag
                                           fields {MIML_PKT_TYPE, MIML_IID,
                                           MIML_RSVD, MIML_LENGTH}. */
    bcmFieldQualifyCapwapHdrType = 539, /* The TYPE field in CAPWAP header. */
    bcmFieldQualifyCapwapHdrRid = 540,  /* The RID field in CAPWAP header. */
    bcmFieldQualifyCapwapPayloadSOF = 541, /* It indicates the CAPWAP payload is
                                           non-fragmented or first fragment. */
    bcmFieldQualifyCapwapPayloadDstMac = 542, /* destination MAC address in CAPWAP
                                           payload. */
    bcmFieldQualifyCapwapPayloadSrcMac = 543, /* source MAC address in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadEtherType = 544, /* Ethernet type in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadOuterVlan = 545, /* Outer VLAN tag in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadOuterVlanId = 546, /* Outer VLAN id in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadOuterVlanPri = 547, /* Outer VLAN priority in CAPWAP
                                           payload. */
    bcmFieldQualifyCapwapPayloadOuterVlanCfi = 548, /* Outer VLAN CFI in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadInnerVlan = 549, /* Inner VLAN tag in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadInnerVlanId = 550, /* Inner VLAN id in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadInnerVlanPri = 551, /* Inner VLAN priority in CAPWAP
                                           payload. */
    bcmFieldQualifyCapwapPayloadInnerVlanCfi = 552, /* Inner VLAN CFI in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadVlanFormat = 553, /* VLAN tag format in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadSip = 554, /* IPv4 source address in CAPWAP
                                           payload. */
    bcmFieldQualifyCapwapPayloadDip = 555, /* IPv4 destination address in CAPWAP
                                           payload. */
    bcmFieldQualifyCapwapPayloadSip6 = 556, /* IPv6 source address in CAPWAP
                                           payload. */
    bcmFieldQualifyCapwapPayloadDip6 = 557, /* IPv6 destination address in CAPWAP
                                           payload. */
    bcmFieldQualifyCapwapPayloadIpProtocol = 558, /* IP Protocol value in CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadTos = 559, /* Type-of-Service value in CAPWAP
                                           payload. */
    bcmFieldQualifyCapwapPayloadL4DstPort = 560, /* UDP/TCP destination port number in
                                           CAPWAP payload. */
    bcmFieldQualifyCapwapPayloadL4SrcPort = 561, /* UDP/TCP source port number in CAPWAP
                                           payload. */
    bcmFieldQualifyCapwapPayloadL3HdrParseable = 562, /* It indicates the parser can parse
                                           ipv4/ipv6 header in the wireless
                                           payload. */
    bcmFieldQualifyCapwapPayloadL4HdrParseable = 563, /* It indicates the parser can parse
                                           UDP/TCP header in the wireless
                                           payload. */
    bcmFieldQualifyVlanAction = 564,    /* Vlan Action Set ID. */
    bcmFieldQualifyDownMepSatTerminated = 565, /* Qualify Rx Down Mep SAT terminated
                                           hit status. */
    bcmFieldQualifyDstMultipathOverlay = 566, /* Qualify on ECMP groups with overlay
                                           flag */
    bcmFieldQualifyDstMultipathUnderlay = 567, /* Qualify on ECMP groups with Underlay
                                           flag */
    bcmFieldQualifyStpState = 568,      /* Qualify on VLAN STG STP states. */
    bcmFieldQualifyHiGigMirrorOrSwitchPkt = 569, /* Indicates whether the packet has to
                                           be mirrored and switched. */
    bcmFieldQualifyHiGigPreserveFlags = 570, /* Indicates the DSCP/DOT1P flags should
                                           not be modified. */
    bcmFieldQualifyHiGigMplsPkt = 571,  /* When set, indicates packet contains a
                                           20 bit label. Otherwise packet
                                           contains MPLS information. */
    bcmFieldQualifyHiGigDoNotFlags = 572, /* Donot Learn(do not perform MAC
                                           learning) and Donot Modify(Send the
                                           packet to destination unmodified)
                                           Flags. */
    bcmFieldQualifyHiGigVpPreserveFlags = 573, /* Indicates the VP not to modify the
                                           DSCP/DOT1P flags. */
    bcmFieldQualifyHiGigOffloadEngineVxltStatus = 574, /* Indicates whether the Packet has been
                                           through Vlan Translation. */
    bcmFieldQualifyHiGigForwardingType = 575, /* Indicates the forwarding type whether
                                           it is a control/L2/L3/broadcast
                                           packet. */
    bcmFieldQualifyHiGigLabelType = 576, /* Indicates contents of Label. It can
                                           be a QTag/ Mirror Classification Tag/
                                           Original System Ingress Port through
                                           which the packet ingressed/ Original
                                           HiGig+ Overlay. */
    bcmFieldQualifyHiGigExtendedHeaderPresent = 577, /* Indicates whether extended header is
                                           present in the HiGig header or not. */
    bcmFieldQualifyHiGigVpLagFailoverPacket = 578, /* When set, it indicates that the
                                           packet is redirected by a LAG
                                           failover and the packet must not be
                                           redirected again by LAG failover. */
    bcmFieldQualifyHiGigOffloadEnginePreserveDscp = 579, /* Indicates offload engine not to
                                           change the DSCP in the packet. */
    bcmFieldQualifyHiGigOffloadEnginePreserveDot1p = 580, /* Indicates offload engine not to
                                           change the DOT1P in the packet. */
    bcmFieldQualifyHiGigOffloadEngineDeferredFlags = 581, /* Indicates whether a drop action/DSCP
                                           change/802.1 change was deferred. */
    bcmFieldQualifyHiGigOffloadEngineSrcType = 582, /* This applies to packets destined to
                                           Offload Engine and this indicates
                                           whether the packet is ingressed on a
                                           Physical port / Virtual Port. */
    bcmFieldQualifySystemPortBitmap = 583, /* To qualify on a port bitmap generated
                                           from SGLP. */
    bcmFieldQualifySourceGportBitmap = 584, /* To qualify on a port bitmap generated
                                           from SVP. */
    bcmFieldQualifyDevicePortBitmap = 585, /* To qualify on a port bitmap generated
                                           from device ingress port. */
    bcmFieldQualifyTosLower4Bits = 586, /* To qualify on Lower 4bits of TOS. */
    bcmFieldQualifyOamEgressClass2Vxlt = 587, /* To qualify on OAM Class Id assigned
                                           for packet based on Second Lookup in
                                           EGR_VLAN_XLATE table. */
    bcmFieldQualifyOamEgressVxltFirstHit = 588, /* To qualify on First EGR_VXLT lookup
                                           hit status. */
    bcmFieldQualifyOamEgressVxltSecondHit = 589, /* To qualify on Second EGR_VXLT lookup
                                           hit status. */
    bcmFieldQualifyOamDownMEPLoopbackPacket = 590, /* Indicates Down-MEP Loopback or
                                           Down-SAT Latching Loopback packet. */
    bcmFieldQualifyOamEgressPortUnicastDstMacHit = 591, /* To qualify on EGR_PORT MAC DA hit
                                           status. */
    bcmFieldQualifyOamSat = 592,        /* Pseudo qualifier for OAM/SAT. */
    bcmFieldQualifyIngressDropEthernetOamControl = 593, /* To qualify on Drop reasons for
                                           Ethernet Oam Control Packets based on
                                           MEP type. */
    bcmFieldQualifyIngressDropEthernetOamData = 594, /* To qualify on Drop reasons for
                                           Ethernet Oam Data Packets based on
                                           MEP type. */
    bcmFieldQualifyIngressDropMplsOamControl = 595, /* To qualify on Drop reasons for Mpls
                                           Oam Control Packets based on MEP
                                           type. */
    bcmFieldQualifyIngressDropMplsOamData = 596, /* To qualify on Drop reasons for Mpls
                                           Oam Data Packets based on MEP type. */
    bcmFieldQualifyEgressClassVxlan = 597, /* Class assigned by Egress Vxlan */
    bcmFieldQualifyOamEgressEtherType = 598, /* To qualify on OAM/SAT Ethernet Type.
                                           Allowed values are 0x8902 and 0x88b7 */
    bcmFieldQualifyOamEgressMulticastMacHit = 599, /* To qualify on Multicast OAM Dest Mac
                                           Address Range Hit. Allowed values
                                           BCM_FIELD_OAM_MULTICAST_MAC_XXX */
    bcmFieldQualifyTrunkMemberSourceModuleId = 600, /* To qualify on Module ID on a trunk
                                           member port. */
    bcmFieldQualifyOamEgressClassSrcMac = 601, /* To qualify on SourceMac Class ID
                                           assigned for packet based on Hit in
                                           EGR_OAM_SAT_MISC_MAC_SA_0.15
                                           registers. */
    bcmFieldQualifyMyStation2Hit = 602, /* Applicable when RIOT is enabled or l2
                                           entry is used as my station (by
                                           enabling config
                                           l2_entry_used_as_my_station) is set.
                                           To qualify on Overlay L2 termination
                                           lookup hit status for tunnel packets
                                           or Routing hit status for non-tunnel
                                           packets or when l2 entry added as my
                                           station is hit. */
    bcmFieldQualifyExternalValue4 = 603, /* External lookup 4 value */
    bcmFieldQualifyExternalValue5 = 604, /* External lookup 5 value */
    bcmFieldQualifyExternalHit4 = 605,  /* External lookup 4 hit */
    bcmFieldQualifyExternalHit5 = 606,  /* External lookup 5 hit */
    bcmFieldQualifyGeneratedTtl = 607,  /* Get match criteria for
                                           bcmFieldQualifyGeneratedTtl qualifier
                                           from the field entry. */
    bcmFieldQualifyIpMulticastCompatible = 608, /* Packet is compatible for multicast. */
    bcmFieldQualifyEgressClassTunnel = 609, /* Class assigned by next hop tunnel */
    bcmFieldQualifyEgressClassL3InterfaceTunnel = 610, /* Class assigned by egress interface
                                           tunnel */
    bcmFieldQualifyStaggeredValue0 = 611, /* Value taken from action result 0 in
                                           staggered mode. */
    bcmFieldQualifyStaggeredValue1 = 612, /* Value taken from action result 1 in
                                           staggered mode. */
    bcmFieldQualifyStaggeredValue2 = 613, /* Value taken from action result 2 in
                                           staggered mode. */
    bcmFieldQualifyStaggeredValue3 = 614, /* Value taken from action result 3 in
                                           staggered mode. */
    bcmFieldQualifyStaggeredDirectValue = 615, /* Value taken from KAPS payload in
                                           staggered mode. */
    bcmFieldQualifyStaggeredPreselProfile0 = 616, /* Program selection profile value taken
                                           from action result 0 in staggered
                                           mode. */
    bcmFieldQualifyStaggeredPreselProfile1 = 617, /* Program selection profile value taken
                                           from action result 1 in staggered
                                           mode. */
    bcmFieldQualifyStaggeredPreselProfile2 = 618, /* Program selection profile value taken
                                           from action result 2 in staggered
                                           mode. */
    bcmFieldQualifyStaggeredPreselProfile3 = 619, /* Program selection profile value taken
                                           from action result 3 in staggered
                                           mode. */
    bcmFieldQualifyStaggeredPreselProfileDirect = 620, /* Program selection profile value taken
                                           from KAPS payload 0 in staggered
                                           mode. */
    bcmFieldQaulifyPreselId = 621,      /* Program selection value in 2nd Pass
                                           according to the 1st Pass
                                           preselector-id. */
    bcmFieldQualifyEthernetData = 622,  /* Egress data qualifier base only.
                                           NWK_RCRDS Ethernet data field,
                                           containing Ethernet tags (if any) and
                                           EtherType. */
    bcmFieldQualifyPreemptablePacket = 623, /* Preemptable Packet */
    bcmFieldQualifyVxlanClassValid = 624, /* VXLAN Class is valid or not */
    bcmFieldQualifyVxlanPacket = 625,   /* Indicates whether it is a VXLAN
                                           packet */
    bcmFieldQualifyVxlanVnidVlanTranslateHit = 626, /* VXLAN Network Identifier (VN_ID)
                                           lookup hit through vlan translation */
    bcmFieldQualifyVxlanPayloadVlanFormat = 627, /* VLAN tag format in VXLAN payload */
    bcmFieldQualifyTunnelPayloadDstMac = 628, /* Destination MAC address in Tunnel
                                           payload */
    bcmFieldQualifyTunnelPayloadSrcMac = 629, /* Source MAC address in Tunnel payload */
    bcmFieldQualifyTunnelPayloadEtherType = 630, /* Ethernet type in Tunnel payload */
    bcmFieldQualifyTunnelPayloadOuterVlan = 631, /* Outer VLAN tag in Tunnel payload */
    bcmFieldQualifyTunnelPayloadOuterVlanId = 632, /* Outer VLAN id in Tunnel payload */
    bcmFieldQualifyTunnelPayloadOuterVlanPri = 633, /* Outer VLAN priority in Tunnel payload */
    bcmFieldQualifyTunnelPayloadOuterVlanCfi = 634, /* Outer VLAN CFI in Tunnel payload */
    bcmFieldQualifyTunnelPayloadSip = 635, /* IPv4 source address in Tunnel payload */
    bcmFieldQualifyTunnelPayloadDip = 636, /* IPv4 destination address in Tunnel
                                           payload */
    bcmFieldQualifyTunnelPayloadSip6 = 637, /* IPv6 source address in Tunnel payload */
    bcmFieldQualifyTunnelPayloadDip6 = 638, /* IPv6 destination address in Tunnel
                                           payload */
    bcmFieldQualifyTunnelPayloadIpProtocol = 639, /* IP Protocol value in Tunnel payload */
    bcmFieldQualifyTunnelPayloadL4DstPort = 640, /* UDP/TCP destination port number in
                                           Tunnel payload */
    bcmFieldQualifyTunnelPayloadL4SrcPort = 641, /* UDP/TCP source port number in Tunnel
                                           payload */
    bcmFieldQualifyRoceBthOpcode = 642, /* To qualify on OP code on RoCEv1 /
                                           RoCEv2 Base Transport Header(BTH) */
    bcmFieldQualifyRoceBthPartitionKey = 643, /* To qualify on partition key on RoCEv1
                                           / RoCEv2  Base Transport Header (BTH) */
    bcmFieldQualifyRoceBthDstQueuePair = 644, /* To qualify on destination queue pair
                                           on RoCEv1 / RoCEv2 Base Transport
                                           Header(BTH) */
    bcmFieldQualifyRoceBthFlags = 645,  /* To qualify on flags on RoCEv1 /
                                           RoCEv2 Base Transport Header(BTH) */
    bcmFieldQualifyRoceVer1Pkt = 646,   /* Indicate whether it is a RoCEv1
                                           packet */
    bcmFieldQualifyRoceVer2Pkt = 647,   /* Indicate whether it is a RoCEv2
                                           packet */
    bcmFieldQualifySrcPortSRType = 648, /* SR (Seamless Redundancy) port type
                                           (bcmFieldPortSRTypeXXX) assigned to
                                           the source port */
    bcmFieldQualifyDstPortSRType = 649, /* SR (Seamless Redundancy) port type
                                           (bcmFieldPortSRTypeXXX) assigned to
                                           the destination port */
    bcmFieldQualifySrcPortSRRoleInterlink = 650, /* Indicates whether the SR role for the
                                           source is an interlink */
    bcmFieldQualifyDstPortSRRoleInterlink = 651, /* Indicates whether the SR role for the
                                           destination is an interlink */
    bcmFieldQualifySrcPortSRMode = 652, /* The SR port mode
                                           (bcmFieldSRPortModeXXX) assigned to
                                           the source port */
    bcmFieldQualifyDstPortSRMode = 653, /* The SR port mode
                                           (bcmFieldSRPortModeXXX) assigned to
                                           the destination port */
    bcmFieldQualifySrcPortSRNetId = 654, /* The SR NET ID (0~7) assigned to the
                                           source port */
    bcmFieldQualifyDstPortSRNetId = 655, /* The SR NET ID (0~7) assigned to the
                                           destination port */
    bcmFieldQualifySrcPortSRLanId = 656, /* The SR LAN ID (0 for LAN A and 1 for
                                           LAN B) assigned to the source port */
    bcmFieldQualifyDstPortSRLanId = 657, /* The SR LAN ID (0 for LAN A and 1 for
                                           LAN B) assigned to the destination
                                           port */
    bcmFieldQualifySRTagType = 658,     /* The SR (Seamless Redundancy) tag type
                                           (bcmFieldSRTagTypeXXX) identified in
                                           this packet */
    bcmFieldQualifySRLanId = 659,       /* The SR LAN ID (0 for LAN A and 1 for
                                           LAN B) in the SR tag. Valid only if
                                           the packet contains an SR tag. */
    bcmFieldQualifySRNetId = 660,       /* The SR NET ID (0~7) in the SR tag.
                                           Valid only if the packet contains an
                                           SR tag. */
    bcmFieldQualifyVlanSREnable = 661,  /* Indicates whether SR (Seamless
                                           Redundancy) is enabled in this VLAN */
    bcmFieldQualifyVlanSRLanId = 662,   /* Indicates the SR LAN ID (0 for LAN A
                                           and 1 for LAN B) for this VLAN. Valid
                                           only if SR is enabled for this VLAN. */
    bcmFieldQualifySRFlowId = 663,      /* SR flow ID for the SR flow that the
                                           packet belongs to */
    bcmFieldQualifyL2DestSRNodeType = 664, /* SR node type (bcmFieldSRNodeTypeXXX)
                                           for the destination address */
    bcmFieldQualifySRNetIdMatched = 665, /* Indicates whether the SR packet's NET
                                           ID matches the configured NET ID on
                                           the destination port */
    bcmFieldQualifySRSrcNodeIsSan = 666, /* Indicates whether the source address
                                           belongs to an SR SAN node */
    bcmFieldQualifySRSupervisionType = 667, /* The SR supervision type
                                           (bcmFieldSRSupervisionTypeXXX) if
                                           it's an SR supervision packet */
    bcmFieldQualifySRError = 668,       /* Indicates SR errors for the packet */
    bcmFieldQualifyL2SrcMulticastHit = 669, /* Indicates L2 source address found on
                                           the correct multicast group. */
    bcmFieldQualifyL2DstMulticastHit = 670, /* Indicates L2 destination address
                                           found and result is a multicast
                                           group. */
    bcmFieldQualifySRDuplicate = 671,   /* SR (Seamless Redundancy): Indicates
                                           whether this packet is a duplicate SR
                                           packet */
    bcmFieldQualifyTsnFlowId = 672,     /* TSN (Time-Sensitive Networking) flow
                                           ID for the TSN flow that the packet
                                           belongs to */
    bcmFieldQualifyExternalValue6 = 673, /* External lookup 6 value */
    bcmFieldQualifyExternalValue7 = 674, /* External lookup 7 value */
    bcmFieldQualifyExternalHit6 = 675,  /* External lookup 6 hit */
    bcmFieldQualifyExternalHit7 = 676,  /* External lookup 7 hit */
    bcmFieldQualifyMirrorDest = 677,    /* Link Layer mirror command value */
    bcmFieldQualifyPacketIsIEEE1588 = 678, /* Indicating whether the packet is 1588 */
    bcmFieldQualifyIEEE1588Encapsulation = 679, /* IEEE-1588 Encapsulation according to
                                           bcm_field_IEEE1588Encap_t */
    bcmFieldQualifyIEEE1588CompensateTimeStamp = 680, /* IEEE-1588 update time stamp */
    bcmFieldQualifyIEEE1588Command = 681, /* Command used by egress pipeline,
                                           indicating if CF(correction field)
                                           needs to be update */
    bcmFieldQualifyIEEE1588HeaderOffset = 682, /* This field indicates the offset of
                                           the IEEE-1588 header. Offset in bytes */
    bcmFieldQualifyHeaderFormatExtension = 683, /* Qualify on header format extension
                                           from profile of header format */
    bcmFieldQualifyMacSecTagPresent = 684, /* Qualifies the MACSEC tagged packets */
    bcmFieldQualifyMacSecTag = 685,     /* Qualifies on the SecTag field in
                                           MACSEC tagged packets */
    bcmFieldQualifyMacSecDstMacRangeHit = 686, /* Qualifies hit on Destination MAC
                                           addresses range; which is configured
                                           by API
                                           bcm_field_macsec_DstMacRange_set */
    bcmFieldQualifyFromMacSecPort = 687, /* Packet forwarded through the internal
                                           MACSEC port */
    bcmFieldQualifyMacSecFlow = 688,    /* Qualifies on the MACSEC packet flow */
    bcmFieldQualifyEgressBridgedForwardingDataHigh = 689, /* Used for ACL-while-bridging. Contains
                                           the 64 bits of packet data starting
                                           80 bits after SA */
    bcmFieldQualifyEgressBridgedForwardingDataLow = 690, /* Used for ACL-while-bridging. Contains
                                           the 56 bits of packet data starting
                                           144 bits after SA */
    bcmFieldQualifyEgressBridgedAclDataHigh = 691, /* Used for ACL-while-bridging. Contains
                                           the 40 bits of packet data starting
                                           200 bits after SA */
    bcmFieldQualifyEgressBridgedAclDataLow = 692, /*  Used for ACL-while-bridging.
                                           Contains the 32 bits of packet data
                                           starting 240 bits after SA */
    bcmFieldQualifySysHdrType = 693,    /* Qualifier is to match on incoming
                                           packet system header type */
    bcmFieldQualifySubportTagPresent = 694, /* Match on packet's subport tag */
    bcmFieldQualifyNetworkTagType = 695, /* Match on Network (VnTag/Etag) */
    bcmFieldQualifyCnTagPresent = 696,  /* Match on congestion tag */
    bcmFieldQualifyL2PktType = 697,     /* Match on L2 Packet Type
                                           (Ethernet/Snap/Llc/None) */
    bcmFieldQualifyPktType = 698,       /* Match on Packet type after L2 header */
    bcmFieldQualifyMplsCwPresent = 699, /* Match on MPLS Control word */
    bcmFieldQualifyMplsMcastEthertypePresent = 700, /* Match on Multicast MPLS EtherType */
    bcmFieldQualifyIpv4OptionHdrType = 701, /* Match on IPv4 Option header types. */
    bcmFieldQualifyIpv6ExtensionHdrType = 702, /* Match on IPv6 Extension header types. */
    bcmFieldQualifyOverlayVlanFormat = 703, /* Match on Overlay vlan tag format. */
    bcmFieldQualifyOverlayL2PktType = 704, /* Match on Overlay L2 Packet type */
    bcmFieldQualifyOverlayPktType = 705, /* Match on Overlay Packet type */
    bcmFieldQualifyOverlayIpv4OptionHdrType = 706, /* Match on Overlay IPv4 option header
                                           types */
    bcmFieldQualifyOverlayIpv6ExtensionHdrType = 707, /* Match on Overlay IPv6 option header
                                           types */
    bcmFieldQualifyFrontPanelPkt = 708, /* Match on packets incoming from Front
                                           panel ports */
    bcmFieldQualifyHiGigProxyTunnelType = 709, /* Match on incoming HiGig Proxy tunnel
                                           types */
    bcmFieldQualifyIpFragPkt = 710,     /* Match on IP Fragment packet */
    bcmFieldQualifyOuterPriTaggedPkt = 711, /* Match on Outer priority tagged packet */
    bcmFieldQualifyIpInIpPkt = 712,     /* Match on IP in IP packet */
    bcmFieldQualifyIpmcV4Pkt = 713,     /* Match on packets with IPMC IPv4
                                           packet */
    bcmFieldQualifyIpmcV6Pkt = 714,     /* Match on packets with IPMC IPv6
                                           packet */
    bcmFieldQualifyIpChecksumOkPkt = 715, /* Match on IP packet with Checksum OK */
    bcmFieldQualifyNetworkTagMulticastPkt = 716, /* Match on multicast packets with VNTAG
                                           or ETAG */
    bcmFieldQualifyIpTtlZeroPkt = 717,  /* Match on IP packet with Zero TTL
                                           value */
    bcmFieldQualifyPimBidirDfStatus = 718, /* Match on PIM Bi-directional
                                           Designated Forwarder status */
    bcmFieldQualifyInterfaceClassL2Type = 719, /* Qualifier is to to indicate whether
                                           the Interface L2 Class ID is from VFI
                                           or VLAN */
    bcmFieldQualifyIntPktVersionOne = 720, /* Match on the INT (Inband-Telemetry)
                                           Version One. The data '1' indicates
                                           the INT version is set to 1, 0
                                           indicates version other than 1. */
    bcmFieldQualifyIntPktOverflowed = 721, /* Match on the INT (Inband-Telemetry)
                                           Header Overflow Bit. The data '1'
                                           indicates the frame is full of
                                           telemetry information. The INT header
                                           current length exceeds max length and
                                           can't add any more metadata to it. */
    bcmFieldQualifyIntPktLengthValid = 722, /* Match on the INT (Inband-Telemetry)
                                           valid length, the data '1' indicates
                                           the difference between INT Header max
                                           length and current length is greater
                                           than INT Metadata length, that is the
                                           frame is capable of accommodating INT
                                           metadata. */
    bcmFieldQualifyIntPktType = 723,    /* Match on the INT (Inband-Telemetry)
                                           Message Type (bcmFieldIntPktTypeXX). */
    bcmFieldQualifyIntPktFinalHop = 724, /* Match on the INT (Inband-Telemetry)
                                           Maximum Hop Limit Check, the data '1'
                                           indicates INT exceeds Max Hop Count
                                           (Hop Limit >= Hop Count). */
    bcmFieldQualifyTunnelSubType = 725, /*  TunnelType (bcmFieldTunnelSubTypeXXX
                                           in bcm_field_tunnel_subtype_t). */
    bcmFieldQualifyNshServicePathId = 726, /*  Match on NSH Service Path ID. */
    bcmFieldQualifyNshServiceIndex = 727, /*  Match on NSH Service Index. */
    bcmFieldQualifyKeyGenVar = 728,     /*  Match on Key Gen Var */
    bcmFieldQualifyRoeFrameType = 729,  /*  Match on Roe frame type set in MPLS
                                           entry for a MPLS packet or based on
                                           UDP port number for an IP tunnel
                                           packet. Roe frame types are defined
                                           by bcm_field_roe_frame_type_t. */
    bcmFieldQualifyBfdGoodPkt = 730,    /* Match on BFD Good packet (Good here
                                           represents the valid TTL range for
                                           1-hop and M-hop). */
    bcmFieldQualifyBfdPktWithDstIpLoopbackAddr = 731, /* Match whether the incoming BFD packet
                                           has destination loopback IP Address. */
    bcmFieldQualifyMplsControlPkt = 732, /* Match on MPLS Control Packet (packet
                                           with VCCV_1/2/3/4 and
                                           [LSP]/GAL/G-ACH). */
    bcmFieldQualifyStageIngressFlowtracker = 733, /*  Field Processor pipeline ingress
                                           flowtracker stage. */
    bcmFieldQualifyInterfaceClassMplsLookup1 = 734, /* Qualifies on Class identifier derived
                                           from MPLS label 1 entry Lookup. */
    bcmFieldQualifyInterfaceClassMplsLookup2 = 735, /* Qualifies on Class identifier derived
                                           from MPLS label 2 entry Lookup. */
    bcmFieldQualifyInterfaceClassMplsLookup3 = 736, /* Qualifies on Class identifier derived
                                           from MPLS label 3 entry Lookup. */
    bcmFieldQualifyInterfaceClassL3Tunnel = 737, /* Qualifies on Class identifier derived
                                           from L3 Tunnel. */
    bcmFieldQualifyBfdPktVersionOne = 738, /* Match on BFD Version One. The data
                                           '1' indicates the ersion as 1, 0
                                           indicates version other than 1. */
    bcmFieldQualifyGenevePktVersionZero = 739, /* Match on Geneve Version Zero. The
                                           data '1' indicates the version as 0,
                                           '0' indicates version other than 0. */
    bcmFieldQualifyGpePktVersionZero = 740, /* Match on Gpe Version Zero. The data
                                           '1' indicates the version as 0, '0'
                                           indicates version other than 0. */
    bcmFieldQualifyGenevePktWithOam = 741, /* Match on BFD over Geneve Packet. */
    bcmFieldQualifyGpePktWithOam = 742, /* Match on BFD over Gpe Packet. */
    bcmFieldQualifyInnerBfdPktVersionOne = 743, /* Match on Inner BFD Version One. The
                                           data '1' indicates the ersion as 1, 0
                                           indicates version other than 1. */
    bcmFieldQualifyPktDstAddrType = 744, /*  Match on Packet destination address
                                           type. */
    bcmFieldQualifyPktInnerDstAddrType = 745, /*  Match on Packet inner destination
                                           address type. */
    bcmFieldQualifyInnerL4Ports = 746,  /*  Four bytes after Inner L3 header are
                                           available. */
    bcmFieldQualifyTafEnable = 747,     /* Qualifies on TAF (Time Aware
                                           Filtering) enable */
    bcmFieldQualifyTafGateId = 748,     /* Qualifies on TAF(Time Aware
                                           Filtering) gate id */
    bcmFieldQualifyTafGateState = 749,  /* Qualifies on TAF(Time Aware
                                           Filtering) gate state */
    bcmFieldQualifyTafCosProfile = 750, /* Qualifies on TAF(Time Aware
                                           Filtering) CoS profile */
    bcmFieldQualifyElkRangeL4DstPort = 751, /* Qualifies for L4 Dst port of ELK
                                           range */
    bcmFieldQualifyElkRangeL4SrcPort = 752, /* Qualifies for L4 Src port of ELK
                                           range */
    bcmFieldQualifyIp6PktNextHeader = 753, /* Qualifies for Next Header protocol
                                           field in IPv6 header. */
    bcmFieldQualifyIp6PktHopLimit = 754, /* Qualifies for Hop limit protocol
                                           field in IPv6 header. */
    bcmFieldQualifyIp6PktTrafficClass = 755, /* Qualifies for Traffic Class protocol
                                           field in IPv6 header. */
    bcmFieldQualifyInnerIp6PktNextHeader = 756, /* Qualifies for Next Header protocol
                                           field in Inner IPv6 header. */
    bcmFieldQualifyInnerIp6PktHopLimit = 757, /* Qualifies for Hop limit protocol
                                           field in Inner IPv6 header. */
    bcmFieldQualifyInnerIp6PktTrafficClass = 758, /* Qualifies for Traffic Class protocol
                                           field in Inner IPv6 header. */
    bcmFieldQualifyIpTunnelTtl = 759,   /* Qualifies on outer TTL for IP Tunnels
                                           and Vxlan */
    bcmFieldQualifyIpTunnelTtlClassZero = 760, /* Qualifies on outer TTL class for IP
                                           Tunnels and Vxlan */
    bcmFieldQualifyRangeCheckGroup = 761, /*  Range Group Identifier for a set of
                                           Range IDs. */
    bcmFieldQualifyFlowtrackerGroupId = 762, /* Qualifies on Flow group id
                                           assigned(bcmFieldActionFlowtrackerGroupId)
                                           by FlowTracker based Field Processor
                                           Stage. */
    bcmFieldQualifyFlowtrackerClassId = 763, /* Qualifies on Classifier ID from
                                           Flowtracker group */
    bcmFieldQualifyFlowtrackerGroupValid = 764, /* Qualifies on event Flowtracker group
                                           valid status */
    bcmFieldQualifyFlowtrackerDisabled = 765, /* Qualifies on event whether
                                           Flowtracker flow tracking is
                                           disabled. */
    bcmFieldQualifyFlowtrackerMeteringExceeded = 766, /* Qualifies on the event whether
                                           Flowtracker metering is exceeded. */
    bcmFieldQualifyFlowtrackerCollectorCopy = 767, /* Qualifies on the event whether
                                           initial or sample copied to collector
                                           happened by Flowtracker. */
    bcmFieldQualifyFlowtrackerFlowTableFull = 768, /* Qualifies on the Flowtracker event
                                           whether the flow table is full. */
    bcmFieldQualifyFlowtrackerGroupFlowExceeded = 769, /* Qualifies on the event whether flow
                                           limit for Flowtracker is exceeded. */
    bcmFieldQualifyFlowtrackerExportQueueFull = 770, /* Qualifies on the event whether
                                           Flowtracker export queue is full. */
    bcmFieldQualifyOpaqueTagType = 771, /* Qualifies on the tag type configured
                                           for opaque tags. */
    bcmFieldQualifyOpaqueTagHigh = 772, /* Qualifies on the higher 32 bits of
                                           opaque tag. */
    bcmFieldQualifyOpaqueTagLow = 773,  /* Qualifies on the lower 32 bits of
                                           opaque tag. */
    bcmFieldQualifyInnerDosAttack = 774, /* Denial of Service attack in inner
                                           headers of frame. */
    bcmFieldQualifyDosAttackEvents = 775, /* Qualifies on the dos attack events in
                                           outer header of frame. */
    bcmFieldQualifyInnerDosAttackEvents = 776, /* Qualifies on the dos attack events in
                                           inner header of frame. */
    bcmFieldQualifySrcTMPort = 777,     /* Qualifies on source TM port. */
    bcmFieldQualifyContainer = 778,     /* This qualifier will be used as
                                           container in IPMF3, to receive the
                                           action buffer, when performing
                                           cascading between IPMF2 and IPMF3. */
    bcmFieldQualifyEgressForwardingClassId = 779, /* Qualifies on the Class Identifier
                                           assigned by Egress Adaptation
                                           forwarding tables. */
    bcmFieldQualifyPktFlowType = 780,   /* Psuedo Qualifier to define the flow
                                           for the rules configured to match on
                                           qualifiers related to zone match Ids. */
    bcmFieldQualifyVlanTranslateClassId = 781, /* Qualifies on the Class Identifier
                                           assigned by Vlan Translate tables. */
    bcmFieldQualifyIpIdentifier = 782,  /* Qualifies on 16-bits Identifier field
                                           available in IP Header. */
    bcmFieldQualifyTcpWindowSize = 783, /* Qualifies on the Tcp Window protocol
                                           field in TCP header of the packet. */
    bcmFieldQualifyIp4Length = 784,     /* Qualifies on the total length
                                           protocol field of IPv4 header of the
                                           packet. */
    bcmFieldQualifyIp6Length = 785,     /* Qualifies on the payload Length
                                           protocol field of IPv6 header of the
                                           packet. */
    bcmFieldQualifyTunnelPayloadIp4Length = 786, /* Qualifies on the total length
                                           protocol field of inner IPv4 header
                                           of the packet. */
    bcmFieldQualifyTunnelPayloadIp6Length = 787, /* Qualifies on the payload Length
                                           protocol field of inner IPv6 header
                                           of the packet. */
    bcmFieldQualifyGbpPresent = 788,    /* When set matches on GBP Presence. */
    bcmFieldQualifyHiGigGbpPresent = 789, /* When set matches on presence of GBP
                                           Source ID, present after L2 Tag,
                                           carried to the remote device, via
                                           HiGig.. */
    bcmFieldQualifyGbpSrcId = 790,      /* Qualifies on the GBP Source ID of the
                                           packet. */
    bcmFieldQualifyVxlanGbpPresent = 791, /* When set matches on Vxlan GBP
                                           presence flag. */
    bcmFieldQualifyFlowtrackerCheck = 792, /* Qualifies on the results of
                                           Flowtracker checker events in Flow
                                           Tracker Module. */
    bcmFieldQualifyFlowtrackerLearn = 793, /* Match on packet which was learnt by
                                           Flowtracker module */
    bcmFieldQualifyCosMapSelect = 794,  /* Match on the COS map type */
    bcmFieldQualifyOpaqueObject1 = 795, /* Matches on Opaque Object1 */
    bcmFieldQualifyOpaqueObject2 = 796, /* Matches on Opaque Object2 */
    bcmFieldQualifyOpaqueObject3 = 797, /* Matches on Opaque Object3 */
    bcmFieldQualifyOpaqueObject4 = 798, /* Matches on Opaque Object4 */
    bcmFieldQualifyIncomingOuterVlanId = 799, /* Qualifies on the packet?s Incoming
                                           Outer VLAN ID */
    bcmFieldQualifyGbpDstId = 800,      /* Qualifies on the GBP Destination ID
                                           of the packet */
    bcmFieldQualifyHiGigGbpSrcId = 801, /* Qualifies on GBP Source ID, present
                                           after L2 Tag, carried to the remote
                                           device, via HiGig. */
    bcmFieldQualifyLoopbackSubtype = 802, /* Qualifies on subtype of the Loopback
                                           header */
    bcmFieldQualifyPphPresent = 803,    /* Qualifies on PPH present field in
                                           ITMH. */
    bcmFieldQualifyPacketProcessingInVportClass = 804, /* Qualifies on PPH In-LIF profile. */
    bcmFieldQualifyUDHBase0 = 805,      /* Qualifies UDH0 base value */
    bcmFieldQualifyUDHBase1 = 806,      /* Qualifies UDH1 base value */
    bcmFieldQualifyUDHBase2 = 807,      /* Qualifies UDH2 base value */
    bcmFieldQualifyUDHBase3 = 808,      /* Qualifies UDH3 base value */
    bcmFieldQualifyNetworkQos = 809,    /* Qualify Upon Network Qos. */
    bcmFieldQualifyAceEntryId = 810,    /* Qualify Upon ACE entry ID. */
    bcmFieldQualifyIp4Protocol = 811,   /* Qualify Upon IPv4 Protocol. */
    bcmFieldQualifyIp4Tos = 812,        /* Qualify Upon IPv4 TOS. */
    bcmFieldQualifyIp4Ttl = 813,        /* Qualify Upon IPv4 TTL. */
    bcmFieldQualifyInVportDataIndex = 814, /* Qualifies upon the ingress logical
                                           port data index. */
    bcmFieldQualifyEtherTypeUntagged = 815, /*  Ethernet Type, only for untagged
                                           frames. */
    bcmFieldQualifyNetworkLoadBalanceKeyInitial = 816, /* Qualifies on the initial Network Load
                                           Balancing key. */
    bcmFieldQualifyNetworkLoadBalanceKey = 817, /* Qualifies on the Network Load
                                           Balancing key, after ingress PMF1
                                           stage */
    bcmFieldQualifyEcmpLoadBalanceKey0Initial = 818, /* Qualifies on the initial ECMP Load
                                           Balancing key 0. */
    bcmFieldQualifyEcmpLoadBalanceKey0 = 819, /* Qualifies on the ECMP Load Balancing
                                           key 0, after ingress PMF1 stage */
    bcmFieldQualifyEcmpLoadBalanceKey1Initial = 820, /* Qualifies on the initial ECMP Load
                                           Balancing key 1. */
    bcmFieldQualifyEcmpLoadBalanceKey1 = 821, /* Qualifies on the ECMP Load Balancing
                                           key 1, after ingress PMF1 stage */
    bcmFieldQualifyEcmpLoadBalanceKey2Initial = 822, /* Qualifies on the initial ECMP Load
                                           Balancing key 2. */
    bcmFieldQualifyEcmpLoadBalanceKey2 = 823, /* Qualifies on the ECMP Load Balancing
                                           key 2, after ingress PMF1 stage */
    bcmFieldQualifyTrunkLoadBalanceKeyInitial = 824, /* Qualifies on the initial LAG Load
                                           Balancing Key */
    bcmFieldQualifyStateTableKey = 825, /* Qualifies on the memory index which
                                           the state data is set */
    bcmFieldQualifyStateTableData = 826, /* Qualifies on the state table payload. */
    bcmFieldQualifyCompareKeysResult0 = 827, /* Qualifies on the Result of comapring
                                           the first pair of initial keys */
    bcmFieldQualifyCompareKeysResult1 = 828, /* Qualifies on the Result of comapring
                                           the second pair of initial keys */
    bcmFieldQualifyCompareKeysTcam0 = 829, /* Qualifies on the Result of comapring
                                           inital key and TCAM result 0 */
    bcmFieldQualifyCompareKeysTcam1 = 830, /* Qualifies on the Result of comapring
                                           inital key and TCAM result 1. */
    bcmFieldQualifyLayerRecordType = 831, /* Qualifies on the Layer Record Type. */
    bcmFieldQualifyLayerRecordOffset = 832, /* Qualifies on the Layer Record Offset. */
    bcmFieldQualifyLayerRecordQualifier = 833, /* Qualifies on the Layer Record
                                           Qualfier (info). */
    bcmFieldQualifyUDHBase = 834,       /* User define header base, used in
                                           IPMF3. */
    bcmFieldQualifyForwardingLayerIndex = 835, /* Qualifies on the Forwarding Layer
                                           Index. */
    bcmFieldQualifyIPTProfile = 836,    /* Qualifies upon IPT Profile. */
    bcmFieldQualifyAcInLifWideData = 837, /* Qualifies on the Ac in-lif
                                           wide(generic) data */
    bcmFieldQualifyNativeAcInLifWideData = 838, /* Qualifies on the native Ac in-lif
                                           wide(generic) data */
    bcmFieldQualifyForwardingProfile = 839, /* Qualifies on the Forwarding Profile. */
    bcmFieldQualifyContextId = 840,     /* Qualifies on the Context Id. */
    bcmFieldQualifyForwardingLayerQualifier = 841, /* Qualifies on the Forwarding Layer
                                           Qualifier. */
    bcmFieldQualifyTracePacket = 842,   /* Qualifies on the Trace Packet. */
    bcmFieldQualifyTrunkLoadBalanceKey = 843, /* Qualifies on the LAG Load Balancing
                                           Key. */
    bcmFieldQualifyForward = 844,       /* Raw data for detination. */
    bcmFieldQualifyParsingStartType = 845, /* Qualifies on the layer type that
                                           egress parser should consider. */
    bcmFieldQualifyParsingStartOffset = 846, /* Qualifies on which offset egress
                                           parser should start parsing. */
    bcmFieldQualifyUDHData0 = 847,      /* Qualifies on user defined header 0
                                           data. */
    bcmFieldQualifyUDHData1 = 848,      /* Qualifies on user defined header 1
                                           data. */
    bcmFieldQualifyUDHData2 = 849,      /* Qualifies on user defined header 2
                                           data. */
    bcmFieldQualifyUDHData3 = 850,      /* Qualifies on user defined header 3
                                           data. */
    bcmFieldQualifyRxSnoopStrength = 851, /* Qualifies on Snoop strength. */
    bcmFieldQualifyRxSnoopCode = 852,   /* Qualifies on Snoop code. */
    bcmFieldQualifyVisibility = 853,    /* Qualifies on whether visibility is
                                           set. */
    bcmFieldQualifyVisibilityClear = 854, /* Qualifies on whether visibility is
                                           clear. */
    bcmFieldQualifyEthernetMulticast = 855, /* Qualify on Ethernet packets which
                                           destination MAC address is multicast
                                           (MAC-DA[40] is set). */
    bcmFieldQualifyEthernetBroadcast = 856, /* Qualify on Ethernet packets which
                                           destination MAC address is broadcast
                                           (MAC-DA[47:0] is all 1). */
    bcmFieldQualifyEthernetFirstTpidExist = 857, /* Qualify on Ethernet packets which
                                           their first Vlan TPID exists. */
    bcmFieldQualifyEthernetFirstTpidIndex = 858, /* Qualify on Ethernet packets  first
                                           Vlan TPID Index. */
    bcmFieldQualifyEthernetSecondTpidExist = 859, /* Qualify on Ethernet packets which
                                           their second Vlan TPID exists. */
    bcmFieldQualifyEthernetSecondTpidIndex = 860, /* Qualify on Ethernet packets second
                                           Vlan TPID Index. */
    bcmFieldQualifyEthernetThirdTpidExist = 861, /* Qualify on Ethernet packets which
                                           their third Vlan TPID exists. */
    bcmFieldQualifyEthernetThirdTpidIndex = 862, /* Qualify on Ethernet packets  third
                                           Vlan TPID Index. */
    bcmFieldQualifyIpHasOptions = 863,  /* Qualify on IPv4 packets where the IP
                                           Header include options. */
    bcmFieldQualifyIpFirstFrag = 864,   /* Qualify on IPv4 packets where the IP
                                           Header is fragmented and this is the
                                           first fragment. */
    bcmFieldQualifyIpTunnelType = 865,  /* Qualify on IPv4 TunnelType
                                           (bcmFieldTunnelXXX). */
    bcmFieldQualifyIp6MulticastCompatible = 866, /* Qualify on IPv6 packets which their
                                           DIP is Multicast (8msb are 0xFF). */
    bcmFieldQualifyIp6FirstAdditionalHeaderExist = 867, /* Qualify on IPv6 packets first
                                           additional header exists. */
    bcmFieldQualifyItmhExtensionExist = 868, /* Qualify if Ingress TM Header
                                           extension exists. */
    bcmFieldQualifyItmhDestinationFec = 869, /* Qualify if Ingress TM Header
                                           destination is FEC. */
    bcmFieldQualifyItmhPphType = 870,   /* Qualify on Ingress TM Header PPH
                                           type. */
    bcmFieldQualifyStatSamplingCode = 871, /* Qualify on Statistic Sampling code
                                           value. */
    bcmFieldQualifyStatSamplingQualifier = 872, /* Qualify on Statistic Sampling
                                           qualifier value. */
    bcmFieldQualifyRpfEcmpMode = 873,   /* Qualify on RPF ECMP MODE value. */
    bcmFieldQualifyStatOamLM = 874,     /* Qualify on OAM LM counter value. */
    bcmFieldQualifyInInterface = 875,   /* Qualify on the in LIF encoded as
                                           interface. */
    bcmFieldQualifyOutInterface = 876,  /* Qualify on the out LIF encoded as
                                           interface */
    bcmFieldQualifyInVportClass = 877,  /* Qualify on the profile of an in LIF
                                           encoded as Gport. */
    bcmFieldQualifyOutVportClass = 878, /* Qualify on the profile of an out LIF
                                           encoded as Gport. */
    bcmFieldQualifyInterfaceClass = 879, /* Qualify on the profile of a LIF
                                           encoded as interface. */
    bcmFieldQualifyPortClassPacketProcessing = 880, /* Qualify on the profile of a packet
                                           processing port. */
    bcmFieldQualifyPortClassTrafficManagement = 881, /* Qualify on the profile of a traffic
                                           management port. */
    bcmFieldQualifyOutPortTrafficManagement = 882, /* Qualify upon out-TM port. */
    bcmFieldQualifyMulticastRpfMode = 883, /* Qualify upon Multicast RPF Mode. */
    bcmFieldQualifyTpid = 884,          /* Qualify upon VLAN TPID. */
    bcmFieldQualifyVlanId = 885,        /* Qualify upon VLAN  tag Id. */
    bcmFieldQualifyVlanPri = 886,       /* Qualify upon VLAN priority. */
    bcmFieldQualifyVlanCfi = 887,       /* Qualify upon VLAN Cfi. */
    bcmFieldQualifyVlanPriCfi = 888,    /* Qualify upon VLAN Cfi+Pri (4 bits). */
    bcmFieldQualifyVlan = 889,          /* Qualify upon VLAN Tag. */
    bcmFieldQualifyMplsLabel = 890,     /* Qualify upon MPLS Label. */
    bcmFieldQualifyMplsLabelId = 891,   /* Qualify upon ID field of the MPLS
                                           Label. */
    bcmFieldQualifyMplsLabelTtl = 892,  /* Qualify upon TTL field of the MPLS
                                           Label. */
    bcmFieldQualifyMplsLabelBos = 893,  /* Qualify upon BOS field of the MPLS
                                           Label. */
    bcmFieldQualifyMplsLabelExp = 894,  /* Qualify upon EXP field of the MPLS
                                           Label. */
    bcmFieldQualifyInVPort0 = 895,      /*  Ingress virtual port 0. */
    bcmFieldQualifyInVPort1 = 896,      /*  Ingress virtual port 1. */
    bcmFieldQualifyOutVPort0 = 897,     /*  Egress virtual port 0. */
    bcmFieldQualifyOutVPort1 = 898,     /*  Egress virtual port 1. */
    bcmFieldQualifyOutVPort2 = 899,     /*  Egress virtual port 2. */
    bcmFieldQualifyOutVPort3 = 900,     /*  Egress virtual port 3. */
    bcmFieldQualifyBierStringOffset = 901, /* Qualifies upon Bier string offset. */
    bcmFieldQualifyBierStringSize = 902, /* Qualifies upon Bier string size. */
    bcmFieldQualifyPacketIsBier = 903,  /* Qualifies upon Bier packets. */
    bcmFieldQualifyPortClassPacketProcessingGeneralData = 904, /* Qualify on the general data profile
                                           of a packet processing port. */
    bcmFieldQualifyForwardingAdditionalInfo = 905, /* Qualifies on the Forwarding
                                           additional info. */
    bcmFieldQualifyInVportClass0 = 906, /* Qualify on the profile of an in LIF
                                           encoded as Gport. */
    bcmFieldQualifyInVportClass1 = 907, /* Qualify on the profile of an in LIF
                                           encoded as Gport. */
    bcmFieldQualifyStatId0 = 908,       /* Qualifies on statistics ID 0. */
    bcmFieldQualifyStatId1 = 909,       /* Qualifies on statistics ID 1. */
    bcmFieldQualifyStatId2 = 910,       /* Qualifies on statistics ID 2. */
    bcmFieldQualifyStatId3 = 911,       /* Qualifies on statistics ID 3. */
    bcmFieldQualifyStatId4 = 912,       /* Qualifies on statistics ID 4. */
    bcmFieldQualifyStatId5 = 913,       /* Qualifies on statistics ID 5. */
    bcmFieldQualifyStatId6 = 914,       /* Qualifies on statistics ID 6. */
    bcmFieldQualifyStatId7 = 915,       /* Qualifies on statistics ID 7. */
    bcmFieldQualifyStatId8 = 916,       /* Qualifies on statistics ID 8. */
    bcmFieldQualifyStatId9 = 917,       /* Qualifies on statistics ID 9. */
    bcmFieldQualifyStatProfile0 = 918,  /* Qualifies on statistics profile 0. */
    bcmFieldQualifyStatProfile1 = 919,  /* Qualifies on statistics profile 1. */
    bcmFieldQualifyStatProfile2 = 920,  /* Qualifies on statistics profile 2. */
    bcmFieldQualifyStatProfile3 = 921,  /* Qualifies on statistics profile 3. */
    bcmFieldQualifyStatProfile4 = 922,  /* Qualifies on statistics profile 4. */
    bcmFieldQualifyStatProfile5 = 923,  /* Qualifies on statistics profile 5. */
    bcmFieldQualifyStatProfile6 = 924,  /* Qualifies on statistics profile 6. */
    bcmFieldQualifyStatProfile7 = 925,  /* Qualifies on statistics profile 7. */
    bcmFieldQualifyStatProfile8 = 926,  /* Qualifies on statistics profile 8. */
    bcmFieldQualifyStatProfile9 = 927,  /* Qualifies on statistics profile 9. */
    bcmFieldQualifyExtStat0 = 928,      /* Qualifies on External Statistics ID
                                           0. */
    bcmFieldQualifyExtStat1 = 929,      /* Qualifies on External Statistics ID
                                           1. */
    bcmFieldQualifyExtStat2 = 930,      /* Qualifies on External Statistics ID
                                           2. */
    bcmFieldQualifyExtStat3 = 931,      /* Qualifies on External Statistics ID
                                           3. */
    bcmFieldQualifyExtStatProfile0 = 932, /* Qualifies on External Statistics
                                           profile 0. */
    bcmFieldQualifyExtStatProfile1 = 933, /* Qualifies on External Statistics
                                           profile 1. */
    bcmFieldQualifyExtStatProfile2 = 934, /* Qualifies on External Statistics
                                           profile 2. */
    bcmFieldQualifyExtStatProfile3 = 935, /* Qualifies on External Statistics
                                           profile 3. */
    bcmFieldQualifyStatMetaData = 936,  /* Qualifies on Statistics meta data. */
    bcmFieldQualifyDstL3EgressUnderlay = 937, /*  Qualifies on Underlay destination
                                           egress object id. */
    bcmFieldQualifyDstL3EgressNextHopsUnderlay = 938, /*  Consecutive Underlay L3 Egress Next
                                           hops. */
    bcmFieldQualifyEgressClassPort = 939, /* Qualifies on Class ID assigned to
                                           packet based on Egress Port. The
                                           class ID is assigned to egress port
                                           using bcm_port_class_set(unit, port,
                                           bcmPortClassEgress, class_id); */
    bcmFieldQualifyINTProbeMarker1 = 940, /* Qualifies on INT Prober Marker1
                                           field. */
    bcmFieldQualifyINTProbeMarker2 = 941, /* Qualifies on INT Prober Marker2
                                           field. */
    bcmFieldQualifyINTReserved4Bytes = 942, /* Qualifies on INT Reserved 4 bytes
                                           after Prober Marker2 field in the INT
                                           header. */
    bcmFieldQualifyInVPort0Raw = 943,   /* Qualifies on In LIF 0 raw value. */
    bcmFieldQualifyInVPort1Raw = 944,   /* Qualifies on In LIF 1 raw value. */
    bcmFieldQualifyOutVPort0Raw = 945,  /* Qualifies on Out LIF 0 raw value. */
    bcmFieldQualifyOutVPort1Raw = 946,  /* Qualifies on Out LIF 1 raw value. */
    bcmFieldQualifyOutVPort2Raw = 947,  /* Qualifies on Out LIF 2 raw value. */
    bcmFieldQualifyOutVPort3Raw = 948,  /* Qualifies on Out LIF 3 raw value. */
    bcmFieldQualifyAppTypePredefined = 949, /* Qualifies on predefined AppType. */
    bcmFieldQualifyFlowControlType = 950, /* Indicates the type of Flow control
                                           packet. */
    bcmFieldQualifyTimeStampTxPktType = 951, /* Requires BROADCOM_PREMIUM license */
    bcmFieldQualifySysHdrLocalDstport = 952, /* Requires BROADCOM_PREMIUM license */
    bcmFieldQualifyMirrorCode = 953,    /* Matches on Mirror Code. */
    bcmFieldQualifyMirrorData = 954,    /* Matches on Mirror Data (qualifier). */
    bcmFieldQualifyLearnVsi = 955,      /* VSI learnt */
    bcmFieldQualifyLearnData = 956,     /* Learn data */
    bcmFieldQualifyLearnStationMove = 957, /* Learn Station move */
    bcmFieldQualifyLearnMatch = 958,    /* Learn Match */
    bcmFieldQualifyLearnFound = 959,    /* Learn Found */
    bcmFieldQualifyLearnExpectedWon = 960, /* Learn Expected won */
    bcmFieldQualifyVrfValue = 961,      /* VRF value part of the forwarding
                                           domain, not including the forqwarding
                                           domain type. */
    bcmFieldQualifyInPortWithoutCore = 962, /* The In PP port, not including core ID
                                           (so to be used with care, if not
                                           adding entry by core). */
    bcmFieldQualifyDstSysPortExtPresent = 963, /*  FTMH Destination System Port (DSP)
                                           Extension is present. */
    bcmFieldQualifyIpFwdPlusOneNextProtocol = 964, /* IP forward plus one next protocol */
    bcmFieldQualifyMacSecControlPkt = 965, /* Qualifies (based on the action
                                           bcmFieldActionMacSecPktTypeSet
                                           values) MACSEC control packet */
    bcmFieldQualifyMacSecSecTagCbit = 966, /* Qualifies on the C-Bit of MACSEC
                                           SECTAG */
    bcmFieldQualifyMacSecSecTagEbit = 967, /* Qualifies on the E-bit of MACSEC
                                           SECTAG */
    bcmFieldQualifyIOAMNameSpaceIdMatch = 968, /* Requires BROADCOM_PREMIUM license */
    bcmFieldQualifyIOAMPktOverflowed = 969, /* Requires BROADCOM_PREMIUM license */
    bcmFieldQualifyIOAMRemainingLenValid = 970, /* Requires BROADCOM_PREMIUM license */
    bcmFieldQualifySaLookupAcceptedStrength = 971, /* Qualifies on Accepted strength
                                           returned from SA Lookup result */
    bcmFieldQualifyLayerRecordTypeRaw = 972, /* Qualifies on the Layer Record Type.
                                           For possible values look at
                                           bcm_field_layer_type_t, input expects
                                           raw value. */
    bcmFieldQualifySrcPortRaw = 973,    /* Qualifies on source port, input
                                           expects raw value. */
    bcmFieldQualifySrcModPortGportRaw = 974, /* Qualifies on Source module/port pair,
                                           input expects raw value. */
    bcmFieldQualifyDstMulticastGroupRaw = 975, /* Qualifies on Multicast Group id,
                                           input expects raw value. */
    bcmFieldQualifyInInterfaceRaw = 976, /* Qualifies on Ingress Logical
                                           Interface (LIF/RIF), input expects
                                           raw value. */
    bcmFieldQualifyOutInterfaceRaw = 977, /* Qualifies on Egress Logical Interface
                                           (LIF/RIF), input expects raw value. */
    bcmFieldQualifyInPortWithoutCoreRaw = 978, /* Qualifies on Ingress Port. Does not
                                           include the core ID, caution should
                                           be taken when not adding entry by
                                           core, input expects raw value. */
    bcmFieldQualifyVlanFormatRaw = 979, /* Qualifies on Incoming vlan structure
                                           format
                                           (untagged/single/double/priority-tagged),
                                           input expects raw value. */
    bcmFieldQualifyInPortRaw = 980,     /* Qualifies on Ingress Port. Includes
                                           core ID, and can be used by entries
                                           for all cores, input expects raw
                                           value. */
    bcmFieldQualifyColorRaw = 981,      /* Qualifies on packet color, input
                                           expects raw value. */
    bcmFieldQualifyDstGportRaw = 982,   /* Qualifies according to destination,
                                           input expects raw value. */
    bcmFieldQualifyDstPortRaw = 983,    /* Qualifies on destination port, input
                                           expects raw value. */
    bcmFieldQualifyOutPortRaw = 984,    /* Qualifies on Egress port. Does not
                                           include the core ID, caution should
                                           be taken when not adding entry by
                                           core, input expects raw value. */
    bcmFieldQualifyDstRpfValid = 985,   /* Checks if the RPF Destination is
                                           valid. */
    bcmFieldQualifyRpfOutVPort = 986,   /* Qualifies on the RPF OUT LIF. */
    bcmFieldQualifyRpfOutInterface = 987, /* Qualifies on the RPF OUT LIF. */
    bcmFieldQualifyRpfOutVPortRaw = 988, /* Qualifies on the RPF OUT LIF. Input
                                           expects raw value. */
    bcmFieldQualifyRpfRouteValid = 989, /* Qualifies on the RPF Route valid. */
    bcmFieldQualifyEcmpGroup = 990,     /* Qualifies on the ECMP group. */
    bcmFieldQualifyIp4DstMulticast = 991, /* Qualifies on the ECMP group. */
    bcmFieldQualifyIgmpType = 992,      /* Internet Group Management Protocol
                                           type. */
    bcmFieldQualifyL2IngressInterface = 993, /* Layer2 ingress interface (L2_IIF). */
    bcmFieldQualifyL3SrcHit = 994,      /* Layer3 source hit. */
    bcmFieldQualifyL3DestHit = 995,     /* Layer3 destination hit. */
    bcmFieldQualifyL2MacInfo = 996,     /* Packet Mac information. */
    bcmFieldQualifyL4Info = 997,        /* Packet L4 header Info. */
    bcmFieldQualifyInnerPriTaggedPkt = 998, /* Match on inner priority tagged
                                           packet. */
    bcmFieldQualifyHiGig3Class = 999,   /* Match on HiGig3 packet class id. */
    bcmFieldQualifyHiGig3Flags = 1000,  /* Match on HiGig3 packet flags. */
    bcmFieldQualifyLoopbackHiGig3Flags = 1001, /* Match on HiGig3 loopback packet
                                           flags. */
    bcmFieldQualifyIpExtensionHdrNum = 1002, /* Number of IP extension headers
                                           present in forwarding header. */
    bcmFieldQualifyIngressL2InterfaceOpaqueCtrlId = 1003, /* Opaque control id from L2_IIF table. */
    bcmFieldQualifyDevicePortOpaqueCommand = 1004, /* Opaque control from device port
                                           table. */
    bcmFieldQualifyIngressInterfaceClass = 1005, /* Interface Class id can come from
                                           either L2_IIF/SVP/L3_IIF ingress
                                           tables. */
    bcmFieldQualifyIngressL3InterfaceOpaqueCtrlId = 1006, /* Opaque control id from L3_IIF table. */
    bcmFieldQualifySvpOpaqueCtrlId = 1007, /* Opaque control id from SVP table. */
    bcmFieldQualifyVpnOpaqueCtrlId = 1008, /* Opaque control id from VFI table. */
    bcmFieldQualifyL2SrcDiscard = 1009, /*  L2 Source is discarded. */
    bcmFieldQualifyL2LearnCommands = 1010, /* L2 Learning command bits. */
    bcmFieldQualifyTunnelTermStatus = 1011, /* Tunnel termination status. */
    bcmFieldQualifyLoopbackHdrFlags = 1012, /* Loopback packet header flags. */
    bcmFieldQualifyPacketStatus = 1013, /* Packet status. */
    bcmFieldQualifyForwardingStatus = 1014, /* Packet Forwarding Status. */
    bcmFieldQualifyTunnelAltEtherType = 1015, /* Alternate tunnel EtherType, for
                                           termination flows this is outer L2
                                           header EtherType and for non
                                           termination flows it carris inner L2
                                           header EtherType. */
    bcmFieldQualifyTunnelAltSrcIp = 1016, /* Alternate tunnel source Ipv4, for
                                           termination flows this is outer L3
                                           header SrcIp4 and for non termination
                                           flows it carris inner L3 header
                                           SrcIp4. */
    bcmFieldQualifyTunnelAltSrcIp6 = 1017, /* Alternate tunnel source Ipv6, for
                                           termination flows this is outer L3
                                           header SrcIp6 and for non termination
                                           flows it carris inner L3 header
                                           SrcIp6. */
    bcmFieldQualifyTunnelAltDstIp = 1018, /* Alternate tunnel destination Ipv4,
                                           for termination flows this is outer
                                           L3 header DstIp4 and for non
                                           termination flows it carris inner L3
                                           header DstIp4. */
    bcmFieldQualifyTunnelAltDstIp6 = 1019, /* Alternate tunnel destination Ipv6,
                                           for termination flows this is outer
                                           L3 header DstIp6 and for non
                                           termination flows it carris inner L3
                                           header DstIp6. */
    bcmFieldQualifyTunnelAltIpProtocol = 1020, /* Alternate tunnel Ip protocol, for
                                           termination flows this is outer L3
                                           header protocol and for non
                                           termination flows it carris inner L3
                                           header protocol. */
    bcmFieldQualifyTunnelAltL4SrcPort = 1021, /* Alternate tunnel source L4 port, for
                                           termination flows this is outer L4
                                           header src port and for non
                                           termination flows it carris inner L4
                                           header src port. */
    bcmFieldQualifyTunnelAltL4DstPort = 1022, /* Alternate tunnel destionation L4
                                           port, for termination flows this is
                                           outer L4 header dest port and for non
                                           termination flows it carris inner L4
                                           header dest port. */
    bcmFieldQualifyOuterL2MacInfo = 1023, /* Packet outer Mac information. */
    bcmFieldQualifyOuterIpInfo = 1024,  /* Packet outer Ip information. */
    bcmFieldQualifyOuterL4Info = 1025,  /* Packet outer L4 header Info. */
    bcmFieldQualifyInnerL2MacInfo = 1026, /* Packet inner Mac information. */
    bcmFieldQualifyInnerIpInfo = 1027,  /* Packet inner Ip information. */
    bcmFieldQualifyInnerL4Info = 1028,  /* Packet inner L4 header Info. */
    bcmFieldQualifyEffectiveTtl = 1029, /* Effective Ttl of packet computed
                                           based on uniform/pipe mode setting of
                                           tunnel. */
    bcmFieldQualifyFlexStateResultA0 = 1030, /* Flex State Result A0 counter value. */
    bcmFieldQualifyFlexStateResultA1 = 1031, /* Flex State Result A1 counter value. */
    bcmFieldQualifyLastIpProtocol = 1032, /* Ip protocol value from forwarding
                                           header last protocol value. */
    bcmFieldQualifyMplsLabel4 = 1033,   /* MPLS Label 4 */
    bcmFieldQualifyMplsLabel4Ttl = 1034, /* TTL field of the fourth MPLS Label */
    bcmFieldQualifyMplsLabel4Bos = 1035, /* BoS field of the fourth MPLS Label */
    bcmFieldQualifyMplsLabel4Exp = 1036, /* Exp field of the fourth MPLS Label */
    bcmFieldQualifyMplsLabel4Id = 1037, /* ID field of the fourth MPLS Label */
    bcmFieldQualifyMplsLabel5 = 1038,   /* MPLS Label 5 */
    bcmFieldQualifyMplsLabel5Ttl = 1039, /* TTL field of the fifth MPLS Label */
    bcmFieldQualifyMplsLabel5Bos = 1040, /* BoS field of the fifth MPLS Label */
    bcmFieldQualifyMplsLabel5Exp = 1041, /* Exp field of the fifth MPLS Label */
    bcmFieldQualifyMplsLabel5Id = 1042, /* ID field of the fifth MPLS Label */
    bcmFieldQualifyMplsLabel6 = 1043,   /* MPLS Label 6 */
    bcmFieldQualifyMplsLabel6Ttl = 1044, /* TTL field of the sixth MPLS Label */
    bcmFieldQualifyMplsLabel6Bos = 1045, /* BoS field of the sixth MPLS Label */
    bcmFieldQualifyMplsLabel6Exp = 1046, /* Exp field of the sixth MPLS Label */
    bcmFieldQualifyMplsLabel6Id = 1047, /* ID field of the sixth MPLS Label */
    bcmFieldQualifyMplsLabel7 = 1048,   /* MPLS Label 7 */
    bcmFieldQualifyMplsLabel7Ttl = 1049, /* TTL field of the seventh MPLS Label */
    bcmFieldQualifyMplsLabel7Bos = 1050, /* BoS field of the seventh MPLS Label */
    bcmFieldQualifyMplsLabel7Exp = 1051, /* Exp field of the seventh MPLS Label */
    bcmFieldQualifyMplsLabel7Id = 1052, /* ID field of the seventh MPLS Label */
    bcmFieldQualifyL5PayloadByte1 = 1053, /* L5 byte1 of forwarding header. For
                                           non-terminating packet it is outer
                                           header, incase of termination it is
                                           inner header. */
    bcmFieldQualifyL5PayloadByte2 = 1054, /* L5 byte2 of forwarding header. For
                                           non-terminating packet it is outer
                                           header, incase of termination it is
                                           inner header. */
    bcmFieldQualifyL5PayloadByte3 = 1055, /* L5 byte3 of forwarding header. For
                                           non-terminating packet it is outer
                                           header, incase of termination it is
                                           inner header. */
    bcmFieldQualifyL5PayloadByte4 = 1056, /* L5 byte4 of forwarding header. For
                                           non-terminating packet it is outer
                                           header, incase of termination it is
                                           inner header. */
    bcmFieldQualifyL5PayloadByte5 = 1057, /* L5 byte5 of forwarding header. For
                                           non-terminating packet it is outer
                                           header, incase of termination it is
                                           inner header. */
    bcmFieldQualifyL5PayloadByte6 = 1058, /* L5 byte6 of forwarding header. For
                                           non-terminating packet it is outer
                                           header, incase of termination it is
                                           inner header. */
    bcmFieldQualifyL5PayloadByte7 = 1059, /* L5 byte7 of forwarding header. For
                                           non-terminating packet it is outer
                                           header, incase of termination it is
                                           inner header. */
    bcmFieldQualifyL5PayloadByte8 = 1060, /* L5 byte8 of forwarding header. For
                                           non-terminating packet it is outer
                                           header, incase of termination it is
                                           inner header. */
    bcmFieldQualifyOuterL5PayloadByte1 = 1061, /* L5 byte1 of packet outer header. For
                                           non-terminating packet it is same as
                                           forwarding header, incase of
                                           termination it is different from
                                           forwarding header info. */
    bcmFieldQualifyOuterL5PayloadByte2 = 1062, /* L5 byte2 of packet outer header. For
                                           non-terminating packet it is same as
                                           forwarding header, incase of
                                           termination it is different from
                                           forwarding header info. */
    bcmFieldQualifyOuterL5PayloadByte3 = 1063, /* L5 byte3 of packet outer header. For
                                           non-terminating packet it is same as
                                           forwarding header, incase of
                                           termination it is different from
                                           forwarding header info. */
    bcmFieldQualifyOuterL5PayloadByte4 = 1064, /* L5 byte4 of packet outer header. For
                                           non-terminating packet it is same as
                                           forwarding header, incase of
                                           termination it is different from
                                           forwarding header info. */
    bcmFieldQualifyOuterL5PayloadByte5 = 1065, /* L5 byte5 of packet outer header. For
                                           non-terminating packet it is same as
                                           forwarding header, incase of
                                           termination it is different from
                                           forwarding header info. */
    bcmFieldQualifyOuterL5PayloadByte6 = 1066, /* L5 byte6 of packet outer header. For
                                           non-terminating packet it is same as
                                           forwarding header, incase of
                                           termination it is different from
                                           forwarding header info. */
    bcmFieldQualifyOuterL5PayloadByte7 = 1067, /* L5 byte7 of packet outer header. For
                                           non-terminating packet it is same as
                                           forwarding header, incase of
                                           termination it is different from
                                           forwarding header info. */
    bcmFieldQualifyOuterL5PayloadByte8 = 1068, /* L5 byte8 of packet outer header. For
                                           non-terminating packet it is same as
                                           forwarding header, incase of
                                           termination it is different from
                                           forwarding header info. */
    bcmFieldQualifyArpSrcMac = 1069,    /* Source mac in Arp/Rarp packet. */
    bcmFieldQualifyArpDstMac = 1070,    /* Destination mac in Arp/Rarp packet. */
    bcmFieldQualifyL2EgressInterface = 1071, /* Layer2 egress interface (L2_OIF). */
    bcmFieldQualifyStg = 1072,          /* Spanning tree profile table index
                                           value. */
    bcmFieldQualifyCosQueueNum = 1073,  /* cosq queue number. */
    bcmFieldQualifyCopyToCpu = 1074,    /* Packet marked for copy to CPU. */
    bcmFieldQualifyCopyToCpuTruncate = 1075, /* Truncate copy to CPU marked packet. */
    bcmFieldQualifyMcastPkt = 1076,     /* Packet is a multicast packet. */
    bcmFieldQualifyUntagPkt = 1077,     /* Packet is untagged. */
    bcmFieldQualifyDoNotModify = 1078,  /* Forwarding header marked as do not
                                           modify. */
    bcmFieldQualifyTxPortType = 1079,   /* Transmit port type. */
    bcmFieldQualifyRxPortType = 1080,   /* Receive port type. */
    bcmFieldQualifyMirrorPktType = 1081, /* Mirror packet type. */
    bcmFieldQualifyPtpMsgType = 1082,   /* PTP message type. */
    bcmFieldQualifyPtpVersion = 1083,   /* PTP version. */
    bcmFieldQualifyPtpPktCtrl = 1084,   /* PTP packet control. */
    bcmFieldQualifyVlanMembershipCheck = 1085, /* Vlan membership check. */
    bcmFieldQualifyInnerVlanTagPreserve = 1086, /* Packet marked for inner vlan tag
                                           preserve. */
    bcmFieldQualifyOuterVlanTagPreserve = 1087, /* Packet marked for outer vlan tag
                                           preserve. */
    bcmFieldQualifyForwardingEligible = 1088, /* Packet forwarding eligibility. */
    bcmFieldQualifyInterfaceClassMpls = 1089, /* Qualifies on Class identifier derived
                                           from forwarding MPLS label lookup. */
    bcmFieldQualifyL3Check = 1090,      /* Packet L3 check. */
    bcmFieldQualifyL2InterfaceMatch = 1091, /* Packet L2 interface match. */
    bcmFieldQualifyProtocolPktOpaqueCtrlId = 1092, /* Opaque control id from protocol
                                           packet forward table. */
    bcmFieldQualifyLookupClassField = 1093, /* Class Id assigned for packet by
                                           Lookup Stage. */
    bcmFieldQualifyExactMatchOpaqueObject0 = 1094, /* Matches on opaque object0 set by
                                           Exact Match/Flowtracker stage. */
    bcmFieldQualifyIcmpType = 1095,     /* Matches on ICMP type value. */
    bcmFieldQualifyOuterVlanRangeMatch = 1096, /* Outer vlan matched with one of
                                           configured min/max values in range
                                           map. */
    bcmFieldQualifyInnerVlanRangeMatch = 1097, /* Inner vlan matched with one of
                                           configured min/max values in range
                                           map. */
    bcmFieldQualifyCount = 1098         /* Always Last. Not a usable value. */
} bcm_field_qualify_t;

#define BCM_FIELD_QUALIFY_STRINGS \
{ \
    "SrcIp6", \
    "DstIp6", \
    "SrcIp6High", \
    "DstIp6High", \
    "SrcIp6Low", \
    "DstIp6Low", \
    "SrcMac", \
    "DstMac", \
    "Snap", \
    "SrcIp", \
    "DstIp", \
    "Llc", \
    "InPort", \
    "InPorts", \
    "OutPorts", \
    "Drop", \
    "Ip6FlowLabel", \
    "OuterVlan", \
    "OuterVlanId", \
    "OuterVlanPri", \
    "OuterVlanCfi", \
    "InnerVlan", \
    "InnerVlanId", \
    "InnerVlanPri", \
    "InnerVlanCfi", \
    "LookupStatus", \
    "RangeCheck", \
    "L4SrcPort", \
    "L4DstPort", \
    "EtherType", \
    "IpProtocol", \
    "DSCP", \
    "Ttl", \
    "SrcModid", \
    "SrcPortTgid", \
    "SrcPort", \
    "SrcTrunk", \
    "SrcTrunkMemberGport", \
    "DstModid", \
    "DstPortTgid", \
    "DstPort", \
    "DstTrunk", \
    "TcpControl", \
    "PacketRes", \
    "PacketFormat", \
    "SrcClassL2", \
    "SrcClassL3", \
    "SrcClassField", \
    "DstClassL2", \
    "DstClassL3", \
    "DstClassField", \
    "IpInfo", \
    "IpProtocolCommon", \
    "MHOpcode", \
    "IpFlags", \
    "InnerTpid", \
    "OuterTpid", \
    "InnerIpType", \
    "TunnelType", \
    "LoopbackType", \
    "Loopback", \
    "IpType", \
    "ForwardingType", \
    "Decap", \
    "HiGig", \
    "HiGigProxy", \
    "DstHiGig", \
    "Stage", \
    "StageIngress", \
    "StageIngressSecurity", \
    "StageIngressQoS", \
    "StageLookup", \
    "StageEgress", \
    "StageEgressSecurity", \
    "StageExternal", \
    "Deprecated75", \
    "Deprecated76", \
    "TcpSequenceZero", \
    "TcpHeaderSize", \
    "InterfaceClassL2", \
    "InterfaceClassL3", \
    "InterfaceClassPort", \
    "L3Routable", \
    "IpFrag", \
    "Vrf", \
    "L3Ingress", \
    "OutPort", \
    "Ip4", \
    "Ip6", \
    "L2Format", \
    "VlanFormat", \
    "TranslatedVlanFormat", \
    "ExtensionHeaderType", \
    "ExtensionHeaderSubCode", \
    "ExtensionHeader2Type", \
    "L4Ports", \
    "MirrorCopy", \
    "TunnelTerminated", \
    "MplsTerminated", \
    "InnerSrcIp", \
    "InnerDstIp", \
    "InnerSrcIp6", \
    "InnerDstIp6", \
    "InnerSrcIp6High", \
    "InnerDstIp6High", \
    "InnerTtl", \
    "InnerTos", \
    "InnerIpProtocol", \
    "InnerIpFrag", \
    "VlanTranslationHit", \
    "ForwardingVlanValid", \
    "IngressStpState", \
    "L2SrcHit", \
    "L2SrcStatic", \
    "L2DestHit", \
    "L2StationMove", \
    "L2CacheHit", \
    "L3SrcHostHit", \
    "L3DestHostHit", \
    "L3DestRouteHit", \
    "IpmcStarGroupHit", \
    "DosAttack", \
    "Deprecated122", \
    "ClassId", \
    "Deprecated124", \
    "IcmpTypeCode", \
    "Deprecated126", \
    "InnerIpProtocolCommon", \
    "InnerL4SrcPort", \
    "InnerL4DstPort", \
    "InnerIp6FlowLabel", \
    "DstL3Egress", \
    "DstMulticastGroup", \
    "SrcMplsGport", \
    "DstMplsGport", \
    "SrcMimGport", \
    "DstMimGport", \
    "SrcWlanGport", \
    "DstWlanGport", \
    "SrcModPortGport", \
    "SrcModuleGport", \
    "Color", \
    "IntPriority", \
    "ForwardingVlanId", \
    "Vpn", \
    "FlowId", \
    "InVPort", \
    "OutVPort", \
    "FibreChanOuter", \
    "FibreChanInner", \
    "VnTag", \
    "CnTag", \
    "FabricQueueTag", \
    "MyStationHit", \
    "DstMultipath", \
    "L2PayloadFirstEightBytes", \
    "SrcVirtualPortValid", \
    "DstL3EgressNextHops", \
    "RecoverableDrop", \
    "RepCopy", \
    "IpTunnelHit", \
    "MplsLabel1Hit", \
    "TrillEgressRbridgeHit", \
    "L2GreSrcIpHit", \
    "MimSrcGportHit", \
    "MplsLabel2Hit", \
    "TrillIngressRbridgeHit", \
    "L2GreVfiHit", \
    "MimVfiHit", \
    "GenericAssociatedChannelLabelValid", \
    "RouterAlertLabelValid", \
    "DstIpLocal", \
    "NormalizeIpAddrs", \
    "NormalizeMacAddrs", \
    "IpAddrsNormalized", \
    "MacAddrsNormalized", \
    "MplsForwardingLabel", \
    "MplsForwardingLabelTtl", \
    "MplsForwardingLabelBos", \
    "MplsForwardingLabelExp", \
    "MplsForwardingLabelId", \
    "MplsControlWord", \
    "Rtag7AHashUpper", \
    "Rtag7AHashLower", \
    "Rtag7BHashUpper", \
    "Rtag7BHashLower", \
    "MplsForwardingLabelAction", \
    "MplsControlWordValid", \
    "EgressClass", \
    "EgressClassL3Interface", \
    "EgressClassTrill", \
    "EgressClassWlan", \
    "EgressClassL2Gre", \
    "LlidValue", \
    "CpuQueue", \
    "Mpls", \
    "SrcGport", \
    "HeaderFormat", \
    "HeaderFormatSet", \
    "L2Learn", \
    "PortOrientation", \
    "EcnValue", \
    "RxTrapCode", \
    "Ptch", \
    "MplsBos", \
    "RxTrapData", \
    "PolicerIntPrio", \
    "PacketTerminatedBytes", \
    "BypassFilter", \
    "ReplicantAny", \
    "ReplicantFirst", \
    "TrillEgressRbridge", \
    "ISid", \
    "InterfaceClassProcessingPort", \
    "DstRpfGport", \
    "TrunkHashResult", \
    "Dhcp", \
    "SnoopCopy", \
    "ForwardCopy", \
    "InterfaceClassVPort", \
    "VPortRangeCheck", \
    "PacketLengthRangeCheck", \
    "StageIngressVlanTranslation", \
    "StageIngressTunnelTerminated", \
    "StageIngressMplsTerminated", \
    "StageIngressIpTunnel", \
    "StageIngressL2Src", \
    "StageIngressL2Dest", \
    "StageIngressL3SrcRoute", \
    "StageIngressL3DestRoute", \
    "StageIngressIpmc", \
    "TunnelTerminatedHit", \
    "MplsTerminatedHit", \
    "L3SrcRouteHit", \
    "IpmcHit", \
    "VlanTranslationValue", \
    "TunnelTerminatedValue", \
    "MplsTerminatedValue", \
    "IpTunnelValue", \
    "L2SrcValue", \
    "L2DestValue", \
    "L3SrcRouteValue", \
    "L3DestRouteValue", \
    "IpmcValue", \
    "LearnSrcMac", \
    "LearnVlan", \
    "LearnSrcPort", \
    "PacketSize", \
    "InnerSrcMac", \
    "InnerDstMac", \
    "InnerEtherType", \
    "MplsLabel1", \
    "MplsLabel1Ttl", \
    "MplsLabel1Bos", \
    "MplsLabel1Exp", \
    "MplsLabel1Id", \
    "MplsLabel2", \
    "MplsLabel2Ttl", \
    "MplsLabel2Bos", \
    "MplsLabel2Exp", \
    "MplsLabel2Id", \
    "MplsLabel3", \
    "MplsLabel3Ttl", \
    "MplsLabel3Bos", \
    "MplsLabel3Exp", \
    "MplsLabel3Id", \
    "CascadedKeyValue", \
    "MplsOuterLabelPop", \
    "MplsStationHitTunnelUnterminated", \
    "IngressClassField", \
    "IngressInterfaceClassPort", \
    "ExternalValue0", \
    "ExternalValue1", \
    "ExternalValue2", \
    "ExternalValue3", \
    "ExternalHit0", \
    "ExternalHit1", \
    "ExternalHit2", \
    "ExternalHit3", \
    "VpnUnknownDstMacDstPort", \
    "VxlanNetworkId", \
    "VxlanFlags", \
    "NatNeeded", \
    "NatDstRealmId", \
    "NatSrcRealmId", \
    "IcmpError", \
    "TunnelId", \
    "ArpSenderIp4", \
    "ArpTargetIp4", \
    "ArpOpcode", \
    "TranslatedOuterVlan", \
    "TranslatedOuterVlanId", \
    "TranslatedOuterVlanPri", \
    "TranslatedOuterVlanCfi", \
    "TranslatedInnerVlan", \
    "TranslatedInnerVlanId", \
    "TranslatedInnerVlanPri", \
    "TranslatedInnerVlanCfi", \
    "ConstantZero", \
    "ConstantOne", \
    "FibreChanRCtl", \
    "FibreChanFCtl", \
    "FibreChanCSCtl", \
    "FibreChanDFCtl", \
    "FibreChanType", \
    "FibreChanSrcId", \
    "FibreChanDstId", \
    "FibreChanZoneCheck", \
    "FibreChanSrcFpmaCheck", \
    "FibreChanSrcBindCheck", \
    "FibreChanVFTVersion", \
    "FibreChanVFTPri", \
    "FibreChanVFTFabricId", \
    "FibreChanVFTHopCount", \
    "FibreChanVFTVsanId", \
    "FibreChanVFTVsanPri", \
    "FibreChanVFTValid", \
    "FcoeSOF", \
    "FcoeVersionIsZero", \
    "ForwardingHeaderOffset", \
    "L3SrcBind", \
    "ECid", \
    "IngressECid", \
    "ETag", \
    "IngressVPortBridgeDisable", \
    "HashValue", \
    "IsEqualValue", \
    "StageHash", \
    "UrpfMode", \
    "AppType", \
    "SubportPktTag", \
    "SrcVxlanGport", \
    "DstVxlanGport", \
    "OamMdl", \
    "IntCongestionNotification", \
    "SrcNivGport", \
    "DstNivGport", \
    "DstGport", \
    "MirrorEgressDisabled", \
    "BypassSrcMacFilter", \
    "RxTrapCodeForSnoop", \
    "IpmcStarGroupValue", \
    "NativeVSwitch", \
    "NativeVSwitchValid", \
    "TrillIVersion", \
    "TrillIngressRbridge", \
    "TrillMultiDestination", \
    "TrillOpLength", \
    "TrillHopCount", \
    "TrillPayload", \
    "MplsForwardingLabelPayload", \
    "IncomingIpIfClass", \
    "L2GreProtocolType", \
    "L2GreVsid", \
    "L2GreFlowId", \
    "MimVlanPri", \
    "MimVlanCfi", \
    "Fhei", \
    "FheiSize", \
    "EthernetOamHeaderBits0_31", \
    "EthernetOamHeaderBits32_63", \
    "EthernetOamDstClassL2", \
    "EthernetOamTxPktUPMEP", \
    "EthernetOamInterfaceClassNiv", \
    "EthernetOamInterfaceClassMim", \
    "EthernetOamInterfaceClassVxlan", \
    "EthernetOamInterfaceClassVlan", \
    "EthernetOamInterfaceClassPort", \
    "EthernetOamClassVlanTranslateKeyFirst", \
    "EthernetOamClassVlanTranslateKeySecond", \
    "EthernetOamInterfaceClassMpls", \
    "EthernetOamClassVpn", \
    "MplsOamHeaderBits0_31", \
    "MplsOamHeaderBits32_63", \
    "MplsOamGALLabelOnly", \
    "MplsOamUpperLabelDataDrop", \
    "MplsOamGALExposed", \
    "MplsOamACH", \
    "MplsOamControlPktType", \
    "MplsOamClassMplsSwitchLabel", \
    "OamHeaderBits0_31", \
    "OamHeaderBits32_63", \
    "OamEgressClassVxlt", \
    "OamEgressClassPort", \
    "Udf", \
    "OuterVlanActionRange", \
    "InnerVlanActionRange", \
    "IngressInterfaceClassVPort", \
    "SrcVlanGport", \
    "DstVlanGport", \
    "OamType", \
    "SrcVlanGports", \
    "DstVlanGports", \
    "SrcVxlanGports", \
    "DstVxlanGports", \
    "SrcWlanGports", \
    "DstWlanGports", \
    "SrcMplsGports", \
    "DstMplsGports", \
    "SrcGports", \
    "DstGports", \
    "SrcMimGports", \
    "DstMimGports", \
    "SrcNivGports", \
    "DstNivGports", \
    "SrcModPortGports", \
    "LearnInVPort", \
    "StackingRoute", \
    "RxTrapStrength", \
    "VxlanHeaderBits8_31", \
    "VxlanHeaderBits56_63", \
    "OamInLifIdValid", \
    "OamInLifId", \
    "OamUpMep", \
    "OamSubtype", \
    "OamHeaderOffset", \
    "OamStampOffset", \
    "OamMepId", \
    "OamMeterDisable", \
    "OamTsSystemHeader", \
    "DstMulticastGroups", \
    "InterfaceInPorts", \
    "DestVirtualPortValid", \
    "InVPortWide", \
    "StageClass", \
    "StageClassExactMatch", \
    "FcoeOxID", \
    "FcoeRxID", \
    "IpProtocolClass", \
    "EtherTypeClass", \
    "L4SrcPortClass", \
    "L4DstPortClass", \
    "SrcIpClass", \
    "SrcIpClassMsbNibble", \
    "SrcIpClassLower", \
    "SrcIpClassUpper", \
    "SrcIp6Class", \
    "SrcIp6ClassMsbNibble", \
    "SrcIp6ClassLower", \
    "SrcIp6ClassUpper", \
    "FcoeOxIDClass", \
    "DstIpClass", \
    "DstIpClassMsbNibble", \
    "DstIpClassLower", \
    "DstIpClassUpper", \
    "DstIp6Class", \
    "DstIp6ClassMsbNibble", \
    "DstIp6ClassLower", \
    "DstIp6ClassUpper", \
    "FcoeRxIDClass", \
    "FibreChanSrcIdClass", \
    "FibreChanSrcIdClassMsbNibble", \
    "FibreChanSrcIdClassLower", \
    "FibreChanSrcIdClassUpper", \
    "FibreChanDstIdClass", \
    "FibreChanDstIdClassMsbNibble", \
    "FibreChanDstIdClassLower", \
    "FibreChanDstIdClassUpper", \
    "TcpClassZero", \
    "TosClassZero", \
    "TtlClassZero", \
    "TcpClassOne", \
    "TosClassOne", \
    "TtlClassOne", \
    "OuterVlanPriCfi", \
    "ForwardHdrSrcMac", \
    "ForwardHdrDstMac", \
    "ForwardHdrVlanId", \
    "DstSysPortExt", \
    "StageIngressExactMatch", \
    "LearnExtension", \
    "IpFragNonOrFirst", \
    "PacketLength", \
    "GroupClass", \
    "UdfClass", \
    "InterfaceLookupClassPort", \
    "HiGigDstMulticast", \
    "HiGigDstMulticastGroupId", \
    "HiGigTrafficClass", \
    "HiGigDstModuleGport", \
    "HiGigDstPortGport", \
    "HiGigDstModPortGport", \
    "HiGigSrcModuleGport", \
    "HiGigSrcPortGport", \
    "HiGigSrcModPortGport", \
    "HiGigLoadBalanceID", \
    "HiGigColor", \
    "HiGigIntCongestionNotification", \
    "HiGigIngressTagged", \
    "HiGigDstTrunk", \
    "HiGigDstTrunkId", \
    "HiGigIngressL3SwitchPkt", \
    "HiGigLabel", \
    "HiGigReplicationId", \
    "HiGigVlan", \
    "HiGigPortFilteringMode", \
    "HiGigSrcTrunk", \
    "HiGigIngressClassificationTag", \
    "HiGigEgressMcast", \
    "HiGigVni", \
    "HiGigDstGport", \
    "HiGigMulticastIndex", \
    "HiGigVpReplicationId", \
    "HiGigSrcGport", \
    "HiGigProtectionSwitchingStatus", \
    "HiGigMirrorToVp", \
    "HiGigDstType", \
    "HiGigSrcType", \
    "HiGigOffloadEngineClassificationTag", \
    "HiGigOffloadEnginePktPriNew", \
    "HiGigOffloadEngineDscpNew", \
    "LoopBackQueue", \
    "LoopBackSrcGport", \
    "PktIsVisible", \
    "LoopBackCpuMasqueradePktProfile", \
    "LoopBackColor", \
    "LoopBackTrafficClass", \
    "LoopBackPacketProcessingPort", \
    "MixedSrcClassId", \
    "ITag", \
    "InterfaceIngressKeySelectClassPort", \
    "BfdYourDiscriminator", \
    "CpuVisibilityPacket", \
    "DstL2MulticastGroup", \
    "DstL3MulticastGroup", \
    "ExactMatchHitStatus", \
    "ExactMatchActionClassId", \
    "ExactMatchGroupClassId", \
    "L2PayLoad", \
    "CustomHeaderPkt", \
    "CustomHeaderData", \
    "MimlPkt", \
    "MimlSrcMac", \
    "MimlDstMac", \
    "MimlVlan", \
    "MimlVlanId", \
    "MimlVlanPri", \
    "MimlVlanCfi", \
    "MimlInnerTag", \
    "CapwapHdrType", \
    "CapwapHdrRid", \
    "CapwapPayloadSOF", \
    "CapwapPayloadDstMac", \
    "CapwapPayloadSrcMac", \
    "CapwapPayloadEtherType", \
    "CapwapPayloadOuterVlan", \
    "CapwapPayloadOuterVlanId", \
    "CapwapPayloadOuterVlanPri", \
    "CapwapPayloadOuterVlanCfi", \
    "CapwapPayloadInnerVlan", \
    "CapwapPayloadInnerVlanId", \
    "CapwapPayloadInnerVlanPri", \
    "CapwapPayloadInnerVlanCfi", \
    "CapwapPayloadVlanFormat", \
    "CapwapPayloadSip", \
    "CapwapPayloadDip", \
    "CapwapPayloadSip6", \
    "CapwapPayloadDip6", \
    "CapwapPayloadIpProtocol", \
    "CapwapPayloadTos", \
    "CapwapPayloadL4DstPort", \
    "CapwapPayloadL4SrcPort", \
    "CapwapPayloadL3HdrParseable", \
    "CapwapPayloadL4HdrParseable", \
    "VlanAction", \
    "DownMepSatTerminated", \
    "DstMultipathOverlay", \
    "DstMultipathUnderlay", \
    "StpState", \
    "HiGigMirrorOrSwitchPkt", \
    "HiGigPreserveFlags", \
    "HiGigMplsPkt", \
    "HiGigDoNotFlags", \
    "HiGigVpPreserveFlags", \
    "HiGigOffloadEngineVxltStatus", \
    "HiGigForwardingType", \
    "HiGigLabelType", \
    "HiGigExtendedHeaderPresent", \
    "HiGigVpLagFailoverPacket", \
    "HiGigOffloadEnginePreserveDscp", \
    "HiGigOffloadEnginePreserveDot1p", \
    "HiGigOffloadEngineDeferredFlags", \
    "HiGigOffloadEngineSrcType", \
    "SystemPortBitmap", \
    "SourceGportBitmap", \
    "DevicePortBitmap", \
    "TosLower4Bits", \
    "OamEgressClass2Vxlt", \
    "OamEgressVxltFirstHit", \
    "OamEgressVxltSecondHit", \
    "OamDownMEPLoopbackPacket", \
    "OamEgressPortUnicastDstMacHit", \
    "OamSat", \
    "IngressDropEthernetOamControl", \
    "IngressDropEthernetOamData", \
    "IngressDropMplsOamControl", \
    "IngressDropMplsOamData", \
    "EgressClassVxlan", \
    "OamEgressEtherType", \
    "OamEgressMulticastMacHit", \
    "TrunkMemberSourceModuleId", \
    "OamEgressClassSrcMac", \
    "MyStation2Hit", \
    "ExternalValue4", \
    "ExternalValue5", \
    "ExternalHit4", \
    "ExternalHit5", \
    "GeneratedTtl", \
    "IpMulticastCompatible", \
    "EgressClassTunnel", \
    "EgressClassL3InterfaceTunnel", \
    "StaggeredValue0", \
    "StaggeredValue1", \
    "StaggeredValue2", \
    "StaggeredValue3", \
    "StaggeredDirectValue", \
    "StaggeredPreselProfile0", \
    "StaggeredPreselProfile1", \
    "StaggeredPreselProfile2", \
    "StaggeredPreselProfile3", \
    "StaggeredPreselProfileDirect", \
    "bcmFieldQaulifyPreselId", \
    "EthernetData", \
    "PreemptablePacket", \
    "VxlanClassValid", \
    "VxlanPacket", \
    "VxlanVnidVlanTranslateHit", \
    "VxlanPayloadVlanFormat", \
    "TunnelPayloadDstMac", \
    "TunnelPayloadSrcMac", \
    "TunnelPayloadEtherType", \
    "TunnelPayloadOuterVlan", \
    "TunnelPayloadOuterVlanId", \
    "TunnelPayloadOuterVlanPri", \
    "TunnelPayloadOuterVlanCfi", \
    "TunnelPayloadSip", \
    "TunnelPayloadDip", \
    "TunnelPayloadSip6", \
    "TunnelPayloadDip6", \
    "TunnelPayloadIpProtocol", \
    "TunnelPayloadL4DstPort", \
    "TunnelPayloadL4SrcPort", \
    "RoceBthOpcode", \
    "RoceBthPartitionKey", \
    "RoceBthDstQueuePair", \
    "RoceBthFlags", \
    "RoceVer1Pkt", \
    "RoceVer2Pkt", \
    "SrcPortSRType", \
    "DstPortSRType", \
    "SrcPortSRRoleInterlink", \
    "DstPortSRRoleInterlink", \
    "SrcPortSRMode", \
    "DstPortSRMode", \
    "SrcPortSRNetId", \
    "DstPortSRNetId", \
    "SrcPortSRLanId", \
    "DstPortSRLanId", \
    "SRTagType", \
    "SRLanId", \
    "SRNetId", \
    "VlanSREnable", \
    "VlanSRLanId", \
    "SRFlowId", \
    "L2DestSRNodeType", \
    "SRNetIdMatched", \
    "SRSrcNodeIsSan", \
    "SRSupervisionType", \
    "SRError", \
    "L2SrcMulticastHit", \
    "L2DstMulticastHit", \
    "SRDuplicate", \
    "TsnFlowId", \
    "ExternalValue6", \
    "ExternalValue7", \
    "ExternalHit6", \
    "ExternalHit7", \
    "MirrorDest", \
    "PacketIsIEEE1588", \
    "IEEE1588Encapsulation", \
    "IEEE1588CompensateTimeStamp", \
    "IEEE1588Command", \
    "IEEE1588HeaderOffset", \
    "HeaderFormatExtension", \
    "MacSecTagPresent", \
    "MacSecTag", \
    "MacSecDstMacRangeHit", \
    "FromMacSecPort", \
    "MacSecFlow", \
    "EgressBridgedForwardingDataHigh", \
    "EgressBridgedForwardingDataLow", \
    "EgressBridgedAclDataHigh", \
    "EgressBridgedAclDataLow", \
    "SysHdrType", \
    "SubportTagPresent", \
    "NetworkTagType", \
    "CnTagPresent", \
    "L2PktType", \
    "PktType", \
    "MplsCwPresent", \
    "MplsMcastEthertypePresent", \
    "Ipv4OptionHdrType", \
    "Ipv6ExtensionHdrType", \
    "OverlayVlanFormat", \
    "OverlayL2PktType", \
    "OverlayPktType", \
    "OverlayIpv4OptionHdrType", \
    "OverlayIpv6ExtensionHdrType", \
    "FrontPanelPkt", \
    "HiGigProxyTunnelType", \
    "IpFragPkt", \
    "OuterPriTaggedPkt", \
    "IpInIpPkt", \
    "IpmcV4Pkt", \
    "IpmcV6Pkt", \
    "IpChecksumOkPkt", \
    "NetworkTagMulticastPkt", \
    "IpTtlZeroPkt", \
    "PimBidirDfStatus", \
    "InterfaceClassL2Type", \
    "IntPktVersionOne", \
    "IntPktOverflowed", \
    "IntPktLengthValid", \
    "IntPktType", \
    "IntPktFinalHop", \
    "TunnelSubType", \
    "NshServicePathId", \
    "NshServiceIndex", \
    "KeyGenVar", \
    "RoeFrameType", \
    "BfdGoodPkt", \
    "BfdPktWithDstIpLoopbackAddr", \
    "MplsControlPkt", \
    "StageIngressFlowtracker", \
    "InterfaceClassMplsLookup1", \
    "InterfaceClassMplsLookup2", \
    "InterfaceClassMplsLookup3", \
    "InterfaceClassL3Tunnel", \
    "BfdPktVersionOne", \
    "GenevePktVersionZero", \
    "GpePktVersionZero", \
    "GenevePktWithOam", \
    "GpePktWithOam", \
    "InnerBfdPktVersionOne", \
    "PktDstAddrType", \
    "PktInnerDstAddrType", \
    "InnerL4Ports", \
    "TafEnable", \
    "TafGateId", \
    "TafGateState", \
    "TafCosProfile", \
    "ElkRangeL4DstPort", \
    "ElkRangeL4SrcPort", \
    "Ip6PktNextHeader", \
    "Ip6PktHopLimit", \
    "Ip6PktTrafficClass", \
    "InnerIp6PktNextHeader", \
    "InnerIp6PktHopLimit", \
    "InnerIp6PktTrafficClass", \
    "IpTunnelTtl", \
    "IpTunnelTtlClassZero", \
    "RangeCheckGroup", \
    "FlowtrackerGroupId", \
    "FlowtrackerClassId", \
    "FlowtrackerGroupValid", \
    "FlowtrackerDisabled", \
    "FlowtrackerMeteringExceeded", \
    "FlowtrackerCollectorCopy", \
    "FlowtrackerFlowTableFull", \
    "FlowtrackerGroupFlowExceeded", \
    "FlowtrackerExportQueueFull", \
    "OpaqueTagType", \
    "OpaqueTagHigh", \
    "OpaqueTagLow", \
    "InnerDosAttack", \
    "DosAttackEvents", \
    "InnerDosAttackEvents", \
    "SrcTMPort", \
    "Container", \
    "EgressForwardingClassId", \
    "PktFlowType", \
    "VlanTranslateClassId", \
    "IpIdentifier", \
    "TcpWindowSize", \
    "Ip4Length", \
    "Ip6Length", \
    "TunnelPayloadIp4Length", \
    "TunnelPayloadIp6Length", \
    "GbpPresent", \
    "HiGigGbpPresent", \
    "GbpSrcId", \
    "VxlanGbpPresent", \
    "FlowtrackerCheck", \
    "FlowtrackerLearn", \
    "CosMapSelect", \
    "OpaqueObject1", \
    "OpaqueObject2", \
    "OpaqueObject3", \
    "OpaqueObject4", \
    "IncomingOuterVlanId", \
    "GbpDstId", \
    "HiGigGbpSrcId", \
    "LoopbackSubtype", \
    "PphPresent", \
    "PacketProcessingInVportClass", \
    "UDHBase0", \
    "UDHBase1", \
    "UDHBase2", \
    "UDHBase3", \
    "NetworkQos", \
    "AceEntryId", \
    "Ip4Protocol", \
    "Ip4Tos", \
    "Ip4Ttl", \
    "InVportDataIndex", \
    "EtherTypeUntagged", \
    "NetworkLoadBalanceKeyInitial", \
    "NetworkLoadBalanceKey", \
    "EcmpLoadBalanceKey0Initial", \
    "EcmpLoadBalanceKey0", \
    "EcmpLoadBalanceKey1Initial", \
    "EcmpLoadBalanceKey1", \
    "EcmpLoadBalanceKey2Initial", \
    "EcmpLoadBalanceKey2", \
    "TrunkLoadBalanceKeyInitial", \
    "StateTableKey", \
    "StateTableData", \
    "CompareKeysResult0", \
    "CompareKeysResult1", \
    "CompareKeysTcam0", \
    "CompareKeysTcam1", \
    "LayerRecordType", \
    "LayerRecordOffset", \
    "LayerRecordQualifier", \
    "UDHBase", \
    "ForwardingLayerIndex", \
    "IPTProfile", \
    "AcInLifWideData", \
    "NativeAcInLifWideData", \
    "ForwardingProfile", \
    "ContextId", \
    "ForwardingLayerQualifier", \
    "TracePacket", \
    "TrunkLoadBalanceKey", \
    "Forward", \
    "ParsingStartType", \
    "ParsingStartOffset", \
    "UDHData0", \
    "UDHData1", \
    "UDHData2", \
    "UDHData3", \
    "RxSnoopStrength", \
    "RxSnoopCode", \
    "Visibility", \
    "VisibilityClear", \
    "EthernetMulticast", \
    "EthernetBroadcast", \
    "EthernetFirstTpidExist", \
    "EthernetFirstTpidIndex", \
    "EthernetSecondTpidExist", \
    "EthernetSecondTpidIndex", \
    "EthernetThirdTpidExist", \
    "EthernetThirdTpidIndex", \
    "IpHasOptions", \
    "IpFirstFrag", \
    "IpTunnelType", \
    "Ip6MulticastCompatible", \
    "Ip6FirstAdditionalHeaderExist", \
    "ItmhExtensionExist", \
    "ItmhDestinationFec", \
    "ItmhPphType", \
    "StatSamplingCode", \
    "StatSamplingQualifier", \
    "RpfEcmpMode", \
    "StatOamLM", \
    "InInterface", \
    "OutInterface", \
    "InVportClass", \
    "OutVportClass", \
    "InterfaceClass", \
    "PortClassPacketProcessing", \
    "PortClassTrafficManagement", \
    "OutPortTrafficManagement", \
    "MulticastRpfMode", \
    "Tpid", \
    "VlanId", \
    "VlanPri", \
    "VlanCfi", \
    "VlanPriCfi", \
    "Vlan", \
    "MplsLabel", \
    "MplsLabelId", \
    "MplsLabelTtl", \
    "MplsLabelBos", \
    "MplsLabelExp", \
    "InVPort0", \
    "InVPort1", \
    "OutVPort0", \
    "OutVPort1", \
    "OutVPort2", \
    "OutVPort3", \
    "BierStringOffset", \
    "BierStringSize", \
    "PacketIsBier", \
    "PortClassPacketProcessingGeneralData", \
    "ForwardingAdditionalInfo", \
    "InVportClass0", \
    "InVportClass1", \
    "StatId0", \
    "StatId1", \
    "StatId2", \
    "StatId3", \
    "StatId4", \
    "StatId5", \
    "StatId6", \
    "StatId7", \
    "StatId8", \
    "StatId9", \
    "StatProfile0", \
    "StatProfile1", \
    "StatProfile2", \
    "StatProfile3", \
    "StatProfile4", \
    "StatProfile5", \
    "StatProfile6", \
    "StatProfile7", \
    "StatProfile8", \
    "StatProfile9", \
    "ExtStat0", \
    "ExtStat1", \
    "ExtStat2", \
    "ExtStat3", \
    "ExtStatProfile0", \
    "ExtStatProfile1", \
    "ExtStatProfile2", \
    "ExtStatProfile3", \
    "StatMetaData", \
    "DstL3EgressUnderlay", \
    "DstL3EgressNextHopsUnderlay", \
    "EgressClassPort", \
    "INTProbeMarker1", \
    "INTProbeMarker2", \
    "INTReserved4Bytes", \
    "InVPort0Raw", \
    "InVPort1Raw", \
    "OutVPort0Raw", \
    "OutVPort1Raw", \
    "OutVPort2Raw", \
    "OutVPort3Raw", \
    "AppTypePredefined", \
    "FlowControlType", \
    "TimeStampTxPktType", \
    "SysHdrLocalDstport", \
    "MirrorCode", \
    "MirrorData", \
    "LearnVsi", \
    "LearnData", \
    "LearnStationMove", \
    "LearnMatch", \
    "LearnFound", \
    "LearnExpectedWon", \
    "VrfValue", \
    "InPortWithoutCore", \
    "DstSysPortExtPresent", \
    "IpFwdPlusOneNextProtocol", \
    "MacSecControlPkt", \
    "MacSecSecTagCbit", \
    "MacSecSecTagEbit", \
    "IOAMNameSpaceIdMatch", \
    "IOAMPktOverflowed", \
    "IOAMRemainingLenValid", \
    "SaLookupAcceptedStrength", \
    "LayerRecordTypeRaw", \
    "SrcPortRaw", \
    "SrcModPortGportRaw", \
    "DstMulticastGroupRaw", \
    "InInterfaceRaw", \
    "OutInterfaceRaw", \
    "InPortWithoutCoreRaw", \
    "VlanFormatRaw", \
    "InPortRaw", \
    "ColorRaw", \
    "DstGportRaw", \
    "DstPortRaw", \
    "OutPortRaw", \
    "DstRpfValid", \
    "RpfOutVPort", \
    "RpfOutInterface", \
    "RpfOutVPortRaw", \
    "RpfRouteValid", \
    "EcmpGroup", \
    "Ip4DstMulticast", \
    "IgmpType", \
    "L2IngressInterface", \
    "L3SrcHit", \
    "L3DestHit", \
    "L2MacInfo", \
    "L4Info", \
    "InnerPriTaggedPkt", \
    "HiGig3Class", \
    "HiGig3Flags", \
    "LoopbackHiGig3Flags", \
    "IpExtensionHdrNum", \
    "IngressL2InterfaceOpaqueCtrlId", \
    "DevicePortOpaqueCommand", \
    "IngressInterfaceClass", \
    "IngressL3InterfaceOpaqueCtrlId", \
    "SvpOpaqueCtrlId", \
    "VpnOpaqueCtrlId", \
    "L2SrcDiscard", \
    "L2LearnCommands", \
    "TunnelTermStatus", \
    "LoopbackHdrFlags", \
    "PacketStatus", \
    "ForwardingStatus", \
    "TunnelAltEtherType", \
    "TunnelAltSrcIp", \
    "TunnelAltSrcIp6", \
    "TunnelAltDstIp", \
    "TunnelAltDstIp6", \
    "TunnelAltIpProtocol", \
    "TunnelAltL4SrcPort", \
    "TunnelAltL4DstPort", \
    "OuterL2MacInfo", \
    "OuterIpInfo", \
    "OuterL4Info", \
    "InnerL2MacInfo", \
    "InnerIpInfo", \
    "InnerL4Info", \
    "EffectiveTtl", \
    "FlexStateResultA0", \
    "FlexStateResultA1", \
    "LastIpProtocol", \
    "MplsLabel4", \
    "MplsLabel4Ttl", \
    "MplsLabel4Bos", \
    "MplsLabel4Exp", \
    "MplsLabel4Id", \
    "MplsLabel5", \
    "MplsLabel5Ttl", \
    "MplsLabel5Bos", \
    "MplsLabel5Exp", \
    "MplsLabel5Id", \
    "MplsLabel6", \
    "MplsLabel6Ttl", \
    "MplsLabel6Bos", \
    "MplsLabel6Exp", \
    "MplsLabel6Id", \
    "MplsLabel7", \
    "MplsLabel7Ttl", \
    "MplsLabel7Bos", \
    "MplsLabel7Exp", \
    "MplsLabel7Id", \
    "L5PayloadByte1", \
    "L5PayloadByte2", \
    "L5PayloadByte3", \
    "L5PayloadByte4", \
    "L5PayloadByte5", \
    "L5PayloadByte6", \
    "L5PayloadByte7", \
    "L5PayloadByte8", \
    "OuterL5PayloadByte1", \
    "OuterL5PayloadByte2", \
    "OuterL5PayloadByte3", \
    "OuterL5PayloadByte4", \
    "OuterL5PayloadByte5", \
    "OuterL5PayloadByte6", \
    "OuterL5PayloadByte7", \
    "OuterL5PayloadByte8", \
    "ArpSrcMac", \
    "ArpDstMac", \
    "L2EgressInterface", \
    "Stg", \
    "CosQueueNum", \
    "CopyToCpu", \
    "CopyToCpuTruncate", \
    "McastPkt", \
    "UntagPkt", \
    "DoNotModify", \
    "TxPortType", \
    "RxPortType", \
    "MirrorPktType", \
    "PtpMsgType", \
    "PtpVersion", \
    "PtpPktCtrl", \
    "VlanMembershipCheck", \
    "InnerVlanTagPreserve", \
    "OuterVlanTagPreserve", \
    "ForwardingEligible", \
    "InterfaceClassMpls", \
    "L3Check", \
    "L2InterfaceMatch", \
    "ProtocolPktOpaqueCtrlId", \
    "LookupClassField", \
    "ExactMatchOpaqueObject0", \
    "IcmpType", \
    "OuterVlanRangeMatch", \
    "InnerVlanRangeMatch"  \
}

/* Field Qualifier Class (for bcm_field_qualifier_info_get()). */
typedef enum bcm_field_qualifier_class_e {
    bcmFieldQualifierClassMetaData = 0, /* Info taken from the packet's
                                           MetaData. Can use
                                           FieldInputTypeMetaData. */
    bcmFieldQualifierClassHeader = 1,   /* Info taken from the packet's header.
                                           Can use FieldInputTypeLayerFwd or
                                           FieldInputTypeLayerAbsolute. */
    bcmFieldQualifierClassLayerRecord = 2, /* Info taken from the packet's layer
                                           records. Can use
                                           FieldInputTypeLayerRecordsFwd or
                                           FieldInputTypeLayerRecordsAbsolute. */
    bcmFieldQualifierClassUserCreated = 3, /* User defined qualifier. Can use any
                                           input type. */
    bcmFieldQualifierClassCount = 4     /* Always Last. Not a usable value. */
} bcm_field_qualifier_class_t;

#define BCM_FIELD_QUALIFIERCLASS_STRINGS \
{ \
    "bcmFieldQualifierClassMetaData", \
    "bcmFieldQualifierClassHeader", \
    "bcmFieldQualifierClassLayerRecord", \
    "bcmFieldQualifierClassUserCreated"  \
}

/* 
 * Field Stage Type
 * 
 * Selects which pipeline stage an entry applies to.
 */
typedef enum bcm_field_stage_e {
    bcmFieldStageFirst = 0,             /* Earliest Field stage in device. */
    bcmFieldStageIngressEarly = 1,      /* Early Ingress Field stage. */
    bcmFieldStageIngressLate = 2,       /* Late Ingress Field stage. */
    bcmFieldStageDefault = 3,           /* Default stage for device. */
    bcmFieldStageLast = 4,              /* Latest Field stage in device. */
    bcmFieldStageIngress = 5,           /* Ingress stage, when there is only one
                                           such. */
    bcmFieldStageEgress = 6,            /* Egress field stage */
    bcmFieldStageExternal = 7,          /* External field stage */
    bcmFieldStageHash = 8,              /* Hashing stage */
    bcmFieldStageIngressExactMatch = 9, /* Ingress exact match stage */
    bcmFieldStageIngressFlowtracker = 10, /* Ingress flowtracker stage */
    bcmFieldStageIngressPMF1 = 11,      /* Stage Ingress PMF-1 */
    bcmFieldStageIngressPMF2 = 12,      /* Stage Ingress PMF-2 */
    bcmFieldStageIngressPMF3 = 13,      /* Stage Ingress PMF-3 */
    bcmFieldStageLookup = 14,           /* Stage Lookup */
    bcmFieldStageClass = 15,            /* Stage Class */
    bcmFieldStageEgressExtension = 16,  /* Extension of the egress field stage,
                                           performing actions later. */
    bcmFieldStageCount = 17             /* Always Last. Not a usable value. */
} bcm_field_stage_t;

#define BCM_FIELD_STAGE_STRINGS \
{ \
    "First", \
    "IngressEarly", \
    "IngressLate", \
    "Default", \
    "Last", \
    "Ingress", \
    "Egress", \
    "External", \
    "Hash", \
    "IngressExactMatch", \
    "IngressFlowtracker", \
    "IngressPMF1", \
    "IngressPMF2", \
    "IngressPMF3", \
    "Lookup", \
    "Class", \
    "EgressExtension"  \
}

/* 
 * information related to the preselectors management advance mode per
 * stage.
 */
typedef struct bcm_field_stage_info_s {
    int field_presel_advanced_mode;     /* is presel advanced mode enabled. */
    int field_presel_max_id;            /* The maximum presel id that can be
                                           defined for a new created program
                                           selector in advanced mode. */
    int field_presel_staggered_max_id;  /* The maximum presel id that can be
                                           defined for a new created program
                                           selector in staggered mode. */
} bcm_field_stage_info_t;

/* DATA qualifier object, used for creation of custom data qualifiers. */
typedef struct bcm_field_data_qualifier_s {
    int qual_id;                        /* Data qualifier id. */
    uint32 flags;                       /* Data qualifier flags
                                           BCM_FIELD_DATA_QUALIFIER_XXX. */
    bcm_field_data_offset_base_t offset_base; /* Offset base adjustment. */
    uint16 offset;                      /* Packet byte offset. */
    int length;                         /* Matched data byte length. */
    bcm_field_qualify_t qualifier;      /* Data qualifier based on a predefined
                                           qualifier. Used when
                                           BCM_FIELD_DATA_QUALIFIER_OFFSET_PREDEFINED
                                           is set. */
    bcm_field_stage_t stage;            /* Data qualifier stage (e.g. when based
                                           on predefined qualifiers). */
    uint8 name[BCM_FIELD_MAX_NAME_LEN]; /* Name for Data Qualifier. */
} bcm_field_data_qualifier_t;

#define BCM_FIELD_QUALIFY_MAX   (bcmFieldQualifyCount + BCM_FIELD_USER_NUM_UDFS) /* Must be >= bcmFieldQualifyCount. */

#define BCM_FIELD_QUALIFY_WIDTH_MAX 50         

#define BCM_FIELD_QSET_WIDTH_MAX    \
    ((BCM_FIELD_QUALIFY_WIDTH_MAX+1) * \
    bcmFieldQualifyCount + 1) 

#define BCM_FIELD_EXACT_MATCH_MASK  (~0)       /* Mask parameter value. */

/* 
 * Field Qualifier Decap.
 * 
 * Possible data values for bcm_field_qualify_decap().
 */
typedef enum bcm_field_decap_e {
    bcmFieldDecapNone = 0,          /* No Decap. */
    bcmFieldDecapL2Mpls = 1,        /* L2 MPLS Decap. */
    bcmFieldDecapL3Mpls = 2,        /* L3 MPLS Decap. */
    bcmFieldDecapOtherMPLS = 3,     /* non-L2 or L3 MPLS Decap. */
    bcmFieldDecapIpTunnel = 4,      /* IP Tunnel Decap. */
    bcmFieldDecapIpGreTunnel = 5,   /* IP GRE Tunnel Decap. */
    bcmFieldDecapIpUdpTunnel = 6,   /* IP UDP Tunnel Decap. */
    bcmFieldDecapIpPimTunnel = 7,   /* IP PIM Tunnel Decap. */
    bcmFieldDecapVxlan = 8,         /* VXLAN Decap. */
    bcmFieldDecapCount = 9          /* Always Last. Not a usable value. */
} bcm_field_decap_t;

#define BCM_FIELD_DECAP_STRINGS \
{ \
    "None", \
    "L2Mpls", \
    "L3Mpls", \
    "OtherMPLS", \
    "IpTunnel", \
    "IpGreTunnel", \
    "IpUdpTunnel", \
    "IpPimTunnel", \
    "Vxlan"  \
}

/* 
 * Field Qualifier Forwarding Type (for
 * bcm_field_qualify_ForwardingType).
 */
typedef enum bcm_field_ForwardingType_e {
    bcmFieldForwardingTypeAny = 0,      /* Don't care. */
    bcmFieldForwardingTypeL2 = 1,       /* L2 switching forwarding. */
    bcmFieldForwardingTypeL3 = 2,       /* L3 routing forwarding. */
    bcmFieldForwardingTypeL2Shared = 3, /* Shared vlan L2 forwarding. */
    bcmFieldForwardingTypeL2Independent = 4, /* Vlan based L2 forwarding. */
    bcmFieldForwardingTypeL2Vpn = 5,    /* VFI based L2 forwarding. */
    bcmFieldForwardingTypeL2VpnDirect = 6, /* L2 point to point vpn forwarding. */
    bcmFieldForwardingTypeL3Direct = 7, /* L3 predefined next hop forwarding. */
    bcmFieldForwardingTypeIp4Ucast = 8, /* IPv4 Unicast Routing forwarding. */
    bcmFieldForwardingTypeIp4Mcast = 9, /* IPv4 Multicast Routing forwarding. */
    bcmFieldForwardingTypeIp6Ucast = 10, /* IPv6 Unicast Routing forwarding. */
    bcmFieldForwardingTypeIp6Mcast = 11, /* IPv6 Multicast Routing forwarding. */
    bcmFieldForwardingTypeMpls = 12,    /* MPLS Switching forwarding. */
    bcmFieldForwardingTypeTrill = 13,   /* Trill forwarding. */
    bcmFieldForwardingTypeRxReason = 14, /* Forwarding according to a RxReason. */
    bcmFieldForwardingTypeTrafficManagement = 15, /* Traffic Management forwarding, when
                                           an external Packet Processor sets the
                                           forwarding decision. */
    bcmFieldForwardingTypeSnoop = 16,   /* Snooped packet. */
    bcmFieldForwardingTypeMplsLabel1 = 17, /* MPLS Switching forwarding according
                                           to the 1st label */
    bcmFieldForwardingTypeMplsLabel2 = 18, /* MPLS Switching forwarding according
                                           to the 2nd label */
    bcmFieldForwardingTypeMplsLabel3 = 19, /* MPLS Switching forwarding according
                                           to the 3rd label */
    bcmFieldForwardingTypeFCoE = 20,    /* Fiber Channel over Ethernet
                                           forwarding. */
    bcmFieldForwardingTypePortExtender = 21, /* VNTAG/ETAG based forwarding. */
    bcmFieldForwardingTypeCustom1 = 22, /* Custom_1 forwarding. */
    bcmFieldForwardingTypeCustom2 = 23, /* Custom_2 forwarding. */
    bcmFieldForwardingTypeL2SharedVpn = 24, /* Shared VFI based L2 Forwarding. */
    bcmFieldForwardingTypePortDirect = 25, /* Port based Point to Point Forwarding. */
    bcmFieldForwardingTypeSvpDirect = 26, /* SVP based Point to Point Forwarding. */
    bcmFieldForwardingTypeVlanDirect = 27, /* VLAN based Point to Point Forwarding. */
    bcmFieldForwardingTypeCount = 28    /* Always Last. Not a usable value. */
} bcm_field_ForwardingType_t;

#define BCM_FIELD_FORWARDINGTYPE_STRINGS \
{ \
    "Any", \
    "L2", \
    "L3", \
    "L2Shared", \
    "L2Independent", \
    "L2Vpn", \
    "L2VpnDirect", \
    "L3Direct", \
    "Ip4Ucast", \
    "Ip4Mcast", \
    "Ip6Ucast", \
    "Ip6Mcast", \
    "Mpls", \
    "Trill", \
    "RxReason", \
    "TrafficManagement", \
    "Snoop", \
    "MplsLabel1", \
    "MplsLabel2", \
    "MplsLabel3", \
    "FCoE", \
    "PortExtender", \
    "Custom1", \
    "Custom2", \
    "L2SharedVpn", \
    "PortDirect", \
    "SvpDirect", \
    "VlanDirect"  \
}

/* 
 * Field Qualifier HiGig Forwarding Type (for
 * bcm_field_qualify_HiGigForwardingType).
 */
typedef enum bcm_field_HiGigForwardingType_e {
    bcmFieldHiGigForwardingTypeControlPacket = 0, /* Control Packet. */
    bcmFieldHiGigForwardingTypeKnownL2 = 1, /* L2 Unicast/ Known L2 Multicast. */
    bcmFieldHiGigForwardingTypeKnownL3 = 2, /* L3 Unicast/ Known L3 Multicast. */
    bcmFieldHiGigForwardingTypeUnknownL2Multicast = 3, /* Unknown L2 Multicast. */
    bcmFieldHiGigForwardingTypeUnknownL3Multicast = 4, /* Unknown L3 Multicast. */
    bcmFieldHiGigForwardingTypeBroadcastOnUnknownL2Unicast = 5, /* Broadcast due to Unknown L2 Unicast. */
    bcmFieldHiGigForwardingTypeBroadcast = 6, /* Broadcast. */
    bcmFieldHiGigForwardingTypeCount = 7 /* Always Last. Not a usable value. */
} bcm_field_HiGigForwardingType_t;

#define BCM_FIELD_HIGIGFORWARDINGTYPE_STRINGS \
{ \
    "ControlPacket", \
    "KnownL2", \
    "KnownL3", \
    "UnknownL2Multicast", \
    "UnknownL3Multicast", \
    "BroadcastOnUnknownL2Unicast", \
    "Broadcast"  \
}

/* Field Qualifier Application Type (for bcm_field_qualify_AppType). */
typedef enum bcm_field_AppType_e {
    bcmFieldAppTypeAny = 0,             /* Don't care. */
    bcmFieldAppTypeL2 = 1,              /* L2 bridging. */
    bcmFieldAppTypeL2VpnDirect = 2,     /* Cross connect service. */
    bcmFieldAppTypeIp4Ucast = 3,        /* IPv4 Unicast Routing. */
    bcmFieldAppTypeIp4McastBidir = 4,   /* IPv4 Multicast BIDIR Routing. */
    bcmFieldAppTypeIp6Ucast = 5,        /* IPv6 Unicast Routing. */
    bcmFieldAppTypeIp6Mcast = 6,        /* IPv6 Multicast Routing forwarding. */
    bcmFieldAppTypeMpls = 7,            /* MPLS Switching forwarding. */
    bcmFieldAppTypeArp = 8,             /* ARP forwarding. */
    bcmFieldAppTypeTrillUcast = 9,      /* Trill Unicast forwarding. */
    bcmFieldAppTypeTrillMcast = 10,     /* Trill Multicast forwarding. */
    bcmFieldAppTypeL2TrillMcast = 11,   /* L2 Multicast after Trill termination. */
    bcmFieldAppTypeTrafficManagement = 12, /* Traffic Management forwarding, when
                                           an external Packet Processor sets the
                                           forwarding decision. */
    bcmFieldAppTypeMiM = 13,            /* MAC-in-MAC forwarding. */
    bcmFieldAppTypeL2MiM = 14,          /* L2 forwarding after MAC-in-MAC
                                           termination. */
    bcmFieldAppTypeIp4UcastRpf = 15,    /* IPv4 Unicast Routing (coupled to the
                                           RPF lookup). */
    bcmFieldAppTypeIp6UcastRpf = 16,    /* IPv6 Unicast Routing (coupled to the
                                           RPF lookup). */
    bcmFieldAppTypeIp4McastRpf = 17,    /* IPv4 Multicast Routing (coupled to
                                           the RPF lookup). */
    bcmFieldAppTypeCompIp4McastRpf = 18, /* Compatible IPv4 Multicast Routing
                                           (coupled to the RPF lookup). */
    bcmFieldAppTypeIp6McastRpf = 19,    /* IPv6 Multicast Routing (coupled to
                                           the RPF lookup). */
    bcmFieldAppTypeMplsCoupling = 20,   /* Coupling MPLS Switching. */
    bcmFieldAppTypeFCoE = 21,           /* FCoE without VFT and local D_ID. */
    bcmFieldAppTypeFCoETransit = 22,    /* Transit FCoE (bridging). */
    bcmFieldAppTypeFCoEVft = 23,        /* FCoE with VFT Routing. */
    bcmFieldAppTypeFCoERemote = 24,     /* FCoE without VFT and remote D_ID
                                           Routing. */
    bcmFieldAppTypeFCoEVftRemote = 25,  /* FCoE wth VFT and remote D_ID v. */
    bcmFieldAppTypeL2VpnExtended = 26,  /* Extended P2P forwarding. */
    bcmFieldAppTypeIp4MacSrcBind = 27,  /* IPV4-MAC Source bind. */
    bcmFieldAppTypeIp6MacSrcBind = 28,  /* IPV6-MAC Source bind. */
    bcmFieldAppTypeIp4SrcBind = 29,     /* IPV4 Source bind. */
    bcmFieldAppTypeIp6SrcBind = 30,     /* IPV6 Source bind. */
    bcmFieldAppTypeVplsGreIp = 31,      /* VPLS tunnel over GREoIP tunnel. */
    bcmFieldAppTypeFglTrillMcast = 32,  /* Fine-grained labeling Trill Multicast
                                           forwarding. */
    bcmFieldAppTypeBfdIp4SingleHop = 33, /* BFD ipv4 single hop. */
    bcmFieldAppTypeBfdEcho = 34,        /* BFD Echo. */
    bcmFieldAppTypeIp4DoubleCapacity = 35, /* IPv4 Unicast Routing with double
                                           capacity in external tcam. */
    bcmFieldAppTypeIp6UcastPublic = 36, /* IPv6 Unicast Public Routing. */
    bcmFieldAppTypeIp6UcastRpfPublic = 37, /* IPv6 Unicast Public Routing (coupled
                                           to the RPF lookup). */
    bcmFieldAppTypeIp4UcastPublic = 38, /* IPv4 Unicast Public Routing. */
    bcmFieldAppTypeIp4UcastRpfPublic = 39, /* IPv4 Unicast Public Routing (coupled
                                           to the RPF lookup). */
    bcmFieldAppTypeIp4McastL2Ssm = 40,  /* IPv4 L2 Source Specific Multicast
                                           forwarding. */
    bcmFieldAppTypeIp6McastL2Ssm = 41,  /* IPv6 L2 Source Specific Multicast
                                           forwarding. */
    bcmFieldAppTypeBfdIp6SingleHop = 42, /* BFD ipv6 single hop. */
    bcmFieldAppTypeCount = 43           /* Always Last. Not a usable value. */
} bcm_field_AppType_t;

#define BCM_FIELD_APPTYPE_STRINGS \
{ \
    "Any", \
    "L2", \
    "L2VpnDirect", \
    "Ip4Ucast", \
    "Ip4McastBidir", \
    "Ip6Ucast", \
    "Ip6Mcast", \
    "Mpls", \
    "Arp", \
    "TrillUcast", \
    "TrillMcast", \
    "L2TrillMcast", \
    "TrafficManagement", \
    "MiM", \
    "L2MiM", \
    "Ip4UcastRpf", \
    "Ip6UcastRpf", \
    "Ip4McastRpf", \
    "CompIp4McastRpf", \
    "Ip6McastRpf", \
    "MplsCoupling", \
    "FCoE", \
    "FCoETransit", \
    "FCoEVft", \
    "FCoERemote", \
    "FCoEVftRemote", \
    "L2VpnExtended", \
    "Ip4MacSrcBind", \
    "Ip6MacSrcBind", \
    "Ip4SrcBind", \
    "Ip6SrcBind", \
    "VplsGreIp", \
    "FglTrillMcast", \
    "BfdIp4SingleHop", \
    "BfdEcho", \
    "Ip4DoubleCapacity", \
    "Ip6UcastPublic", \
    "Ip6UcastRpfPublic", \
    "Ip4UcastPublic", \
    "Ip4UcastRpfPublic", \
    "Ip4McastL2Ssm", \
    "Ip6McastL2Ssm", \
    "BfdIp6SingleHop"  \
}

/* Field Qualifier LoopbackType (for bcm_field_qualify_LoopbackType). */
typedef enum bcm_field_LoopbackType_e {
    bcmFieldLoopbackTypeAny = 0,        /* Don't care. */
    bcmFieldLoopbackTypeMirror = 1,     /* Mirrored frames. */
    bcmFieldLoopbackTypeWlan = 2,       /* WLAN frames. */
    bcmFieldLoopbackTypeMim = 3,        /* Mac in Mac frames. */
    bcmFieldLoopbackTypeRedirect = 4,   /* Redirected frames. */
    bcmFieldLoopbackTypeTrillNetwork = 5, /* Trill network port loopback. */
    bcmFieldLoopbackTypeTrillAccess = 6, /* Trill access port loopback. */
    bcmFieldLoopbackTypeRegexMatch = 7, /* Regex NLF loopback packet. */
    bcmFieldLoopbackTypeMplsP2mp = 8,   /* MPLS P2MP second pass loopback
                                           packet. */
    bcmFieldLoopbackTypeQcn = 9,        /* QCN loopback packet. */
    bcmFieldLoopbackTypeWlanEncap = 10, /* WLAN ENCAP NLF loopback packet. */
    bcmFieldLoopbackTypeWlanEncapEncrypt = 11, /* WLAN ENCAP needs encryption loopback
                                           packet. */
    bcmFieldLoopbackTypeWlanDecap = 12, /* WLAN DECAP NLF loopback packet. */
    bcmFieldLoopbackTypePassThru = 13,  /* PassThru NLF loopback packet. */
    bcmFieldLoopbackTypeMplsExtendedLookup = 14, /* MPLS extended lookup packet. */
    bcmFieldLoopbackTypeL2Gre = 15,     /* L2 GRE loopback packet. */
    bcmFieldLoopbackTypeVxlan = 16,     /* Vxlan loopback packet. */
    bcmFieldLoopbackTypeTunnelAny = 17, /* MinM, L2GRE and VXLAN tunnel loopback
                                           packet. */
    bcmFieldLoopbackTypeMasquerade = 18, /* Process as if it was received on
                                           front panel port. */
    bcmFieldLoopbackTypeL2Tunnel2ndPassFlow = 19, /* L2 Tunnel second pass flow. */
    bcmFieldLoopbackTypeCount = 20      /* Always Last. Not a usable value. */
} bcm_field_LoopbackType_t;

#define BCM_FIELD_LOOPBACKTYPE_STRINGS \
{ \
    "Any", \
    "Mirror", \
    "Wlan", \
    "Mim", \
    "Redirect", \
    "TrillNetwork", \
    "TrillAccess", \
    "RegexMatch", \
    "MplsP2mp", \
    "Qcn", \
    "WlanEncap", \
    "WlanEncapEncrypt", \
    "WlanDecap", \
    "PassThru", \
    "MplsExtendedLookup", \
    "L2Gre", \
    "Vxlan", \
    "TunnelAny", \
    "Masquerade", \
    "L2Tunnel2ndPassFlow"  \
}

/* 
 * Field Qualifier Port Type (for
 * bcm_field_qualify_TxPortType/bcm_field_qualify_RxPortType).
 */
typedef enum bcm_field_PortType_e {
    bcmFieldPortTypeEthernet = 0,   /* Ethernet Port. */
    bcmFieldPortTypeCpu = 1,        /* CPU port. */
    bcmFieldPortTypeLoopback = 2,   /* Loopback Port. */
    bcmFieldPortTypeHiGig3 = 3,     /* HiGig3 Port. */
    bcmFieldPortTypeCount = 4       /* Always Last. Not a usable value. */
} bcm_field_PortType_t;

#define BCM_FIELD_PORTTYPE_STRINGS \
{ \
    "Ethernet", \
    "Cpu", \
    "Loopback", \
    "HiGig3"  \
}

/* 
 * Field Qualifier FibreChan (for bcm_field_qualify_FibreChanOuter and
 * bcm_field_qualify_FibreChanInner).
 */
typedef enum bcm_field_FibreChan_e {
    bcmFieldFibreChanAny = 0,       /* Don't care. */
    bcmFieldFibreChan = 1,          /* Standard Fibre Channel header. */
    bcmFieldFibreChanEncap = 2,     /* Encapsulation (ENC) header. */
    bcmFieldFibreChanVirtual = 3,   /* Virtual fabric tag (VFT) header. */
    bcmFieldFibreChanRouted = 4,    /* Interfabric routing (IFR) header. */
    bcmFieldFibreChanCount = 5      /* Always Last. Not a usable value. */
} bcm_field_FibreChan_t;

#define BCM_FIELD_FIBRECHAN_STRINGS \
{ \
    "Any", \
    "bcmFieldFibreChan", \
    "Encap", \
    "Virtual", \
    "Routed"  \
}

/* Field Qualifier TunnelType (for bcm_field_qualify_TunnelType). */
typedef enum bcm_field_TunnelType_e {
    bcmFieldTunnelTypeAny = 0,          /* Don't care. */
    bcmFieldTunnelTypeIp = 1,           /* IP in IP, Istap, GRE. */
    bcmFieldTunnelTypeMpls = 2,         /* MPLS. */
    bcmFieldTunnelTypeMim = 3,          /* Mac in Mac. */
    bcmFieldTunnelTypeWlanWtpToAc = 4,  /* WLAN access point to access control. */
    bcmFieldTunnelTypeWlanAcToAc = 5,   /* WLAN access control to access
                                           control. */
    bcmFieldTunnelTypeAutoMulticast = 6, /* IPV4 Automatic multicast. */
    bcmFieldTunnelTypeTrill = 7,        /* Trill. */
    bcmFieldTunnelTypeL2Gre = 8,        /* L2 GRE. */
    bcmFieldTunnelTypeIp6 = 9,          /* IPv6 termination. */
    bcmFieldTunnelTypeMplsControlWord = 10, /* MPLS with Control Word terminated. */
    bcmFieldTunnelTypeMplsLabel2 = 11,  /* 2 MPLS labels terminated. */
    bcmFieldTunnelTypeMplsLabel2ControlWord = 12, /* 2 MPLS labels with Control Word
                                           terminated. */
    bcmFieldTunnelTypeMplsLabel3 = 13,  /* 3 MPLS labels terminated. */
    bcmFieldTunnelTypeMplsLabel3ControlWord = 14, /* 3 MPLS labels with Control Word
                                           terminated. */
    bcmFieldTunnelTypeVxlan = 15,       /* Vxlan Tunnel Packet. */
    bcmFieldTunnelTypeNone = 16,        /* L2 termination. */
    bcmFieldTunnelTypeVxlanFlex = 17,   /* Vxlan Flex Tunnel Packet. */
    bcmFieldTunnelTypeGpe = 18,         /* GPE (Generic Protocol Extension for
                                           VXLAN) Tunnel Packet. */
    bcmFieldTunnelTypeGeneve = 19,      /* Geneve Tunnel Packet. */
    bcmFieldTunnelTypeMplsOverGre = 20, /* MPLS Over GRE Tunnel Packet. */
    bcmFieldTunnelTypeNsh = 21,         /* Network Service Header (NSH) Tunnel
                                           Packet. */
    bcmFieldTunnelTypeCount = 22        /* Always Last. Not a usable value. */
} bcm_field_TunnelType_t;

#define BCM_FIELD_TUNNELTYPE_STRINGS \
{ \
    "Any", \
    "Ip", \
    "Mpls", \
    "Mim", \
    "WlanWtpToAc", \
    "WlanAcToAc", \
    "AutoMulticast", \
    "Trill", \
    "L2Gre", \
    "Ip6", \
    "MplsControlWord", \
    "MplsLabel2", \
    "MplsLabel2ControlWord", \
    "MplsLabel3", \
    "MplsLabel3ControlWord", \
    "Vxlan", \
    "None", \
    "VxlanFlex", \
    "Gpe", \
    "Geneve", \
    "MplsOverGre", \
    "Nsh"  \
}

/* Field Qualifier IpType (for bcm_field_qualify_IpType). */
typedef enum bcm_field_IpType_e {
    bcmFieldIpTypeAny = 0,              /* Don't care. */
    bcmFieldIpTypeNonIp = 1,            /* Non-Ip packet. */
    bcmFieldIpTypeIpv4Not = 2,          /* Anything but IPv4 packets. */
    bcmFieldIpTypeIpv4NoOpts = 3,       /* IPv4 without options. */
    bcmFieldIpTypeIpv4WithOpts = 4,     /* IPv4 with options. */
    bcmFieldIpTypeIpv4Any = 5,          /* Any IPv4 packet. */
    bcmFieldIpTypeIpv6Not = 6,          /* Anything but IPv6 packets. */
    bcmFieldIpTypeIpv6NoExtHdr = 7,     /* IPv6 packet without any extension
                                           header. */
    bcmFieldIpTypeIpv6OneExtHdr = 8,    /* IPv6 packet with one extension
                                           header. */
    bcmFieldIpTypeIpv6TwoExtHdr = 9,    /* IPv6 packet with two or more
                                           extension headers. */
    bcmFieldIpTypeIpv6 = 10,            /* IPv6 packet. */
    bcmFieldIpTypeIp = 11,              /* IPv4 and IPv6 packets. */
    bcmFieldIpTypeArp = 12,             /* ARP/RARP. */
    bcmFieldIpTypeArpRequest = 13,      /* ARP Request. */
    bcmFieldIpTypeArpReply = 14,        /* ARP Reply. */
    bcmFieldIpTypeMplsUnicast = 15,     /* Mpls unicast frame (EtherType =
                                           0x8847). */
    bcmFieldIpTypeMplsMulticast = 16,   /* Mpls mcast frame   (EtherType =
                                           0x8848). */
    bcmFieldIpTypeTrill = 17,           /* Trill packet. */
    bcmFieldIpTypeMim = 18,             /* Mac-in-Mac frame. */
    bcmFieldIpTypeMpls = 19,            /* MPLS Packets. */
    bcmFieldIpTypeCfm = 20,             /* CFM Packets (0x8902). */
    bcmFieldIpTypeFCoE = 21,            /* Fiber Channel Packets (0x8906). */
    bcmFieldIpTypeCount = 22            /* Always Last. Not a usable value. */
} bcm_field_IpType_t;

#define BCM_FIELD_IPTYPE_STRINGS \
{ \
    "Any", \
    "NonIp", \
    "Ipv4Not", \
    "Ipv4NoOpts", \
    "Ipv4WithOpts", \
    "Ipv4Any", \
    "Ipv6Not", \
    "Ipv6NoExtHdr", \
    "Ipv6OneExtHdr", \
    "Ipv6TwoExtHdr", \
    "Ipv6", \
    "Ip", \
    "Arp", \
    "ArpRequest", \
    "ArpReply", \
    "MplsUnicast", \
    "MplsMulticast", \
    "Trill", \
    "Mim", \
    "Mpls", \
    "Cfm", \
    "FCoE"  \
}

/* 
 * Field Qualifier IpProtocolCommon (for
 * bcm_field_qualify_IpProtocolCommon).
 */
typedef enum bcm_field_IpProtocolCommon_e {
    bcmFieldIpProtocolCommonTcp = 0,    /* TCP Packets (6) */
    bcmFieldIpProtocolCommonUdp = 1,    /* UDP Packets (17) */
    bcmFieldIpProtocolCommonIgmp = 2,   /* IGMP Packets (2) */
    bcmFieldIpProtocolCommonIcmp = 3,   /* ICMP Packets (1) */
    bcmFieldIpProtocolCommonIp6Icmp = 4, /* IPv6 ICMP Packets (58) */
    bcmFieldIpProtocolCommonIp6HopByHop = 5, /* IPv6 Hop-by-Hop Packets (0) */
    bcmFieldIpProtocolCommonIpInIp = 6, /* IPv4 Payload Packets (4) */
    bcmFieldIpProtocolCommonTcpUdp = 7, /* TCP and UDP Packets (6 & 17) */
    bcmFieldIpProtocolCommonUnknown = 8, /* Not-standard IP Protocol. */
    bcmFieldIpProtocolCommonIp6InIp = 9, /* IPv6 (0x29) */
    bcmFieldIpProtocolCommonMplsInIp = 10, /* MPLS (0x89) */
    bcmFieldIpProtocolCommonCount = 11  /* Always Last. Not a usable value. */
} bcm_field_IpProtocolCommon_t;

#define BCM_FIELD_IPPROTOCOLCOMMON_STRINGS \
{ \
    "Tcp", \
    "Udp", \
    "Igmp", \
    "Icmp", \
    "Ip6Icmp", \
    "Ip6HopByHop", \
    "IpInIp", \
    "TcpUdp", \
    "Unknown", \
    "Ip6InIp", \
    "MplsInIp"  \
}

/* Field Qualifier IpFrag (for bcm_field_qualify_IpFrag). */
typedef enum bcm_field_IpFrag_e {
    bcmFieldIpFragNon = 0,          /* Non-fragmented packet. */
    bcmFieldIpFragFirst = 1,        /* First fragment of fragmented packet. */
    bcmFieldIpFragNonOrFirst = 2,   /* Non-fragmented or first fragment. */
    bcmFieldIpFragNotFirst = 3,     /* Not the first fragment. */
    bcmFieldIpFragAny = 4,          /* Any fragment of fragmented packet. */
    bcmFieldIpFragCount = 5         /* Always last. Not a usable value. */
} bcm_field_IpFrag_t;

/* Urpf mode */
typedef enum bcm_field_urpf_mode_e {
    bcmFieldUrpfLoose = 0,  /* Loose mode Unicast RPF. */
    bcmFieldUrpfStrict = 1, /* Strict mode Unicast RPF */
    bcmFieldUrpfCount = 2   /* Always Last. Not a usable value. */
} bcm_field_urpf_mode_t;

/* 
 * Field Qualifier L2Format (for bcm_field_qualify_L2Format).
 * Used to qualify packets based on L2 header format.
 */
typedef enum bcm_field_L2Format_e {
    bcmFieldL2FormatAny = 0,            /* Do not qualify on L2 format. */
    bcmFieldL2FormatEthII = 1,          /* Ethernet 2 (802.2). */
    bcmFieldL2FormatSnap = 2,           /* Sub-Network Access Protocol (SNAP). */
    bcmFieldL2FormatLlc = 3,            /* Logical Link Control. */
    bcmFieldL2Format802dot3 = 4,        /* 802.3 frame format. */
    bcmFieldL2FormatDeprecated5 = 5,    /* Deprecated. Do not use. */
    bcmFieldL2FormatMiM = 6,            /* MAC-In-MAC. */
    bcmFieldL2FormatCount = 7           /* Always Last. Not a usable value. */
} bcm_field_L2Format_t;

#define BCM_FIELD_L2FORMAT_STRINGS \
{ \
    "Any", \
    "EthII", \
    "Snap", \
    "Llc", \
    "802dot3", \
    "Deprecated5", \
    "MiM"  \
}

/* 
 * Field action olp_header_type (for bcmFieldActionOamOlpHeaderAdd).
 * Used to specify the type of the OLP header to be added.
 */
typedef enum bcm_field_olp_header_type_e {
    bcmFieldOlpHeaderTypeEthCC = 0,     /* Ethernet Oam Down MEP Ccm packet. */
    bcmFieldOlpHeaderTypeEthOamCcm = bcmFieldOlpHeaderTypeEthCC, /* Ethernet Oam Down MEP Ccm packet. */
    bcmFieldOlpHeaderTypeEthLmDm = 1,   /* Ethernet Oam Down MEP LM/DM packet. */
    bcmFieldOlpHeaderTypeEthOamLmDm = bcmFieldOlpHeaderTypeEthLmDm, /* Ethernet Oam Down MEP LM/DM packet. */
    bcmFieldOlpHeaderTypeEthOthers = 2, /* Ethernet Oam Down MEP Other opcode
                                           packet. */
    bcmFieldOlpHeaderTypeEthOamOthers = bcmFieldOlpHeaderTypeEthOthers, /* Ethernet Oam Down MEP Other opcode
                                           packet. */
    bcmFieldOlpHeaderTypeBfdOam = 3,    /* BFD Oam packet */
    bcmFieldOlpHeaderTypeEthOamLm = 4,  /* Ethernet Oam Down Mep LM packet */
    bcmFieldOlpHeaderTypeEthOamDm = 5,  /* Ethernet Oam Down Mep DM packet */
    bcmFieldOlpHeaderTypeBhhOamCcm = 6, /* BHH OAM CCM packet */
    bcmFieldOlpHeaderTypeBhhOamLm = 7,  /* BHH Oam LM packet */
    bcmFieldOlpHeaderTypeBhhOamDm = 8,  /* BHH Oam DM packet */
    bcmFieldOlpHeaderTypeBhhOamOthers = 9, /* BHH OAM other opcode type packet */
    bcmFieldOlpHeaderTypeRfc6374Dlm = 10, /* MPLS LM/DM DLM packet */
    bcmFieldOlpHeaderTypeRfc6374Dm = 11, /* MPLS LM/DM DM packet */
    bcmFieldOlpHeaderTypeRfc6374DlmPlusDm = 12, /* MPLS LM/DM DLM + DM packet */
    bcmFieldOlpHeaderTypeRfc6374Ilm = 13, /* MPLS LM/DM ILM packet */
    bcmFieldOlpHeaderTypeRfc6374IlmPlusDm = 14, /* MPLS LM/DM ILM + DM packet */
    bcmFieldOlpHeaderTypeSat = 15,      /* Down Service Activation Test packet */
    bcmFieldOlpHeaderTypeOtherAch = 16, /* OAM packets with other ACH types */
    bcmFieldOlpHeaderTypeEthOamUpMepCcm = 17, /* Ethernet Oam Up MEP Ccm packet. */
    bcmFieldOlpHeaderTypeEthOamUpMepLm = 18, /* Ethernet Oam Up MEP Lm packet. */
    bcmFieldOlpHeaderTypeEthOamUpMepDm = 19, /* Ethernet Oam Up MEP Dm packet. */
    bcmFieldOlpHeaderTypeEthOamUpMepOthers = 20, /* Ethernet Oam Up MEP Other opcode
                                           packet. */
    bcmFieldOlpHeaderTypeUpSat = 21,    /* Up Service Activation Test packet. */
    bcmFieldOlpHeaderTypeMacSecEncrypt = 22, /* OLP header type for MACSEC Encrypt
                                           flow. */
    bcmFieldOlpHeaderTypeMacSecDecrypt = 23, /* OLP header type for MACSEC Decrypt
                                           flow. */
    bcmFieldOlpHeaderTypeCount = 24     /* Always Last. Not a usable value. */
} bcm_field_olp_header_type_t;

#define BCM_FIELD_OLP_HEADER_TYPE_STRINGS \
{ \
    "EthCC", \
    "EthLmDm", \
    "EthOthers", \
    "BfdOam", \
    "EthOamLm", \
    "EthOamDm", \
    "BhhOamCcm", \
    "BhhOamLm", \
    "BhhOamDm", \
    "BhhOamOthers", \
    "Rfc6374Dlm", \
    "Rfc6374Dm", \
    "Rfc6374DlmPlusDm", \
    "Rfc6374Ilm", \
    "Rfc6374IlmPlusDm", \
    "Sat", \
    "OtherAch", \
    "EthOamUpMepCcm", \
    "EthOamUpMepLm", \
    "EthOamUpMepDm", \
    "EthOamUpMepOthers", \
    "UpSat", \
    "MacSecEncrypt", \
    "MacSecDecrypt"  \
}

/* 
 * Field action oam_domain (for bcmFieldActionOamDomain).
 * Used to specify the OAM domain on which endpoints lookup has to be
 * done.
 */
typedef enum bcm_field_oam_domain_e {
    bcmFieldOamDomainCVlan = 0,         /* Endpoints configured on C-VLAN. */
    bcmFieldOamDomainSVlan = 1,         /* Endpoints configured on S-VLAN. */
    bcmFieldOamDomainDoubleVlan = 2,    /* Endpoints configured on S+C-VLAN. */
    bcmFieldOamDomainPbbTe = 3,         /* Endpoints configured on PBB-TE. */
    bcmFieldOamDomainMplsLmDmSectionPort = 4, /* RFC 6374 Section - Port based
                                           loss/delay measurement. */
    bcmFieldOamDomainMplsLmDmSectionInnerVlan = 5, /* RFC 6374 Section - Port + Inner vlan
                                           based loss/delay measurement. */
    bcmFieldOamDomainMplsLmDmSectionOuterVlan = 6, /* RFC 6374 Section - Port + Outer vlan
                                           based loss/delay measurement. */
    bcmFieldOamDomainMplsLmDmSectionOuterPlusInnerVlan = 7, /* RFC 6374 Section - Port + Outer vlan
                                           + Inner Vlan based loss/delay
                                           measurement. */
    bcmFieldOamDomainMplsLmDmPw = 8,    /* RFC 6374 Pseudowire based loss/delay
                                           measurement. */
    bcmFieldOamDomainMplsLmDmLspLabel = 9, /* RFC 6374 LSP based loss/delay
                                           measurement. */
    bcmFieldOamDomainCount = 10         /* Always Last. Not a usable value. */
} bcm_field_oam_domain_t;

#define BCM_FIELD_OAM_DOMAIN_STRINGS \
{ \
    "CVlan", \
    "SVlan", \
    "DoubleVlan", \
    "PbbTe", \
    "MplsLmDmSectionPort", \
    "MplsLmDmSectionInnerVlan", \
    "MplsLmDmSectionOuterVlan", \
    "MplsLmDmSectionOuterPlusInnerVlan", \
    "MplsLmDmPw", \
    "MplsLmDmLspLabel"  \
}

/* 
 * Field Qualify oam_drop_mep_type (for bcmFieldQualifyIngressDropXXX).
 * Used to Qualify on Drop reasons related to OAM Data or Control packets
 * based on MEP type.
 */
typedef enum bcm_field_oam_drop_mep_type_e {
    bcmFieldOamDropInvalid = 0,         /* Invalid. */
    bcmFieldOamDropPortDownMepControl = 1, /* Drop Reasons for Port Down MEP
                                           control packets. */
    bcmFieldOamDropPortDownMepData = 2, /* Drop Reasons for Port Down MEP data
                                           packets. */
    bcmFieldOamDropInnerVlanDownMepControl = 3, /* Drop Reasons for Inner Vlan Down MEP
                                           control packets. */
    bcmFieldOamDropInnerVlanDownMepData = 4, /* Drop Reasons for Inner Vlan Down MEP
                                           data packets. */
    bcmFieldOamDropOuterVlanDownMepControl = 5, /* Drop Reasons for Outer Vlan Down MEP
                                           control packets. */
    bcmFieldOamDropOuterVlanDownMepData = 6, /* Drop Reasons for Outer Vlan Down MEP
                                           data packets. */
    bcmFieldOamDropInnerPlusOuterVlanDownMepControl = 7, /* Drop Reasons for Inner + Outer Vlan
                                           Down MEP control packets. */
    bcmFieldOamDropInnerPlusOuterVlanDownMepData = 8, /* Drop Reasons for Inner + Outer Vlan
                                           Down MEP data packets. */
    bcmFieldOamDropInnerVlanUpMepData = 9, /* Drop Reasons for Inner Vlan Up MEP
                                           data packets. */
    bcmFieldOamDropOuterVlanUpMepData = 10, /* Drop Reasons for Outer Vlan Up MEP
                                           data packets. */
    bcmFieldOamDropInnerPlusOuterVlanUpMepData = 11, /* Drop Reasons for Inner + Outer Vlan
                                           Up MEP data packets. */
    bcmFieldOamDropSectionPortMepControl = 12, /* Drop Reasons for Port Section MEP
                                           control packets. */
    bcmFieldOamDropSectionPortMepData = 13, /* Drop Reasons for Port Section MEP
                                           data packets. */
    bcmFieldOamDropSectionInnerVlanMepControl = 14, /* Drop Reasons for Inner  Vlan Section
                                           MEP control packets. */
    bcmFieldOamDropSectionInnerVlanMepData = 15, /* Drop Reasons for Inner Vlan Section
                                           MEP data packets. */
    bcmFieldOamDropSectionOuterVlanMepControl = 16, /* Drop Reasons for Outer Vlan Section
                                           MEP control packets. */
    bcmFieldOamDropSectionOuterVlanMepData = 17, /* Drop Reasons for Outer Vlan Section
                                           MEP data packets. */
    bcmFieldOamDropSectionInnerPlusOuterVlanMepControl = 18, /* Drop Reasons for Inner + Outer Vlan
                                           Section MEP control packets. */
    bcmFieldOamDropSectionInnerPlusOuterVlanMepData = 19, /* Drop Reasons for Inner + Outer Vlan
                                           Section MEP data packets. */
    bcmFieldOamDropLSPMepControl = 20,  /* Drop Reasons for LSP MEP control
                                           packets. */
    bcmFieldOamDropLSPMepData = 21,     /* Drop Reasons for LSP MEP data
                                           packets. */
    bcmFieldOamDropPwMepControl = 22,   /* Drop Reasons for PsuedoWire MEP
                                           control packets. */
    bcmFieldOamDropPwMepData = 23,      /* Drop Reasons for PsuedoWire MEP data
                                           packets. */
    bcmFieldOamDropCount = 24           /* Always Last. Not a usable value. */
} bcm_field_oam_drop_mep_type_t;

#define BCM_FIELD_OAM_DROP_MEP_TYPE_STRINGS \
{ \
    "Invalid", \
    "PortDownMepControl", \
    "PortDownMepData", \
    "InnerVlanDownMepControl", \
    "InnerVlanDownMepData", \
    "OuterVlanDownMepControl", \
    "OuterVlanDownMepData", \
    "InnerPlusOuterVlanDownMepControl", \
    "InnerPlusOuterVlanDownMepData", \
    "InnerVlanUpMepData", \
    "OuterVlanUpMepData", \
    "InnerPlusOuterVlanUpMepData", \
    "SectionPortMepControl", \
    "SectionPortMepData", \
    "SectionInnerVlanMepControl", \
    "SectionInnerVlanMepData", \
    "SectionOuterVlanMepControl", \
    "SectionOuterVlanMepData", \
    "SectionInnerPlusOuterVlanMepControl", \
    "SectionInnerPlusOuterVlanMepData", \
    "LSPMepControl", \
    "LSPMepData", \
    "PwMepControl", \
    "PwMepData"  \
}

/* LLC Header Format. */
typedef struct bcm_field_llc_header_s {
    uint8 dsap; 
    uint8 ssap; 
    uint8 control; 
} bcm_field_llc_header_t;

/* SNAP Header Format. */
typedef struct bcm_field_snap_header_s {
    uint32 org_code; 
    uint16 type; 
} bcm_field_snap_header_t;

/* 
 * Range Check.
 * 
 * bcm_field_range_create requires exactly one of SRCPORT or DSTPORT or
 * FIELD_RANGE_OUTER_VLAN or FIELD_RANGE_PACKET_LENGTH.
 */
#define BCM_FIELD_RANGE_SRCPORT         0x00000001 /* Check source port range */
#define BCM_FIELD_RANGE_DSTPORT         0x00000002 /* Check dest port range */
#define BCM_FIELD_RANGE_TCP             0x00000004 /* Check TCP port range */
#define BCM_FIELD_RANGE_UDP             0x00000008 /* Check UDP port range */
#define BCM_FIELD_RANGE_INVERT          0x00000010 /* Check for match outside
                                                      specified port range */
#define BCM_FIELD_RANGE_EXTERNAL        0x00000020 /* Create range checker on
                                                      External table (5661x
                                                      only) */
#define BCM_FIELD_RANGE_OUTER_VLAN      0x00000040 /* Check outer VLAN ID range */
#define BCM_FIELD_RANGE_INNER_VLAN      0x00000080 /* Check inner VLAN ID range */
#define BCM_FIELD_RANGE_PACKET_LENGTH   0x00000100 /* Check packet length range */
#define BCM_FIELD_RANGE_LOOKUP          0x00000200 /* Create range checker on
                                                      Lookup table */
#define BCM_FIELD_RANGE_OUT_VPORT       0x00000400 /* Check OutVPort range */
#define BCM_FIELD_RANGE_REPLACE         0x00000800 /* Modify configurations of
                                                      an existing range checker.
                                                      Using this flag, the Range
                                                      checker's range limits
                                                      (min/max) and Type can be
                                                      modified dynamically. */

/* Opaque handle to a field range. */
typedef uint32 bcm_field_range_t;

/* Field udf_spec defines the locations of user-defined byte fields. */
typedef struct bcm_field_udf_spec_s {
    uint32 offset[384]; 
} bcm_field_udf_spec_t;

/* Field qset defines the set of fields used for lookup. */
typedef struct bcm_field_qset_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(BCM_FIELD_QUALIFY_MAX)]; 
    SHR_BITDCL udf_map[_SHR_BITDCLSIZE(BCM_FIELD_USER_NUM_UDFS)]; 
} bcm_field_qset_t;

#define BCM_FIELD_QSET_INIT(qset)  \
    sal_memset(&(qset), 0, sizeof(bcm_field_qset_t)) 

#define BCM_FIELD_QSET_ADD(qset, q)  SHR_BITSET(((qset).w), (q)) 

#define BCM_FIELD_QSET_REMOVE(qset, q)  SHR_BITCLR(((qset).w), (q)) 

#define BCM_FIELD_QSET_TEST(qset, q)  SHR_BITGET(((qset).w), (q)) 

/* 
 * Group Priority.
 * 
 * Numerically higher values are higher priority. Each priority value may
 * be used only once. BCM_FIELD_GROUP_PRIO_ANY can be used to have a
 * priority assigned automatically.
 */
#define BCM_FIELD_GROUP_PRIO_ANY    -0x7fffffff 

/* 
 * Copy To CPU Flags.
 * 
 * bcm_field_action_copytocpu_config_set requires atleast of these flags
 * to be configured for CopyToCpu action.
 */
#define BCM_FIELD_COPYTOCPU_GREEN_PACKET    0x00000001 /* Copy to CPU only Green
                                                          Packets regardless of
                                                          its drop */
#define BCM_FIELD_COPYTOCPU_YELLOW_PACKET   0x00000002 /* Copy to CPU only
                                                          Yellow Packets
                                                          regardless of its drop */
#define BCM_FIELD_COPYTOCPU_RED_PACKET      0x00000004 /* Copy to CPU only Red
                                                          Packets regardless of
                                                          its drop */
#define BCM_FIELD_COPYTOCPU_ALL_PACKET      0x00000007 /* Copy to CPU All
                                                          Packets regardless of
                                                          its drop */
#define BCM_FIELD_COPYTOCPU_TRUNCATE        0x00000008 /* Copy to CPU only the
                                                          first cell of Packets */
#define BCM_FIELD_COPYTOCPU_GREEN_DROPPED_PACKET 0x00000010 /* Copy to CPU only
                                                          Dropped Green Packets */
#define BCM_FIELD_COPYTOCPU_YELLOW_DROPPED_PACKET 0x00000020 /* Copy to CPU only
                                                          Dropped Yellow Packets */
#define BCM_FIELD_COPYTOCPU_RED_DROPPED_PACKET 0x00000040 /* Copy to CPU only
                                                          Dropped Red Packets */
#define BCM_FIELD_COPYTOCPU_DROPPED_PACKET  0x00000070 /* Copy to CPU All
                                                          Dropped Packets */
#define BCM_FIELD_COPYTOCPU_GREEN_NOT_DROPPED_PACKET 0x00000080 /* Copy to CPU only
                                                          Non-dropped Green
                                                          Packets */
#define BCM_FIELD_COPYTOCPU_YELLOW_NOT_DROPPED_PACKET 0x00000100 /* Copy to CPU only
                                                          Non-dropped Yellow
                                                          Packets */
#define BCM_FIELD_COPYTOCPU_RED_NOT_DROPPED_PACKET 0x00000200 /* Copy to CPU only
                                                          Non-dropped Red
                                                          Packets */
#define BCM_FIELD_COPYTOCPU_NOT_DROPPED_PACKET 0x00000380 /* Copy to CPU All
                                                          Non-dropped Packets */

/* Field CopyToCpu Config Format. */
typedef struct bcm_field_CopyToCpu_config_s {
    uint32 flags;       /* CopyToCpu flags (BCM_FIELD_COPYTOCPU_XXX). */
    uint32 match_rule;  /* CopyToCpu matched rule ID. */
} bcm_field_CopyToCpu_config_t;

/* 
 * Redirect Flags.
 * 
 * bcm_field_action_redirect_config_set requires atleast of these flags
 * to be configured for Redirect action.
 */
#define BCM_FIELD_REDIRECT_GREEN_PACKET     0x00000001 /* Redirect only Green
                                                          Packets regardless of
                                                          its drop */
#define BCM_FIELD_REDIRECT_YELLOW_PACKET    0x00000002 /* Redirect only Yellow
                                                          Packets regardless of
                                                          its drop */
#define BCM_FIELD_REDIRECT_RED_PACKET       0x00000004 /* Redirect only Red
                                                          Packets regardless of
                                                          its drop */
#define BCM_FIELD_REDIRECT_ALL_PACKET       0x00000007 /* Redirect All Packets
                                                          regardless of its drop */
#define BCM_FIELD_REDIRECT_TRUNCATE         0x00000008 /* Redirect only the
                                                          first cell of Packets */
#define BCM_FIELD_REDIRECT_SOURCE_USE_ORIGINAL_SOURCE 0x00000010 /* Use original packet
                                                          source as Redirected
                                                          packet source */
#define BCM_FIELD_REDIRECT_SOURCE_USE_ORIGINAL_DESTINATION 0x00000020 /* Use original packet
                                                          destination as
                                                          Redirected packet
                                                          source */
#define BCM_FIELD_REDIRECT_SOURCE_USE_CONFIGURED 0x00000040 /* Use configured source
                                                          as Redirected packet
                                                          source */
#define BCM_FIELD_REDIRECT_GREEN_DROPPED_PACKET 0x00000080 /* Redirect only Dropped
                                                          Green Packets */
#define BCM_FIELD_REDIRECT_YELLOW_DROPPED_PACKET 0x00000100 /* Redirect only Dropped
                                                          Yellow Packets */
#define BCM_FIELD_REDIRECT_RED_DROPPED_PACKET 0x00000200 /* Redirect only Dropped
                                                          Red Packets */
#define BCM_FIELD_REDIRECT_DROPPED_PACKET   0x00000380 /* Redirect All Dropped
                                                          Packets */
#define BCM_FIELD_REDIRECT_GREEN_NOT_DROPPED_PACKET 0x00000400 /* Redirect only
                                                          Non-dropped Green
                                                          Packets */
#define BCM_FIELD_REDIRECT_YELLOW_NOT_DROPPED_PACKET 0x00000800 /* Redirect only
                                                          Non-dropped Yellow
                                                          Packets */
#define BCM_FIELD_REDIRECT_RED_NOT_DROPPED_PACKET 0x00001000 /* Redirect only
                                                          Non-dropped Red
                                                          Packets */
#define BCM_FIELD_REDIRECT_NOT_DROPPED_PACKET 0x00001C00 /* Redirect All
                                                          Non-dropped Packets */

/* 
 * Field action Redirection (for bcmFieldActionRedirect).
 * Used to specify the Redirection type in
 * bcm_field_action_redirect_config_set.
 */
typedef enum bcm_field_redirect_destination_type_e {
    bcmFieldRedirectDestinationInvalid = 0, /* Invalid. */
    bcmFieldRedirectDestinationPort = 1, /* Destination Port. */
    bcmFieldRedirectDestinationTrunk = 2, /* Destination Trunk. */
    bcmFieldRedirectDestinationMCast = 3, /* Destination L2 Multicast. */
    bcmFieldRedirectDestinationCount = 4 /* Always Last. Not a usable value. */
} bcm_field_redirect_destination_type_t;

#define BCM_FIELD_REDIRECTION_STRINGS \
{ \
    "Invalid", \
    "Port", \
    "Trunk", \
    "MCast"  \
}

/* Field Redirect Config Format. */
typedef struct bcm_field_redirect_config_s {
    uint32 flags;                       /* Redirect flags
                                           (BCM_FIELD_REDIRECT_XXX). */
    bcm_field_redirect_destination_type_t destination_type; /* Destination type. */
    int destination;                    /* Destination of the re-directed
                                           packets. */
    int source_port;                    /* Source port to use for re-directed
                                           packets. */
} bcm_field_redirect_config_t;

/* Different Flow tracker timestamp mode. */
typedef enum bcm_field_flowtracker_timestamp_delay_mode_e {
    bcmFieldFlowtrackerTimestampDelayModeGeneric = 0, /* 48-Bit Generic Mode */
    bcmFieldFlowtrackerTimestampDelayModeNTP = 1, /* 64-Bit NTP Mode */
    bcmFieldFlowtrackerTimestampDelayModePTP = 2, /* 64-Bit PTP Mode */
    bcmFieldFlowtrackerTimestampDelayModeCount = 3 /* Always Last. Not a usable value. */
} bcm_field_flowtracker_timestamp_delay_mode_t;

#define BCM_FIELD_FLOWTRACKER_TIMESTAMP_DELAY_MODE_STRINGS \
{ \
    "bcmFieldFlowtrackerTimestampDelayModeGeneric", \
    "bcmFieldFlowtrackerTimestampDelayModeNTP", \
    "bcmFieldFlowtrackerTimestampDelayModePTP"  \
}

/* bcm_field_action_e */
typedef enum bcm_field_action_e {
    bcmFieldActionCosQNew = 0,          /* Change CoS Queue; param0: New CoS
                                           Queue. */
    bcmFieldActionCosQCpuNew = 1,       /* Change CoS Queue when CopyToCpu;
                                           param0: New CoS Queue. */
    bcmFieldActionVlanCosQNew = 2,      /* Change VLAN CoS Queue; param0: New
                                           CoS Queue. */
    bcmFieldActionUcastCosQNew = 3,     /* Change CoS Queue for unicast packets;
                                           param0: New CoS Queue. */
    bcmFieldActionMcastCosQNew = 4,     /* Change CoS Queue for multicast
                                           packets; param0: New CoS Queue. */
    bcmFieldActionPrioPktAndIntCopy = 5, /* Pkt & internal priority from inner
                                           tag. */
    bcmFieldActionPrioPktAndIntNew = 6, /* Pkt & internal priority from arg;
                                           param0: New priority. */
    bcmFieldActionPrioPktAndIntTos = 7, /* Pkt & internal priority from TOS
                                           field. */
    bcmFieldActionPrioPktAndIntCancel = 8, /* Override another rule. */
    bcmFieldActionPrioPktCopy = 9,      /* Pkt priority from inner tag. */
    bcmFieldActionPrioPktNew = 10,      /* Pkt priority from arg; param0: New
                                           priority. */
    bcmFieldActionPrioPktTos = 11,      /* Pkt priority from TOS field. */
    bcmFieldActionPrioPktCancel = 12,   /* Override another rule. */
    bcmFieldActionPrioIntCopy = 13,     /* Internal priority from inner tag. */
    bcmFieldActionPrioIntNew = 14,      /* Internal priority from arg; param0:
                                           New priority. */
    bcmFieldActionPrioIntTos = 15,      /* Internal priority from TOS field. */
    bcmFieldActionPrioIntCancel = 16,   /* Override another rule. */
    bcmFieldActionTosNew = 17,          /* Change TOS value in IP header;
                                           param0: New TOS value. */
    bcmFieldActionTosCopy = 18,         /* Copy priority from outer tag to IP
                                           hdr. */
    bcmFieldActionTosCancel = 19,       /* Override another rule. */
    bcmFieldActionDscpNew = 20,         /* Change DSCP value; param0: New DSCP
                                           value. */
    bcmFieldActionDscpCancel = 21,      /* Override another rule. */
    bcmFieldActionEcnNew = 22,          /* Change ECN value in IP header TOS;
                                           param0: New ECN value. */
    bcmFieldActionCopyToCpu = 23,       /* Copy to CPU. */
    bcmFieldActionCopyToCpuCancel = 24, /* Override another rule. */
    bcmFieldActionSwitchToCpuCancel = 25, /* Override switch logic copy-to-CPU. */
    bcmFieldActionSwitchToCpuReinstate = 26, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionTimeStampToCpu = 27,  /* Send a copy to CPU with timestamp and
                                           drop the packet */
    bcmFieldActionTimeStampToCpuCancel = 28, /* Override another action (don't
                                           copy,don't drop) */
    bcmFieldActionRedirectPort = 29,    /* Redirect Packet to single port;
                                           param0: Destination modid; param1:
                                           Destination port. */
    bcmFieldActionRedirect = bcmFieldActionRedirectPort, /* Same as bcmFieldActionRedirectPort. */
    bcmFieldActionRedirectTrunk = 30,   /* Redirect Packet to a trunk; param0:
                                           Destination trunk ID. */
    bcmFieldActionRedirectCancel = 31,  /* Override another rule. */
    bcmFieldActionRedirectPbmp = 32,    /* Replace port bitmap; param0:
                                           Destination port bitmap. */
    bcmFieldActionRedirectIpmc = 33,    /* Replace L3 multicast L3 & L2 bitmap;
                                           param0: IP Multicast Index. */
    bcmFieldActionRedirectMcast = 34,   /* Replace L2 multicast dest bitmap;
                                           param0: L2 Multicast Index. */
    bcmFieldActionRedirectVlan = 35,    /* Redirect to VLAN port bitmap. */
    bcmFieldActionRedirectBcastPbmp = 36, /* Replace L2 broadcast dest bitmap;
                                           param0: Destination port bitmap. */
    bcmFieldActionEgressMask = 37,      /* Apply egress mask; param0:
                                           Destination port bitmap mask. */
    bcmFieldActionEgressPortsAdd = 38,  /* Add additional egress ports; param0:
                                           Destination port bitmap. */
    bcmFieldActionDrop = 39,            /* Drop. */
    bcmFieldActionDropCancel = 40,      /* Override another rule. */
    bcmFieldActionMirrorOverride = 41,  /* Override any mirroring for packet. */
    bcmFieldActionMirrorIngress = 42,   /* Ingress mirror; param0: Dest modid;
                                           param1: Dest port/tgid. */
    bcmFieldActionMirrorEgress = 43,    /* Egress mirror; param0: Dest modid;
                                           param1: Dest port/tgid. */
    bcmFieldActionL3ChangeVlan = 44,    /* Change VLAN on L3-switched packets;
                                           param0: ECMP or next hop info. */
    bcmFieldActionL3ChangeVlanCancel = 45, /* Override another rule. */
    bcmFieldActionL3ChangeMacDa = 46,   /* Change MAC DA on L3-switched packets;
                                           param0: ECMP or next hop info. */
    bcmFieldActionL3ChangeMacDaCancel = 47, /* Override another rule; param0: Next
                                           hop table index. */
    bcmFieldActionL3Switch = 48,        /* L3-switch packet; param0: ECMP or
                                           next hop info. */
    bcmFieldActionL3SwitchCancel = 49,  /* Override another rule. */
    bcmFieldActionAddClassTag = 50,     /* Add Classification Tag. */
    bcmFieldActionDropPrecedence = 51,  /* Set Drop Precedence; param0:
                                           BCM_FIELD_COLOR_xxx. */
    bcmFieldActionRpDrop = 52,          /* Red Priority Drop. */
    bcmFieldActionRpDropCancel = 53,    /* Override another rule. */
    bcmFieldActionRpDropPrecedence = 54, /* Set Red Priority Drop Precedence;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionRpCopyToCpu = 55,     /* Red Priority Copy to CPU. */
    bcmFieldActionRpCopyToCpuCancel = 56, /* Override another rule. */
    bcmFieldActionRpSwitchToCpuCancel = 57, /* Override switch logic copy-to-CPU. */
    bcmFieldActionRpSwitchToCpuReinstate = 58, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionRpTimeStampToCpu = 59, /* Send a copy to CPU with timestamp and
                                           drop the packet */
    bcmFieldActionRpTimeStampToCpuCancel = 60, /* Override another action (don't
                                           copy,don't drop) */
    bcmFieldActionRpDscpNew = 61,       /* Red packet change DSCP value; param0:
                                           New DSCP value. */
    bcmFieldActionRpDscpCancel = 62,    /* Override any changes to DSCP field. */
    bcmFieldActionRpEcnNew = 63,        /* Red packet change ECN value; param0:
                                           New ECN value. */
    bcmFieldActionRpOuterVlanPrioNew = 64, /* Red packet 802.1p priority from arg;
                                           param0: New priority. */
    bcmFieldActionRpInnerVlanPrioNew = 65, /* Red packet 802.1p priority from arg;
                                           param0: New priority. */
    bcmFieldActionRpOuterVlanCfiNew = 66, /* Red packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionRpInnerVlanCfiNew = 67, /* Red packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionRpPrioPktCopy = 68,   /* Red packet priority from inner tag. */
    bcmFieldActionRpPrioPktNew = 69,    /* Red packet priority from argument0;
                                           param0: New priority. */
    bcmFieldActionRpPrioPktTos = 70,    /* Red Packet priority from TOS field in
                                           IP header. */
    bcmFieldActionRpPrioPktCancel = 71, /* Override another rule. */
    bcmFieldActionRpCosQNew = 72,       /* Red packet change CoS Queue; param0:
                                           New CoS Queue. */
    bcmFieldActionRpVlanCosQNew = 73,   /* Red packet change VLAN CoSQ; param0:
                                           New CoS Queue. */
    bcmFieldActionRpUcastCosQNew = 74,  /* Red unicast packet change CoS Queue;
                                           param0: New CoS Queue. */
    bcmFieldActionRpMcastCosQNew = 75,  /* Red multicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionRpPrioPktAndIntCopy = 76, /* Red packet Packet & Internal priority
                                           from inner tag. */
    bcmFieldActionRpPrioPktAndIntNew = 77, /* Red packet Packet & Internal priority
                                           from param0; param0: New priority. */
    bcmFieldActionRpPrioPktAndIntTos = 78, /* Red packet Packet & Internal priority
                                           from TOS field. */
    bcmFieldActionRpPrioPktAndIntCancel = 79, /* Override any internal priority
                                           changes. */
    bcmFieldActionRpPrioIntCopy = 80,   /* Red packet internal priority from
                                           inner VLAN tag. */
    bcmFieldActionRpPrioIntNew = 81,    /* Red packet internal priority from an
                                           argument; param0: New priority. */
    bcmFieldActionRpPrioIntTos = 82,    /* Red packet internal priority from IP
                                           header  TOS field. */
    bcmFieldActionRpPrioIntCancel = 83, /* Red packet override any internal
                                           priority changes. */
    bcmFieldActionYpDrop = 84,          /* Yellow Priority Drop. */
    bcmFieldActionYpDropCancel = 85,    /* Override another rule. */
    bcmFieldActionYpDropPrecedence = 86, /* Set Yellow Priority Drop Precedence;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionYpCopyToCpu = 87,     /* Yellow Priority Copy to CPU. */
    bcmFieldActionYpCopyToCpuCancel = 88, /* Override another rule. */
    bcmFieldActionYpSwitchToCpuCancel = 89, /* Override switch logic copy-to-CPU. */
    bcmFieldActionYpSwitchToCpuReinstate = 90, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionYpTimeStampToCpu = 91, /* Send a copy to CPU with timestamp and
                                           drop the packet */
    bcmFieldActionYpTimeStampToCpuCancel = 92, /* Override another action (don't
                                           copy,don't drop) */
    bcmFieldActionYpDscpNew = 93,       /* Yellow packet change DSCP value;
                                           param0: New DSCP value. */
    bcmFieldActionYpDscpCancel = 94,    /* Override any changes to DSCP field. */
    bcmFieldActionYpEcnNew = 95,        /* Yellow packet change ECN value;
                                           param0: New ECN value. */
    bcmFieldActionYpOuterVlanPrioNew = 96, /* Yellow packet 802.1p priority from
                                           arg. */
    bcmFieldActionYpInnerVlanPrioNew = 97, /* Yellow packet 802.1p priority from
                                           arg; param0: New priority. */
    bcmFieldActionYpOuterVlanCfiNew = 98, /* Yellow packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionYpInnerVlanCfiNew = 99, /* Yellow packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionYpPrioPktCopy = 100,  /* Yellow packet priority from inner
                                           tag. */
    bcmFieldActionYpPrioPktNew = 101,   /* Yellow packet priority from param0;
                                           param0: New priority. */
    bcmFieldActionYpPrioPktTos = 102,   /* Yellow packet priority from TOS field
                                           in IP header. */
    bcmFieldActionYpPrioPktCancel = 103, /* Override another rule. */
    bcmFieldActionYpCosQNew = 104,      /* Yellow packet change CoS Queue;
                                           param0: New CoS Queue. */
    bcmFieldActionYpVlanCosQNew = 105,  /* Yellow packet change VLAN CoSQ;
                                           param0: New CoS Queue. */
    bcmFieldActionYpUcastCosQNew = 106, /* Yellow unicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionYpMcastCosQNew = 107, /* Yellow multicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionYpPrioPktAndIntCopy = 108, /* Yellow packet Packet & Internal
                                           priority from inner tag. */
    bcmFieldActionYpPrioPktAndIntNew = 109, /* Yellow packet Packet & Internal
                                           priority from param0; param0: New
                                           priority. */
    bcmFieldActionYpPrioPktAndIntTos = 110, /* Yellow packet Packet & Internal
                                           priority from TOS field. */
    bcmFieldActionYpPrioPktAndIntCancel = 111, /* Override any int priority changes. */
    bcmFieldActionYpPrioIntCopy = 112,  /* Yellow packet internal priority from
                                           inner VLAN tag. */
    bcmFieldActionYpPrioIntNew = 113,   /* Yellow packet internal priority from
                                           an argument; param0: New priority. */
    bcmFieldActionYpPrioIntTos = 114,   /* Yellow packet internal priority from
                                           IP header TOS field. */
    bcmFieldActionYpPrioIntCancel = 115, /* Yellow packet override any internal
                                           priority changes. */
    bcmFieldActionUpdateCounter = 116,  /* Update Counter; param0:
                                           BCM_FIELD_COUNTER_MODE_xxx. */
    bcmFieldActionMeterConfig = 117,    /* Meter configuration; param0:
                                           BCM_FIELD_METER_MODE_xxx; param1: if
                                           param0 == BCM_FIELD_METER_MODE_FLOW,
                                           this denotes BCM_FIELD_METER_PEAK(1)
                                           or BCM_FIELD_METER_COMMITTED(2). */
    bcmFieldActionColorIndependent = 118, /* Make L3SW_CHANGE_MACDA_OR_VLAN
                                           actions color independent. */
    bcmFieldActionClassDestSet = 119,   /* Set destination address lookup class
                                           ID. */
    bcmFieldActionClassSet = bcmFieldActionClassDestSet, /* Same as bcmFieldActionClassDestSet. */
    bcmFieldActionClassSourceSet = 120, /* Set source address lookup class ID. */
    bcmFieldActionVrfSet = 121,         /* Set VRF ID. */
    bcmFieldActionInnerVlanNew = 122,   /* Replace inner VLAN ID; param0: New
                                           inner VLAN ID. */
    bcmFieldActionInnerVlanPrioNew = 123, /* Replace inner VLAN tag priority;
                                           param0: New inner VLAN tag priority. */
    bcmFieldActionInnerVlanDelete = 124, /* Delete inner VLAN tag. */
    bcmFieldActionOuterVlanDelete = 125, /* Delete outer VLAN tag. */
    bcmFieldActionOuterVlanDeleteCancel = 126, /* Override previous outer VLAN tag
                                           delete. */
    bcmFieldActionInnerVlanAdd = 127,   /* Add a new Inner VLAN tag. */
    bcmFieldActionInnerVlanCfiNew = 128, /* Replace packet 802.1p CFI from arg. */
    bcmFieldActionOuterVlanNew = 129,   /* Replace outer VLAN ID; param0: New
                                           outer VLAN ID. */
    bcmFieldActionVlanNew = bcmFieldActionOuterVlanNew, /* Same as bcmFieldActionOuterVlanNew. */
    bcmFieldActionOuterVlanAdd = 130,   /* Add a new Outer VLAN tag. */
    bcmFieldActionVlanAdd = bcmFieldActionOuterVlanAdd, /* Same as bcmFieldActionOuterVlanAdd. */
    bcmFieldActionOuterVlanAddCancel = 131, /* Override previous outer VLAN tag add. */
    bcmFieldActionOuterVlanLookup = 132, /* Lookup outer VLAN tag. */
    bcmFieldActionVlanLookup = bcmFieldActionOuterVlanLookup, /* Same as
                                           bcmFieldActionOuterVlanLookup. */
    bcmFieldActionOuterVlanPrioNew = 133, /* Replace outer VLAN tag priority;
                                           param0: New outer VLAN tag priority. */
    bcmFieldActionOuterVlanCfiNew = 134, /* Replace packet 802.1p CFI from arg;
                                           param0: New CFI bit value; param0:
                                           New CFI bit value. */
    bcmFieldActionOuterTpidNew = 135,   /* Replace TPID in outer VLAN tag;
                                           param0: New tpid. */
    bcmFieldActionGpDrop = 136,         /* Green Priority Drop. */
    bcmFieldActionGpDropCancel = 137,   /* Override another rule. */
    bcmFieldActionGpDropPrecedence = 138, /* Set Green Priority Drop Precedence;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionGpCopyToCpu = 139,    /* Green Priority Copy to CPU. */
    bcmFieldActionGpCopyToCpuCancel = 140, /* Override another rule. */
    bcmFieldActionGpSwitchToCpuCancel = 141, /* Override switch logic copy-to-CPU. */
    bcmFieldActionGpSwitchToCpuReinstate = 142, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionGpTimeStampToCpu = 143, /* Send a copy to CPU with timestamp and
                                           drop the packet */
    bcmFieldActionGpTimeStampToCpuCancel = 144, /* Override another action (don't
                                           copy,don't drop) */
    bcmFieldActionGpDscpNew = 145,      /* Green packet change DSCP value;
                                           param0: New DSCP value. */
    bcmFieldActionGpDscpCancel = 146,   /* Override any changes to DSCP field. */
    bcmFieldActionGpEcnNew = 147,       /* Green packet change ECN value;
                                           param0: New ECN value. */
    bcmFieldActionGpTosPrecedenceNew = 148, /* Green packet change Tos byte
                                           precedence value; param0: New
                                           precedence value. */
    bcmFieldActionGpTosPrecedenceCopy = 149, /* Green packet copy Tos byte precedence
                                           from 802.1p priority. */
    bcmFieldActionGpOuterVlanPrioNew = 150, /* Green packet 802.1p priority from
                                           arg. */
    bcmFieldActionGpInnerVlanPrioNew = 151, /* Green packet 802.1p priority from
                                           arg; param0: New priority. */
    bcmFieldActionGpOuterVlanCfiNew = 152, /* Green packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionGpInnerVlanCfiNew = 153, /* Green packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionGpPrioPktCopy = 154,  /* Green packet priority from inner tag. */
    bcmFieldActionGpPrioPktNew = 155,   /* Green packet priority from param0;
                                           param0: New priority. */
    bcmFieldActionGpPrioPktTos = 156,   /* Green packet priority from TOS field
                                           in IP header. */
    bcmFieldActionGpPrioPktCancel = 157, /* Override another rule. */
    bcmFieldActionGpCosQNew = 158,      /* Green packet change CoS Queue;
                                           param0: New CoS Queue. */
    bcmFieldActionGpVlanCosQNew = 159,  /* Green packet change VLAN CoSQ;
                                           param0: New CoS Queue. */
    bcmFieldActionGpUcastCosQNew = 160, /* Green unicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionGpMcastCosQNew = 161, /* Green multicast packet change CoS
                                           Queue; param0: New CoS Queue. */
    bcmFieldActionGpPrioPktAndIntCopy = 162, /* Green packet Packet & Internal
                                           priority from inner tag. */
    bcmFieldActionGpPrioPktAndIntNew = 163, /* Green packet Packet & Internal
                                           priority from param0; param0: New
                                           priority. */
    bcmFieldActionGpPrioPktAndIntTos = 164, /* Green packet Packet & Internal
                                           priority from TOS field. */
    bcmFieldActionGpPrioPktAndIntCancel = 165, /* Override any int priority changes. */
    bcmFieldActionGpPrioIntCopy = 166,  /* Green packet internal priority from
                                           inner VLAN tag. */
    bcmFieldActionGpPrioIntNew = 167,   /* Green packet internal priority from
                                           an argument; param0: New priority. */
    bcmFieldActionGpPrioIntTos = 168,   /* Green packet internal priority from
                                           IP header TOS field. */
    bcmFieldActionGpPrioIntCancel = 169, /* Green packet override any internal
                                           priority changes. */
    bcmFieldActionDoNotChangeTtl = 170, /* Do not decrement TTL. */
    bcmFieldActionDoNotCheckUrpf = 171, /* Do not check reverse path for unicast
                                           traffic. */
    bcmFieldActionDoNotCheckVlan = 172, /* Do not check VLAN membership and STG
                                           STP state. */
    bcmFieldActionDoNotLearn = 173,     /* Disable L2 learning. */
    bcmFieldActionIpFix = 174,          /* Record the packet regardless of port
                                           ipfix enable. */
    bcmFieldActionIpFixCancel = 175,    /* Record the packet action override. */
    bcmFieldActionIncomingMplsPortSet = 176, /* Assign incoming MPLS port. */
    bcmFieldActionDeprecated177 = 177,  /* Deprecated. Do not use. */
    bcmFieldActionNewClassId = 178,     /* Assign new classification ID. */
    bcmFieldActionDeprecated179 = 179,  /* Deprecated. Do not use. */
    bcmFieldActionDeprecated180 = 180,  /* Deprecated. Do not use. */
    bcmFieldActionDeprecated181 = 181,  /* Deprecated. Do not use. */
    bcmFieldActionDeprecated182 = 182,  /* Deprecated. Do not use. */
    bcmFieldActionDeprecated183 = 183,  /* Deprecated. Do not use. */
    bcmFieldActionDeprecated184 = 184,  /* Deprecated. Do not use. */
    bcmFieldActionDeprecated185 = 185,  /* Deprecated. Do not use. */
    bcmFieldActionMultipathHash = 186,  /* ECMP Hash selection for
                                           bcmFieldActionL3Switch action. */
    bcmFieldActionIpfixRate = 187,      /* Set IPFIX flow rate meter; param0:
                                           rate id */
    bcmFieldActionOffloadRedirect = 188, /* Redirect packet to offload engine. */
    bcmFieldActionOffloadClassSet = 189, /* Set Class Id in offload engine
                                           redirected traffic. */
    bcmFieldActionOffloadDropIndication = 190, /* Set drop indicator in offload engine
                                           redirected traffic. */
    bcmFieldActionOamUpMep = 191,       /* Indicate UP MEP. */
    bcmFieldActionOamTx = 192,          /* Indicate TX direction OAM PDU or data
                                           packet. Used as MSB of
                                           FieldActionOamLmBasePtr'. */
    bcmFieldActionOamLmepMdl = 193,     /* MDL value for the LMEP. */
    bcmFieldActionOamServicePriMappingPtr = 194, /* Concatenated with the internal
                                           priority as index to LM packet
                                           counter. */
    bcmFieldActionOamLmBasePtr = 195,   /* Set base pointer to LM packet
                                           counter. */
    bcmFieldActionOamDmEnable = 196,    /* Enable OAM Delay Measurement. */
    bcmFieldActionOamLmEnable = 197,    /* Enable OAM Loss Measurement. */
    bcmFieldActionOamLmepEnable = 198,  /* Enable OAM loss/delay measurement. */
    bcmFieldActionOamPbbteLookupEnable = 199, /* Indicate SVP should be used as the
                                           key for LMEP lookup. */
    bcmFieldActionSrcMacNew = 200,      /* Replace source mac of the packet. */
    bcmFieldActionDstMacNew = 201,      /* Replace destination mac of the
                                           packet. */
    bcmFieldActionVnTagNew = 202,       /* Replace NIV VN tag if present, add if
                                           not present; param0: VN tag. */
    bcmFieldActionVnTagDelete = 203,    /* Delete NIV VN tag. */
    bcmFieldActionDeprecated204 = 204,  /* Deprecated. Do not use. */
    bcmFieldActionDeprecated205 = 205,  /* Deprecated. Do not use. */
    bcmFieldActionVportNew = 206,       /* Replace/assign virtual port id. */
    bcmFieldActionVportSpcpNew = 207,   /* Replace/assign virtual port's spcp. */
    bcmFieldActionVportCpcpNew = 208,   /* Replace/assign virtual port's cpcp. */
    bcmFieldActionVportTcNew = 209,     /* Replace/assign virtual port's traffic
                                           class. */
    bcmFieldActionVportDpNew = 210,     /* Replace/assign virtual port's drop
                                           precedence. */
    bcmFieldActionRedirectVportPort = 211, /* Redirect Packet to single VportPort;
                                           param0: Destination vport; param1:
                                           Destination port. */
    bcmFieldActionMacDaKnown = 212,     /* Packet is not treated as a DLF type */
    bcmFieldActionFilters = 213,        /* Enable Filters to override the rule;
                                           param0: filter
                                           types(BCM_FIELD_FILTER_XXX) */
    bcmFieldActionFabricQueue = 214,    /* Enable ext header on hg ports. */
    bcmFieldActionCnmCancel = 215,      /* Do not generate QCN congestion
                                           notification message. */
    bcmFieldActionQcnUndo = bcmFieldActionCnmCancel, /* Do not perform a Congestion test on
                                           this packet (no QCN message can be
                                           generated) */
    bcmFieldActionDynamicHgTrunkCancel = 216, /* Disable dynamic HiGig trunking. */
    bcmFieldActionEgressMirrorDisable = 217, /* Disable Egress Mirror for matching
                                           packet. */
    bcmFieldActionMultipathHashAdditionalInfo = 218, /* Add additional information to
                                           matching packet's LAG/ECMP
                                           load-balancing hash calculation */
    bcmFieldActionDeprecated219 = 219,  /* Deprecated. Do not use. */
    bcmFieldActionMirrorEgressDisable = 220, /* Disable egress mirror; param0 = TRUE
                                           to disable, FALSE otherwise */
    bcmFieldActionOuterVlanCopyInner = 221, /* Copy the VLAN id from the inner tag
                                           to the outer. */
    bcmFieldActionOuterVlanPrioCopyInner = 222, /* Copy the 802.1p priority from the
                                           inner tag to the outer. */
    bcmFieldActionOuterVlanCfiCopyInner = 223, /* Copy the CFI bit from the inner tag
                                           to the outer. */
    bcmFieldActionInnerVlanCopyOuter = 224, /* Copy the VLAN id from the outer tag
                                           to the inner. */
    bcmFieldActionInnerVlanPrioCopyOuter = 225, /* Copy the 802.1p priority from the
                                           outer tag to the inner. */
    bcmFieldActionInnerVlanCfiCopyOuter = 226, /* Copy the CFI bit from the outer tag
                                           to the inner. */
    bcmFieldActionCompressSrcIp6 = 227, /* Map incoming IPv6 packet Source IP to
                                           ingress field processor IPv4 Source
                                           IP field. */
    bcmFieldActionCompressDstIp6 = 228, /* Map incoming IPv6 packet Destination
                                           IP to ingress field processor IPv4
                                           Destination IP field. */
    bcmFieldActionServicePoolIdNew = 229, /* Change Service Pool ID; param0: New
                                           Service Pool ID. */
    bcmFieldActionUseGlobalMeterColor = 230, /* Use service meters output color
                                           instead of CNG based color as input
                                           packet color */
    bcmFieldActionRedirectEgrNextHop = 231, /* Redirect packet to next hop; param0:
                                           ECMP or next hop info. */
    bcmFieldActionTrunkLoadBalanceCancel = 232, /* Disable trunk load balancing */
    bcmFieldActionEcmpLoadBalanceCancel = 233, /* Disable ECMP group load balancing */
    bcmFieldActionDoNotOverride = 234,  /* Do not override actions */
    bcmFieldActionEgressClassSelect = 235, /* Select class to pass to EFP */
    bcmFieldActionHiGigClassSelect = 236, /* Select class for HiGig */
    bcmFieldActionOamDmTimeFormat = 237, /* Select time format for OAM delay
                                           measurement */
    bcmFieldActionOamLmDmSampleEnable = 238, /* Indicates if packet should be
                                           processed as an OAMPDU belonging to
                                           this MEP */
    bcmFieldActionOamTagStatusCheck = 239, 
    bcmFieldActionOamTunnelControl = 240, /* Select whether OAMPDU can either be
                                           in a tunnel that is terminated or not
                                           tunneled */
    bcmFieldActionRegex = 241,          /* Perform DPI */
    bcmFieldActionNoRegex = 242,        /* Do not perform DPI */
    bcmFieldActionStat0 = 243,          /* Update statistics (statId in param0)
                                           on entry hit.  See
                                           bcm_field_entry_stat_attach and
                                           related APIs. */
    bcmFieldActionStat = bcmFieldActionStat0, /* Alias for bcmFieldActionStat0 */
    bcmFieldActionPolicerLevel0 = 244,  /* Apply policer (policerId in param0)
                                           to traffic hitting this entry.  See
                                           bcm_field_entry_policer_attach and
                                           related APIs. */
    bcmFieldActionPolicerLevel1 = 245,  /* Apply policer (policerId in param0)
                                           to traffic hitting this entry.  See
                                           bcm_field_entry_policer_attach and
                                           related APIs. */
    bcmFieldActionPolicerGroup = 246,   /* Flag in ASETs to indicate group
                                           policer usage with the group */
    bcmFieldActionStatGroup = 247,      /* Flag in ASETs to indicate stat group
                                           usage with the group */
    bcmFieldActionVSQ = 248,            /* Assign matching packets to specified
                                           VSQ (param0). */
    bcmFieldActionIntPriorityAndDropPrecedence = 249, /* Change internal priority and drop
                                           precedence.  param0 = new internal
                                           priority.  param1 = new drop
                                           precedence */
    bcmFieldActionISQ = 250,            /* Assign matching packets to specified
                                           ISQ (param0). */
    bcmFieldActionTrap = 251,           /* Trap matched packets (treat them
                                           according to the specified trap
                                           profile) */
    bcmFieldActionUsePolicerResult = 252, /* Specify/override where policer result
                                           will be used for matched packets. 
                                           See BCM_FIELD_USE_POLICER_RESULT_*
                                           for flags that go in param0. */
    bcmFieldActionStat1 = 253,          /* Secondary statistics update for
                                           matched packets (statId in param0) */
    bcmFieldActionStatTag = 254,        /* Assign statistics tag (such as for
                                           external statistics engine) to
                                           matched packets */
    bcmFieldActionSnoop = 255,          /* Snoop matched packets (treat them
                                           according to the specified snoop
                                           profile) */
    bcmFieldActionTtlSet = 256,         /* New TTL */
    bcmFieldActionIncomingIpIfSet = 257, /* Assign incoming IP interface */
    bcmFieldActionOrientationSet = 258, /* Set the new Orientation */
    bcmFieldActionTrunkHashKeySet = 259, /* Set the Trunk Hash Key */
    bcmFieldActionDstRpfGportNew = 260, /* Set the RPF Destination */
    bcmFieldActionDhcpPkt = 261,        /* Indicate whether the Packet is DHCP */
    bcmFieldActionSrcGportNew = 262,    /* Set the Source-Port */
    bcmFieldActionForwardingTypeNew = 263, /* Set the new Forwarding type */
    bcmFieldActionStartPacketStrip = 264, /* Strip the start-of-packet */
    bcmFieldActionSystemHeaderSet = 265, /* Modify a System Header */
    bcmFieldActionVSwitchNew = 266,     /* Replace Virtual Switch */
    bcmFieldActionLearnSrcMacNew = 267, /* Replace the learnt packet source MAC
                                           address */
    bcmFieldActionLearnSrcPortNew = 268, /* Replace the learnt packet source Port */
    bcmFieldActionLearnForwardingVlanIdNew = 269, /* Replace the learnt packet Forwarding
                                           Vlan ID */
    bcmFieldActionQosMapIdNew = 270,    /* Set the QoS map Id */
    bcmFieldActionVlanActionSetNew = 271, /* Modify the VLAN Action Set Id */
    bcmFieldActionVlanTranslationValueSet = 272, /* Set VLAN Translation lookup result */
    bcmFieldActionTunnelTerminatedValueSet = 273, /* Set Tunnel termination lookup result */
    bcmFieldActionMplsTerminatedValueSet = 274, /* Set MPLS termination lookup result */
    bcmFieldActionIpTunnelValueSet = 275, /* Set IP Tunnel termination lookup
                                           result */
    bcmFieldActionL2SrcValueSet = 276,  /* Set L2 Source lookup result */
    bcmFieldActionL2DestValueSet = 277, /* Set L2 Destination lookup result */
    bcmFieldActionL3SrcRouteValueSet = 278, /* Set L3 Source lookup result */
    bcmFieldActionL3DestRouteValueSet = 279, /* Set L3 Destination lookup result */
    bcmFieldActionIpmcValueSet = 280,   /* Set IP Multicast lookup result */
    bcmFieldActionCascadedKeyValueSet = 281, /* Set key value to cascade to later
                                           group for a packet */
    bcmFieldActionIngressGportSet = 282, /* Set a new ingress Gport
                                           (MPLS/Mim/WLAN) value. */
    bcmFieldActionExternalValue0Set = 283, /* Set External lookup 0 result */
    bcmFieldActionExternalValue1Set = 284, /* Set External lookup 1 result */
    bcmFieldActionExternalValue2Set = 285, /* Set External lookup 2 result */
    bcmFieldActionExternalValue3Set = 286, /* Set External lookup 3 result */
    bcmFieldActionNatCancel = 287,      /* Do Not perform NAT on this matching
                                           packet */
    bcmFieldActionNat = 288,            /* Perform NAT operation on the matching
                                           packet */
    bcmFieldActionNatEgressOverride = 289, /* Override NAT Egress information with
                                           the given Egress information for
                                           Translation */
    bcmFieldActionRegexActionCancel = 290, /* Suppress action taken by the Regex
                                           module for matching pkt. */
    bcmFieldActionPortPrioIntCosQNew = 291, /* Change CoS Queue; param0: Classifier
                                           ID param1: Queue offset or l2 UC
                                           Gport. */
    bcmFieldActionRpPortPrioIntCosQNew = 292, /* Red packet change CoS Queue; param0:
                                           Classifier ID param1: Queue offset or
                                           l2 UC Gport. */
    bcmFieldActionYpPortPrioIntCosQNew = 293, /*  Yellow packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset or l2 UC Gport. */
    bcmFieldActionGpPortPrioIntCosQNew = 294, /* Green packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset or l2 UC Gport. */
    bcmFieldActionYpMirrorIngress = 295, /* Yellow packet ingress mirror; param0:
                                           Dest modid; param1: Dest port/tgid. */
    bcmFieldActionYpRedirectPort = 296, /* Redirect yellow packet to single
                                           port; param0: Destination modid;
                                           param1: Destination port. */
    bcmFieldActionDeprecated297 = 297,  /* Deprecated. Do not use. */
    bcmFieldActionFibreChanSrcBindEnable = 298, /* Enable or Disable Source Bind Check
                                           for Fibre Chan packets */
    bcmFieldActionFibreChanFpmaPrefixCheckEnable = 299, /* Enable or Disable FPMA prefix check
                                           for Fibre Chan packets */
    bcmFieldActionFibreChanZoneCheckEnable = 300, /* Enable or Disable Zone Check for
                                           Fibre Chan packets */
    bcmFieldActionFibreChanVsanId = 301, /* VSAN Id generated via VFP. */
    bcmFieldActionFibreChanZoneCheckActionCancel = 302, /* To Accept or Ignore previously made
                                           Zone check result */
    bcmFieldActionFibreChanIntVsanPri = 303, /* New VSAN Priority. */
    bcmFieldActionLearnInVPortNew = 304, /* Replace the learnt packet InVPort. */
    bcmFieldActionOamDomain = 305,      /* Set the OAM domains on which the MEP
                                           lookups are done. param0 can be used
                                           to set first domain and param1 for
                                           second domain. */
    bcmFieldActionOamOlpHeaderAdd = 306, /* Add OLP  header for this packet -
                                           param0 to be used for passing the
                                           header type. */
    bcmFieldActionOamSessionId = 307,   /* OAM session Id to be used in OLP Rx
                                           header - param0 to be used for
                                           passing the session id. */
    bcmFieldActionOuterVlanCfiCancel = 308, /* Disable the CFI remarking of the
                                           outer vlan tag CFI bit. */
    bcmFieldActionInnerVlanPriCancel = 309, /* Disable the PCP remarking of the
                                           inner vlan tag priority bits. */
    bcmFieldActionPrioIntRemark = 310,  /* Assign a new packet internal priority
                                           for PCP or CFI remarking. */
    bcmFieldActionUseDefaultWred = 311, /* Use the discard settings from default
                                           WRED configuration */
    bcmFieldActionHashValueSet = 312,   /* Set Hash result */
    bcmFieldActionL3IngressSet = 313,   /* Assign L3 Ingress Interface value to
                                           packet. */
    bcmFieldActionInterfaceClassVPort = 314, /* Set the Virtual Port Interface Class
                                           ID . */
    bcmFieldActionIngSampleEnable = 315, /* Set the SFLOW Ingress Sampling. */
    bcmFieldActionEgrSampleEnable = 316, /* Set the SFLOW Egress Sampling. */
    bcmFieldActionHashSelect0 = 317,    /* Set the hash buckets bitmap for Hash
                                           key A. */
    bcmFieldActionHashSelect1 = 318,    /* Set the hash buckets bitmap for Hash
                                           key B. */
    bcmFieldActionTrunkResilientHashCancel = 319, /* Cancels the resilient hash on Trunk. */
    bcmFieldActionHgTrunkResilientHashCancel = 320, /* Cancels the resilient hash on HiGig
                                           Trunk. */
    bcmFieldActionEcmpResilientHashCancel = 321, /* Cancels the resilient hash on ECMP. */
    bcmFieldActionUnmodifiedPacketRedirectPort = 322, /* Redirect Unmodified Packet to single
                                           port; param0: Destination Gport. */
    bcmFieldActionEtagNew = 323,        /* Replace Port Extender ETAG if
                                           present, add if not present; param0:
                                           ETAG. */
    bcmFieldActionEtagDelete = 324,     /* Delete Port Extender ETAG. */
    bcmFieldActionPfcClassNew = 325,    /* Change the PFC class of the packet;
                                           param0 : new PFC class value. */
    bcmFieldActionRpIntCongestionNotificationNew = 326, /* Replace the internal congestion
                                           notification value of red packet;
                                           param0: Internal congestion
                                           notification value. */
    bcmFieldActionYpIntCongestionNotificationNew = 327, /* Replace the internal congestion
                                           notification value of yellow packet;
                                           param0: Internal congestion
                                           notification value. */
    bcmFieldActionGpIntCongestionNotificationNew = 328, /* Replace the internal congestion
                                           notification value of green packet;
                                           param0: Internal congestion
                                           notification value. */
    bcmFieldActionRpHGCongestionClassNew = 329, /* Replace the value of CongestionClass
                                           field in HiGig header for red packet;
                                           param0: CongestionClass value. */
    bcmFieldActionYpHGCongestionClassNew = 330, /* Replace the value of CongestionClass
                                           field in HiGig header for yellow
                                           packet; param0: CongestionClass
                                           value. */
    bcmFieldActionGpHGCongestionClassNew = 331, /* Replace the value of CongestionClass
                                           field in HiGig header for green
                                           packet; param0: CongestionClass
                                           value. */
    bcmFieldActionRedirDropPrecedence = 332, /* Set the redirect drop precedence of
                                           packets. param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    bcmFieldActionRpRedirDropPrecedence = 333, /* Set the redirect drop precedence of
                                           Red packets.
                                           param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    bcmFieldActionYpRedirDropPrecedence = 334, /* Set the redirect drop precedence of
                                           Yellow packets.
                                           param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    bcmFieldActionGpRedirDropPrecedence = 335, /* Set the redirect drop precedence of
                                           Green packets.
                                           param0:BCM_FIELD_COLOR_xxx
                                           param1:n/a. */
    bcmFieldActionHiGigDstModuleGportNew = 336, /* Replace the value of DST_MODID field
                                           in HiGig header ; param0: New
                                           Destination Module Id. */
    bcmFieldActionHiGigDstPortGportNew = 337, /* Replace the value of DST_PORT field
                                           in HiGig header ; param0: New
                                           Destination Port Id. */
    bcmFieldActionHiGigDstGportNew = 338, /* Replace the value of DST_MODID and
                                           DST_PORT fields in HiGig header ;
                                           param0: New Destination Gport. */
    bcmFieldActionGpHiGigDropPrecedenceNew = 339, /* Replace the value of Drop Precedence
                                           field in HiGig header for Green
                                           Packets; param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionYpHiGigDropPrecedenceNew = 340, /* Replace the value of Drop Precedence
                                           field in HiGig header for Yellow
                                           packets; param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionRpHiGigDropPrecedenceNew = 341, /* Replace the value of Drop Precedence
                                           field in HiGig header for Red
                                           packets; param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionHiGigDropPrecedenceNew = 342, /* Replace the value of Drop Precedence
                                           field in HiGig header for
                                           any(Green/Yellow/Red) packets;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionGpHiGigIntPriNew = 343, /* Replace the value of Traffic Class
                                           field in HiGig header for Green
                                           packets; param0: New Internal
                                           Priority. */
    bcmFieldActionYpHiGigIntPriNew = 344, /* Replace the value of Traffic Class
                                           field in HiGig header for Yellow
                                           packets; param0: New Internal
                                           Priority. */
    bcmFieldActionRpHiGigIntPriNew = 345, /* Replace the value of Traffic Class
                                           field in HiGig header for Red
                                           packets; param0: New Internal
                                           Priority. */
    bcmFieldActionHiGigIntPriNew = 346, /* Replace the value of Traffic Class
                                           field in HiGig header for
                                           any(green/Yellow/Red) packet; param0:
                                           New Internal Priority. */
    bcmFieldActionLoopbackSrcModuleGportNew = 347, /* Replace the value of Source ModId
                                           field in Loopback header ; param0:
                                           New Source Module Id. */
    bcmFieldActionLoopbackSrcPortGportNew = 348, /* Replace the value of Source PortId
                                           field in Loopback header ; param0:
                                           New Source Port Id. */
    bcmFieldActionLoopbackSrcGportNew = 349, /* Replace the value of Source ModId and
                                           Source PortId fields in Loopback
                                           header ; param0: New Source Gport. */
    bcmFieldActionLoopbackCpuMasqueradePktProfileNew = 350, /* Replace the value of Packet Profile
                                           field in Loopback header ; param0:
                                           New Packet Profile. */
    bcmFieldActionLoopbackPacketProcessingPortNew = 351, /* Replace the value of Packet
                                           Processing port field in Loopback
                                           header ; param0: New Packet
                                           Processing Port. */
    bcmFieldActionLoopBackTypeNew = 352, /* Replace the value of Loopback Type
                                           field in Loopback header ; param0:
                                           Loopback Type
                                           (bcmFieldLoopbackTypeXXX). */
    bcmFieldActionRecoverableDropCancel = 353, /* Override drop decision taken by
                                           Protection switching logic */
    bcmFieldActionStackingRouteNew = 354, /* Replace the value of the stacking
                                           route */
    bcmFieldActionPphPresentSet = 355,  /* If set, a Packet Processing header is
                                           present. */
    bcmFieldActionVxlanHeaderBits8_31_Set = 356, /* Set Vxlan Header Reserved_1 Field */
    bcmFieldActionVxlanHeaderBits56_63_Set = 357, /* Set Vxlan Header Reserved_2 Field */
    bcmFieldActionFabricHeaderSet = 358, /* If set, a Packet Processing header is
                                           present. */
    bcmFieldActionOam = 359,            /* It comprises several fields that are
                                           changed at the same time: OAM-Up-Mep,
                                           OAM-Sub-Type, OAM-offset,
                                           OAM-Stamp-Offset */
    bcmFieldActionVpnSet = 360,         /* Set a new VPN value; param0: VPN Id. */
    bcmFieldActionL3DestRoutePublicValueSet = 361, /* Set L3 Destination public lookup
                                           result. */
    bcmFieldActionL3SrcRoutePublicValueSet = 362, /* Set L3 Source public lookup result. */
    bcmFieldActionClassZero = 363,      /* Class Action Zero. */
    bcmFieldActionClassOne = 364,       /* Class Action One. */
    bcmFieldActionTrapReduced = 365,    /* Trap action without qualifier. */
    bcmFieldActionGroupClassSet = 366,  /* Assign Class Id value to a Ingress
                                           Field Group. */
    bcmFieldActionEgressPbmpNullCopyToCpu = 367, /* Dropped Packets Copy to CPU */
    bcmFieldActionPimBidirFwd = 368,    /* If set, enable PIM-BIDIR forwarding
                                           of IP Multicast packets. */
    bcmFieldActionDscpMapNew = 369,     /* Qos Mapping for Incoming packet DSCP */
    bcmFieldActionReserved370 = 370,    /* Reserved action. */
    bcmFieldActionReserved371 = 371,    /* Reserved action. */
    bcmFieldActionReserved372 = 372,    /* Reserved action. */
    bcmFieldActionReserved373 = 373,    /* Reserved action. */
    bcmFieldActionFabricEHAddOrUpdate = 374, /* To add or update the HiGig extended
                                           header(4 bytes) to HiGig Packets. */
    bcmFieldActionDot1pPreserve = 375,  /* To prohibit changing/rewriting of
                                           packets 802.1p priority. */
    bcmFieldActionGpDot1pPreserve = 376, /* To prohibit changing/rewriting of
                                           Green packets 802.1p priority. */
    bcmFieldActionYpDot1pPreserve = 377, /* To prohibit changing/rewriting of
                                           yellow packets 802.1p priority. */
    bcmFieldActionRpDot1pPreserve = 378, /* To prohibit changing/rewriting of red
                                           packets 802.1p priority. */
    bcmFieldActionDscpPreserve = 379,   /* To prohibit changing/rewriting of
                                           packets DSCP. */
    bcmFieldActionGpDscpPreserve = 380, /* To prohibit changing/rewriting of
                                           green packets DSCP. */
    bcmFieldActionYpDscpPreserve = 381, /* To prohibit changing/rewriting of
                                           yellow packets DSCP. */
    bcmFieldActionRpDscpPreserve = 382, /* To prohibit changing/rewriting of red
                                           packets DSCP. */
    bcmFieldActionChangeL2FieldsCancel = 383, /* Cancel Changing OuterVlan, SrcMac,
                                           DstMac, VnTag, Etag from lower
                                           priority groups. */
    bcmFieldActionBFDSessionIdNew = 384, /* Assign new Session Id to BFD
                                           EndPoint. */
    bcmFieldActionCosMapNew = 385,      /* Override the default internal
                                           priority to cosq mapping derived in
                                           ingress pipeline using new IFP Cos
                                           Map. */
    bcmFieldActionGpCosMapNew = 386,    /* Override the default internal
                                           priority to cosq mapping derived in
                                           ingress pipeline using new IFP Cos
                                           Map for Green Packets only. */
    bcmFieldActionYpCosMapNew = 387,    /* Override the default internal
                                           priority to cosq mapping derived in
                                           ingress pipeline using new IFP Cos
                                           Map for Yellow Packets only. */
    bcmFieldActionRpCosMapNew = 388,    /* Override the default internal
                                           priority to cosq mapping derived in
                                           ingress pipeline using new IFP Cos
                                           Map for Red Packets only. */
    bcmFieldActionVxlanHeaderFlags = 389, /* Set Vxlan Header Flags Field. */
    bcmFieldActionChangeL2Fields = 390, /* Modify L2 fields for the given L3
                                           egress object. */
    bcmFieldActionExactMatchClassId = 391, /* Exact Match Action Class Id. */
    bcmFieldActionPfcTx = 392,          /* Send out a PFC frame. parma0: local
                                           port number. param1: the enable
                                           vector of the PFC frame */
    bcmFieldActionSwitchEncap = 393,    /* To encapsulate MiML or Custom Header
                                           in the customer Ethernet packet for
                                           selected packets */
    bcmFieldActionStatVportNew = 394,   /* Replace/assign virtual port id
                                           attached to specific statistic */
    bcmFieldActionUcastQueueNew = 395,  /* Assign new Unicast Queue Number
                                           param0: l2 UC queue gport. */
    bcmFieldActionRpUcastQueueNew = 396, /* Red packet Assign new Unicast Queue
                                           Number param0: l2 UC queue gport. */
    bcmFieldActionYpUcastQueueNew = 397, /* Yellow Packet Assign new Unicast
                                           Queue Number param0: l2 UC queue
                                           gport. */
    bcmFieldActionGpUcastQueueNew = 398, /* Green Packet Assign new Unicast Queue
                                           Number param0: l2 UC queue gport. */
    bcmFieldActionIntCosUcastQueueNew = 399, /* Assign new Unicast Queue Number
                                           param0: l2 UC queue gport. param1:
                                           classifier id */
    bcmFieldActionRpIntCosUcastQueueNew = 400, /* Red Packet Assign new Unicast Queue
                                           Number param0: l2 UC queue gport.
                                           param1: classifier id */
    bcmFieldActionYpIntCosUcastQueueNew = 401, /* Yellow Packet Assign new Unicast
                                           Queue Number param0: l2 UC queue
                                           gport. param1: classifier id */
    bcmFieldActionGpIntCosUcastQueueNew = 402, /* Green Packet Assign new Unicast Queue
                                           Number param0: l2 UC queue gport.
                                           param1: classifier id */
    bcmFieldActionHgTrunkRandomRoundRobinHashCancel = 403, /* Cancel Random or Roundrobin hash
                                           configured for HiGig Trunks */
    bcmFieldActionTrunkRandomRoundRobinHashCancel = 404, /* Cancel Random or Roundrobin hash
                                           configured for Trunks */
    bcmFieldActionEcmpRandomRoundRobinHashCancel = 405, /* Cancel Random or Roundrobin hash
                                           configured for Ecmp */
    bcmFieldActionPacketTraceEnable = 406, /* trigger storing all instrumentation
                                           triggers for this packet to a buffer.
                                           Other than IFP, same can be done
                                           using packet visibility API */
    bcmFieldActionStrength = 407,       /* Strength for CopyToCpu or Redirection
                                           packets */
    bcmFieldActionRedirectBufferPriority = 408, /* Buffer priority for CopyToCpu or
                                           Redirection packets */
    bcmFieldActionRedirectPrioIntNew = 409, /* Internal priority for Redirected
                                           packets */
    bcmFieldActionRpRedirectPrioIntNew = 410, /* Internal priority for Redirected Red
                                           packets */
    bcmFieldActionYpRedirectPrioIntNew = 411, /* Internal priority for Redirected
                                           Yellow packets */
    bcmFieldActionGpRedirectPrioIntNew = 412, /* Internal priority for Redirected
                                           Green packets */
    bcmFieldActionUntaggedPacketPriorityNew = 413, /* set input priority for untagged
                                           packets. (not internal priority,
                                           refer doc) */
    bcmFieldActionDoNotCutThrough = 414, /* On configuring this action, the
                                           packet is not eligible for
                                           cut-through mode in MMU. It will take
                                           the default store and forward method. */
    bcmFieldActionLoopbackOamResponse = 415, /* Generate OAM Loopback response. */
    bcmFieldActionLoopbackSatResponse = 416, /* Generate SAT latching Loopback
                                           response. */
    bcmFieldActionOamStatObjectSessionId = 417, /* Adds LM counter index to OLP header
                                           to uniquely identify OAM session. */
    bcmFieldActionServicePrioIntCosQNew = 418, /* Change CoS Queue; param0: Classifier
                                           ID param1: Queue offset. */
    bcmFieldActionRpServicePrioIntCosQNew = 419, /* Red packet change CoS Queue; param0:
                                           Classifier ID param1: Queue offset. */
    bcmFieldActionYpServicePrioIntCosQNew = 420, /*  Yellow packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset. */
    bcmFieldActionGpServicePrioIntCosQNew = 421, /* Green packet change CoS Queue;
                                           param0: Classifier ID param1: Queue
                                           offset. */
    bcmFieldActionProtectionSwitchingDrop = 422, /* Drop the data packets on working or
                                           protected path of PBB in VFP. */
    bcmFieldActionServicePoolIdPrecedenceNew = 423, /* Change SPID and SPAP; param0: New
                                           Service Pool ID param1: Service Pool
                                           Precedence (color) */
    bcmFieldActionSwapMacDaSa = 424,    /* Swap Destination and Source Mac
                                           addresses */
    bcmFieldActionSwapSourceIPDestIP = 425, /* Swap Destination and Source IP
                                           addresses */
    bcmFieldActionReplaceTtl = 426,     /* TTL is replaced with the value
                                           programmed by
                                           bcmFieldControlReplacementTtl instead
                                           of decrementing */
    bcmFieldActionPacketIsL3SAT = 427,  /* Indicates matched packet is L3SAT
                                           packet and calculates offset to the
                                           start of the L3SAT PDU */
    bcmFieldActionReplaceSrcMac = 428,  /* Replace Source Mac */
    bcmFieldActionReplaceDstMac = 429,  /* Replace Destination Mac */
    bcmFieldActionReplaceInnerVlan = 430, /* Replace Inner Vlan */
    bcmFieldActionReplaceOuterVlan = 431, /* Replace Outer Vlan */
    bcmFieldActionReplaceInnerVlanPriority = 432, /* Replace Inner Vlan Priority */
    bcmFieldActionReplaceOuterVlanPriority = 433, /* ReplaceOuter Vlan Priority */
    bcmFieldActionStatAndPolicer = 434, /* Stat and Policer Action */
    bcmFieldActionSnoopAndTrap = 435,   /* Snoop and Trap Action */
    bcmFieldActionIEEE1588 = 436,       /* Setting varoius parameters for 1588
                                           frames */
    bcmFieldActionExternalValue4Set = 437, /* Set External lookup 4 result */
    bcmFieldActionExternalValue5Set = 438, /* Set External lookup 5 result */
    bcmFieldActionForward = 439,        /* Set Forwarding destination raw value */
    bcmFieldActionTrapCodeQualifier = 440, /* Set Trap destination value (trap code
                                           + forward strength+ snoop strength )
                                           in addition to configurable value
                                           that further resolves the cause of
                                           the trap in the context of the
                                           CPU-Trap-Code */
    bcmFieldActionPphSnoopCode = 441,   /* Set the PPH Snoop code value */
    bcmFieldActionEgressTimeStampInsert = 442, /* Insert EPIPE timestamp. */
    bcmFieldActionIngressTimeStampInsert = 443, /* Insert IPIPE timestamp. */
    bcmFieldActionIngressTimeStampInsertCancel = 444, /* Do not insert ingress timestamp.
                                           Overrules port config. */
    bcmFieldActionEgressTimeStampInsertCancel = 445, /* Do not insert egress timestamp.
                                           Overrules port config. */
    bcmFieldActionMplsLabel1ExpNew = 446, /* Change the EXP field in forwarding
                                           label of MPLS packets. */
    bcmFieldActionDynamicEcmpEnable = 447, /* Force packets to use DLB when matched
                                           by IFP rules, even though the Group
                                           Table indicates hash-based load
                                           balancing is to be used. */
    bcmFieldActionDynamicTrunkEnable = 448, /* Force packets to use DLB when matched
                                           by IFP rules, even though the Group
                                           Table indicates hash-based load
                                           balancing is to be used. */
    bcmFieldActionDynamicEcmpCancel = bcmFieldActionEcmpLoadBalanceCancel, /* Same as
                                           bcmFieldActionEcmpLoadBalanceCancel. */
    bcmFieldActionDynamicTrunkCancel = 449, /* Force packets to use hash-based load
                                           balancing, even though the group is
                                           configured to support DLB. */
    bcmFieldActionDgm = 450,            /* Indicate IFP action is valid. It is
                                           mandatory to add this action to for
                                           the following three actions to get
                                           applied. */
    bcmFieldActionDgmThreshold = 451,   /* Indicates the IFP action is only
                                           valid when the primary optimal band
                                           is equal to or below this threshold.
                                           If threshold is set to 7, this action
                                           will always be valid. */
    bcmFieldActionDgmBias = 452,        /* Indicates the bias in favor of the
                                           alternate path in DGM. */
    bcmFieldActionDgmCost = 453,        /* Indicates the cost of switching over
                                           to the alternate path in DGM. */
    bcmFieldActionStaggeredValue0Set = 454, /* Value taken from action result 0 in
                                           staggered mode. */
    bcmFieldActionStaggeredValue1Set = 455, /* Value taken from action result 1 in
                                           staggered mode. */
    bcmFieldActionStaggeredValue2Set = 456, /* Value taken from action result 2 in
                                           staggered mode. */
    bcmFieldActionStaggeredValue3Set = 457, /* Value taken from action result 3 in
                                           staggered mode. */
    bcmFieldActionStaggeredDirectValueSet = 458, /* Value taken from KAPS payload in
                                           staggered mode. */
    bcmFieldActionStaggeredPreselProfile0Set = 459, /* Program selection profile value taken
                                           from action result 0 in staggered
                                           mode. */
    bcmFieldActionStaggeredPreselProfile1Set = 460, /* Program selection profile value taken
                                           from action result 1 in staggered
                                           mode. */
    bcmFieldActionStaggeredPreselProfile2Set = 461, /* Program selection profile value taken
                                           from action result 2 in staggered
                                           mode. */
    bcmFieldActionStaggeredPreselProfile3Set = 462, /* Program selection profile value taken
                                           from action result 3 in staggered
                                           mode. */
    bcmFieldActionStaggeredPreselProfileDirectSet = 463, /* Program selection profile value taken
                                           from KAPS payload 0 in staggered
                                           mode. */
    bcmFieldActionEnableVlanCheck = 464, /* Check VLAN membership and STG STP
                                           state */
    bcmFieldActionAdmitProfile = 465,   /* Return admit profile by
                                           bcmFieldAdmitProfile_t */
    bcmFieldActionDynamicHgTrunkEnable = 466, /* Force packets to use DLB when matched
                                           by IFP rules, even though the Group
                                           Table indicates hash-based load
                                           balancing is to be used. */
    bcmFieldActionVxlanTerminate = 467, /* De-capsulate VXLAN tunnel header */
    bcmFieldActionUseTunnelPayload = 468, /* To use Tunnel payload header fields
                                           for hashing */
    bcmFieldActionVlanActions = 469,    /* Set actions to modify VLAN tag
                                           fields. */
    bcmFieldActionSRDuplicateDrop = 470, /* SR (Seamless Redundancy): drop the
                                           packet if it's an SR duplicate */
    bcmFieldActionSRDuplicateDropCancel = 471, /* SR (Seamless Redundancy): Do not drop
                                           the duplicate packet (override
                                           another rule) */
    bcmFieldActionSRNetIdFilter = 472,  /* SR (Seamless Redundancy): NET ID
                                           filtering drop the packet if its NET
                                           ID is the same as destination ports */
    bcmFieldActionSRNetIdSource = 473,  /* SR: Indicates the source which NET ID
                                           comes from; param0:
                                           BCM_FIELD_SR_NET_ID_SOURCE_xxx */
    bcmFieldActionFilterSrcMacPorts = 474, /* SR: Apply source port filtering based
                                           on source address */
    bcmFieldActionSRCopyToCpu = 475,    /* SR: Copy all packets or only
                                           non-duplicate packets to CPU with
                                           specified custom reason code; param0:
                                           BCM_FIELD_SR_COPYTOCPU_xxx; param1:
                                           custom CPU RX reason code (1~63) */
    bcmFieldActionSRTagAdd = 476,       /* Insert SR (Seamless Redundancy) tag
                                           in the packet; param0: SR packet type
                                           (BCM_FIELD_SR_TAG_TYPE_xxx) */
    bcmFieldActionSRTagDelete = 477,    /* Delete SR (Seamless Redundancy) tag
                                           (if present) in the packet; param0:
                                           SR packet type
                                           (BCM_FIELD_SR_TAG_TYPE_xxx) */
    bcmFieldActionSRLanIdNew = 478,     /* Specify SR(Seamless Redundancy) LAN
                                           ID; param0: 0 for LAN A, 1 for LAN B */
    bcmFieldActionSRNetIdNew = 479,     /* Specify SR(Seamless Redundancy) NET
                                           ID; param0: NET ID 0~7 */
    bcmFieldActionSRFlowIdNew = 480,    /* Specify SR(Seamless Redundancy) flow
                                           ID; param0: SR flow ID */
    bcmFieldActionSRFlowPriMapIdNew = 481, /* Specify TSN priority map for
                                           SR(Seamless Redundancy) flow; param0:
                                           TSN priority map ID */
    bcmFieldActionMtuSize = 482,        /* Specify MTU size that the packet
                                           should be checked against. It
                                           overrides the MTU size specified from
                                           MTU profile. */
    bcmFieldActionStuSize = 483,        /* Specify STU (Shortest Transmission
                                           Unit) size that the packet should be
                                           checked against. It overrides the STU
                                           size specified from MTU profile. */
    bcmFieldActionTsnFlowIdNew = 484,   /* Specify TSN (Time-Sensitive
                                           Networking) flow ID; param0: TSN flow
                                           ID. */
    bcmFieldActionTsnFlowPriMapIdNew = 485, /* Specify TSN priority map for TSN
                                           flow; param0: TSN priority map ID */
    bcmFieldActionMtuProfileIdNew = 486, /* Specify the TSN MTU profile ID;
                                           param0: new MTU profile ID */
    bcmFieldActionStuProfileIdNew = 487, /* Specify the TSN STU (Shortest
                                           Transmission Unit) profile ID;
                                           param0: new STU profile ID */
    bcmFieldActionExternalValue6Set = 488, /* Set External lookup 6 result */
    bcmFieldActionExternalValue7Set = 489, /* Set External lookup 7 result */
    bcmFieldActionEsmSearchKeySrcMac = 490, /* This action sets ESM search key to
                                           perform only L2 Source Mac Address
                                           Lookup */
    bcmFieldActionTrunkResilientHashEnable = 491, /* Forcefully Enable Resilient hashing
                                           for Trunk groups. */
    bcmFieldActionTrunkResilientHashDisable = 492, /* Forcefully Disable Resilient hashing
                                           for Trunk groups. */
    bcmFieldActionEcmpResilientHashEnable = 493, /* Forcefully Enable Resilient hashing
                                           for ECMP groups. */
    bcmFieldActionEcmpResilientHashDisable = 494, /* Forcefully Disable Resilient hashing
                                           for ECMP groups. */
    bcmFieldActionHiGigTrunkResilientHashEnable = 495, /* Forcefully Enable Resilient hashing
                                           for HiGig Trunk groups. */
    bcmFieldActionHiGigTrunkResilientHashDisable = 496, /* Forcefully Disable Resilient hashing
                                           for HiGig Trunk groups. */
    bcmFieldActionMacSecDecrypt = 497,  /* This action adds MACSEC Decrypt OLP
                                           header in Egress  Pipe. This action
                                           does not modify packet in Egress
                                           Pipe. */
    bcmFieldActionMacSecEncrypt = 498,  /* This action only adds MACSEC Encrypt
                                           OLP header in Egress Pipe. */
    bcmFieldActionMacSecSubPortNumAdd = 499, /* This action assigns MACSEC Subport
                                           number to be used by MACSEC engine
                                           for Security Association lookup */
    bcmFieldActionMacSecPktTypeSet = 500, /* This action assigns a MACSEC packet
                                           type to be used in MACSEC block.
                                           MACSEC packet type is defined by
                                           bcm_field_macsec_pkt_type_t. */
    bcmFieldActionLatencyFlowId = 501,  /* Update Latency-Flow-Id in OAM-TS
                                           HEADER; param0: New Latency-Flow-Id
                                           value. */
    bcmFieldActionIntEncapEnable = 502, /* This action triggers to insert INT
                                           metadata header to the incoming valid
                                           INT packet. */
    bcmFieldActionIntTurnAround = 503,  /* This action triggers to turn-around
                                           the packet if it fails to detect the
                                           INT packet (one of the case if the
                                           packet reaches hop limit). */
    bcmFieldActionMacSecRedirectIpmc = 504, /* This action redirects multicast
                                           MACSEC packets to MACSEC engine and
                                           also adds OLP header in Egress
                                           Pipeline. */
    bcmFieldActionAddIngOuterVlanToEgrOuterVlan = 505, /* This action is to add the incoming
                                           outer VLAN tag to the outgoing packet
                                           in Egress Pipeline. */
    bcmFieldActionErspan3HdrVlanCosPktCopy = 506, /* This action is to copy the incoming
                                           outer VLAN and COS in the outgoing
                                           ERSPAN3 header. */
    bcmFieldActionErspan3HdrGbpSrcIdAdd = 507, /* This action is to add the GBP source
                                           ID in ERSPAN3 header. */
    bcmFieldActionErspan3HdrUdf2Add = 508, /* This action is to add the User
                                           Defined Field 2 in ERSPAN3 header. */
    bcmFieldActionRoeFrameTypeSet = 509, /* This action is to set or overwrite
                                           Roe frame type. Roe frame types are
                                           defined by
                                           bcm_field_roe_frame_type_t. */
    bcmFieldActionFlowtrackerGroupId = 510, /* This action is to associate
                                           flowtracker group. */
    bcmFieldActionStatisticPtr0 = 511,  /* Statistic pointer 0 for statistic
                                           interface (stat I/F). */
    bcmFieldActionStatisticPtr1 = 512,  /* Statistic pointer 1 for statistic
                                           interface (stat I/F). */
    bcmFieldActionTafGatePriMap = 513,  /* This action specify the priority
                                           mapping of TAF (Time Aware Filtering)
                                           gate. */
    bcmFieldActionIntEncapUpdate = 514, /* This action triggers to update
                                           existing INT metadata header of a
                                           incoming valid INT packet. */
    bcmFieldActionMplsLookupEnable = 515, /* Enable MPLS lookup similar to the
                                           functionality managed by VLAN
                                           controls; param0:BCM_FIELD_MPLS_XXX */
    bcmFieldActionTerminationAllowed = 516, /* Overrides MY_STATION_TCAM actions;
                                           param0:BCM_FIELD_XXX_TERM_ALLOWED */
    bcmFieldActionMatchPbmpDrop = 517,  /* Drop packets on a port or a group of
                                           ports after IFP resolution */
    bcmFieldActionMatchPbmpRedirect = 518, /* Redirect packets on a port or a group
                                           of ports after IFP resolution */
    bcmFieldActionIntEncapDisable = 519, /* This action triggers to disable the
                                           insertion of INT metadata header to
                                           the incoming valid INT packet. */
    bcmFieldActionElephantLookupEnable = 520, /* Enable Elephant flow lookup. */
    bcmFieldActionElephantLookupDisable = 521, /* Disable Elephant flow lookup. */
    bcmFieldActionElephantColorEnable = 522, /* Enable color assignment for a packet
                                           identified as Elephant. */
    bcmFieldActionElephantColorDisable = 523, /* Disable color assignment for a packet
                                           identified as Elephant. */
    bcmFieldActionElephantQueueEnable = 524, /* Enable Queue assignment for a packet
                                           identified as Elephant. */
    bcmFieldActionElephantQueueDisable = 525, /* Disable Queue assignment for a packet
                                           identified as Elephant. */
    bcmFieldActionLatencyMonitorEnable = 526, /* Enable Latency Monitor for a given
                                           monitor IDs. */
    bcmFieldActionLatencyMonitorDisable = 527, /* Disable Latency Monitor for a given
                                           monitor IDs. */
    bcmFieldActionOamLmCounterPoolId = 528, /* This action assigns OAM LM Counter
                                           Pool ID. */
    bcmFieldActionLoopbackType = 529,   /* Loopback Type of type
                                           bcm_field_LoopbackType_t. */
    bcmFieldActionVisibilityEnable = 530, /* This action marks a packet as
                                           Visibility Packet */
    bcmFieldActionDlbEcmpMonitorEnable = 531, /* This action is to enable/disable ecmp
                                           monitor during DLB. */
    bcmFieldActionMirrorZeroingEnable = 532, /* This action is to enable zeroing
                                           [payload wiping] on any mirrored
                                           packet */
    bcmFieldActionNshEncapEnable = 533, /* This action triggers to NSH
                                           encapuslation in the outgoing packet. */
    bcmFieldActionNshServicePathId = 534, /* Add Service Path ID to the NSH for
                                           the lookups at egress stage. */
    bcmFieldActionNshServiceIndex = 535, /* Add Service Index to the NSH for the
                                           lookups at egress stage. */
    bcmFieldActionL3IngressStrengthSet = 536, /* Set the strength levels for L3_IIF
                                           assignment from various sources w.r.t
                                           VFP.. */
    bcmFieldActionGbpClassifierAdd = 537, /* Indicates that GBP is present for
                                           EPIPE for Multicast flows. */
    bcmFieldActionGbpSrcIdNew = 538,    /* Assign a new GBP source ID for
                                           matched packet. */
    bcmFieldActionAssignOpaqueObject1 = 539, /* Assign a flex Opaque 1 object. */
    bcmFieldActionAssignOpaqueObject2 = 540, /* Assign a flex Opaque 2 object. */
    bcmFieldActionAssignOpaqueObject3 = 541, /* Assign a flex Opaque 3 object. */
    bcmFieldActionAssignOpaqueObject4 = 542, /* Assign a flex Opaque 4 object. */
    bcmFieldActionAssignExtractionCtrlId = 543, /* Assign a flex Extraction Control ID. */
    bcmFieldActionAssignEditCtrlId = 544, /* Assign a flex Extraction Control ID. */
    bcmFieldActionFlowtrackerEnable = 545, /* Enable/Disable Flowtracking for flows
                                           hitting this entry. */
    bcmFieldActionFlowtrackerNewLearnEnable = 546, /* Enable/Disable new learning in
                                           flowtracker for flows hitting this
                                           entry. */
    bcmFieldActionCosMapSelect = 547,   /* This action applies the given COS map
                                           type (as defined in
                                           bcm_field_cos_map_select_t) */
    bcmFieldActionGbpSrcMacMcastBitSet = 548, /* This action converts matched packet?s
                                           Source Mac to Multicast based on
                                           Field Control
                                           bcmFieldControlGbpSrcMacMcastBitSet */
    bcmFieldActionGbpDstIdNew = 549,    /* Assign a new  GBP Destination ID for
                                           matched packet. */
    bcmFieldActionLoopbackSubtype = 550, /* This action adds Subtype in the
                                           Loopback header. */
    bcmFieldActionEgressFlowControlEnable = 551, /* This action enables Egress Flow
                                           controls */
    bcmFieldActionEgressFlowEncapEnable = 552, /* This action enables Egress Flow encap
                                           of type bcm_field_egress_flow_encap_t */
    bcmFieldActionSystemHeaderSizeAdjust = 553, /* Updates the System Header Size Adjust
                                           value. */
    bcmFieldActionInVportClass0 = 554,  /* Updates the profile of an in LIF 0
                                           encoded as Gport. */
    bcmFieldActionInVportClass1 = 555,  /* Updates the profile of an in LIF 1
                                           encoded as Gport. */
    bcmFieldActionNetworkQos = 556,     /* Set the Network QoS. */
    bcmFieldActionVoid = 557,           /* This action will be used when no Hw
                                           resource should be taken (SW only). */
    bcmFieldActionContainer = 558,      /* This action will be used as container
                                           in IPMF2, to parse the action buffer,
                                           when performing cascading between
                                           IPMF2 and IPMF3. */
    bcmFieldActionParsingStartType = 559, /*  Indicate the layer type that egress
                                           parser should consider. */
    bcmFieldActionParsingStartOffset = 560, /*  Indicate from which offset egress
                                           parser should start parsing (all info
                                           before that will not be parsed). */
    bcmFieldActionEgressForwardingIndex = 561, /* Indicate for egress parser which
                                           layer is the Forwarding layer. */
    bcmFieldActionUDHData0 = 562,       /* User Define Header 0 data. */
    bcmFieldActionUDHData1 = 563,       /* User Define Header 1 data. */
    bcmFieldActionUDHData2 = 564,       /* User Define Header 2 data. */
    bcmFieldActionUDHData3 = 565,       /* User Define Header 3 data. */
    bcmFieldActionUDHBase0 = 566,       /* User Define Header 0 base. */
    bcmFieldActionUDHBase1 = 567,       /* User Define Header 1 base. */
    bcmFieldActionUDHBase2 = 568,       /* User Define Header 2 base. */
    bcmFieldActionUDHBase3 = 569,       /* User Define Header 3 base. */
    bcmFieldActionUDHBase = 570,        /* User define header base, used in
                                           IPMF3. */
    bcmFieldActionIPTProfile = 571,     /* IPT Profile action. */
    bcmFieldActionIPTCommand = 572,     /* IPT Profile command. */
    bcmFieldActionStatId0 = 573,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatId1 = 574,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatId2 = 575,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatId3 = 576,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatId4 = 577,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatId5 = 578,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatId6 = 579,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatId7 = 580,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatId8 = 581,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatId9 = 582,        /* Updates statistics ID on entry hit. */
    bcmFieldActionStatProfile0 = 583,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionStatProfile1 = 584,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionStatProfile2 = 585,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionStatProfile3 = 586,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionStatProfile4 = 587,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionStatProfile5 = 588,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionStatProfile6 = 589,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionStatProfile7 = 590,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionStatProfile8 = 591,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionStatProfile9 = 592,   /* Updates statistics profile on entry
                                           hit. */
    bcmFieldActionInvalidNext = 593,    /* Indicates to not execute the next
                                           action. */
    bcmFieldActionIngressDoNotLearn = 594, /* Disables L2 learning in ingress. */
    bcmFieldActionEgressDoNotLearn = 595, /* Disables L2 learning in egress. */
    bcmFieldActionDstRpf = 596,         /* Set the RPF destination. */
    bcmFieldActionDstRpfValid = 597,    /* Validate the RPF destination. */
    bcmFieldActionVisibilityClear = 598, /* Clear visibility. */
    bcmFieldActionStatMetaData = 599,   /* Set statistics metaData. */
    bcmFieldActionAceEntryId = 600,     /* Set ace ID pointer. */
    bcmFieldActionInVport0 = 601,       /* Set INLIF0, value given as Gport. */
    bcmFieldActionInVport1 = 602,       /* Set INLIF1, value given as Gport. */
    bcmFieldActionOutVport0 = 603,      /* Set OUTLIF0, value given as Gport. */
    bcmFieldActionOutVport1 = 604,      /* Set OUTLIF1, value given as Gport. */
    bcmFieldActionOutVport2 = 605,      /* Set OUTLIF2, value given as Gport. */
    bcmFieldActionOutVport3 = 606,      /* Set OUTLIF3, value given as Gport. */
    bcmFieldActionExtStat0 = 607,       /* Update External Statistics ID 0. */
    bcmFieldActionExtStat1 = 608,       /* Update External Statistics ID 1. */
    bcmFieldActionExtStat2 = 609,       /* Update External Statistics ID 2. */
    bcmFieldActionExtStat3 = 610,       /* Update External Statistics ID 3. */
    bcmFieldActionForwardingTypeMeterMap = 611, /* Maps L2 forwarding type to one of the
                                           general meters. */
    bcmFieldActionStatSampling = 612,   /* Updates statistical sampling value. */
    bcmFieldActionStatOamLM = 613,      /* Updates OAM LM counter value. */
    bcmFieldActionForwardingLayerIndex = 614, /* Changes the forwarding Layer index at
                                           Egress. */
    bcmFieldActionInInterface0 = 615,   /* Changes the in LIF (INLIF0) encoded
                                           as interface. */
    bcmFieldActionInInterface1 = 616,   /* Changes the in LIF (INLIF1) encoded
                                           as interface. */
    bcmFieldActionOutInterface0 = 617,  /* Changes the out LIF (OUTLIF0) encoded
                                           as interface. */
    bcmFieldActionOutInterface1 = 618,  /* Changes the out LIF (OUTLIF1) encoded
                                           as interface. */
    bcmFieldActionOutInterface2 = 619,  /* Changes the out LIF (OUTLIF2) encoded
                                           as interface. */
    bcmFieldActionOutInterface3 = 620,  /* Changes the out LIF (OUTLIF3) encoded
                                           as interface. */
    bcmFieldActionTrapStrength = 621,   /* Updates the Trap Strength. */
    bcmFieldActionSnoopStrength = 622,  /* Updates the Snoop strength. */
    bcmFieldActionOutPortTrafficManagement = 623, /* Updates the Out-TM port. */
    bcmFieldActionAceContextValue = 624, /* Updates ACE context. */
    bcmFieldActionBierStringOffset = 625, /* Updates Bier string offset. */
    bcmFieldActionBierStringSize = 626, /* Updates Bier string size. */
    bcmFieldActionPacketIsBier = 627,   /* Updates is Bier packet. */
    bcmFieldActionEventor = 628,        /* Enable push data to eventor. */
    bcmFieldActionForwardingAdditionalInfo = 629, /* Updates forwarding additional
                                           information. */
    bcmFieldActionSmallExemLearn = 630, /* Updates the Small Exact Match learn
                                           info (IPMF2 only). */
    bcmFieldActionLargeExemLearn = 631, /* Updates the Large Exact Match learn
                                           info (IPMF1 only). */
    bcmFieldActionGroupLookupDisable = 632, /* Disables FP lookup for a given group
                                           or groups sharing same slice
                                           (Applicable to Presel only). */
    bcmFieldActionOamCopyToCpu = 633,   /* Copies packet to CPU along with OAM
                                           reason code be carried to CPU */
    bcmFieldActionGpOamCopyToCpu = 634, /* Copies Green packet to CPU along with
                                           OAM reason code be carried to CPU */
    bcmFieldActionYpOamCopyToCpu = 635, /* Copies Yellow packet to CPU along
                                           with OAM reason code be carried to
                                           CPU */
    bcmFieldActionRpOamCopyToCpu = 636, /* Copies Red packet to CPU along with
                                           OAM reason code be carried to CPU */
    bcmFieldActionInVport0Raw = 637,    /* Change the In Lif0, with raw value. */
    bcmFieldActionInVport1Raw = 638,    /* Change the In Lif1, with raw value. */
    bcmFieldActionOutVport0Raw = 639,   /* Change the Out Lif 0, with raw value. */
    bcmFieldActionOutVport1Raw = 640,   /* Change the Out Lif 1, with raw value. */
    bcmFieldActionOutVport2Raw = 641,   /* Change the Out Lif 2, with raw value. */
    bcmFieldActionOutVport3Raw = 642,   /* Change the Out Lif 3, with raw value. */
    bcmFieldActionAppendPointerCompensation = 643, /* Configures pointer to header append
                                           compensation value. */
    bcmFieldActionAssignNatClassId = 644, /* Assigns NAT class ID to have lookup
                                           in Egress Vlan translation for NAT. */
    bcmFieldActionAssignChangeL2FieldsClassId = 645, /* Assigns class ID to have a lookup in
                                           Egress Vlan translation for Change L2
                                           Fields. */
    bcmFieldActionIngressTimeStampInsertValid = 646, /* Insert ingress timestamp. Overrides
                                           the time stamp in TSH header. */
    bcmFieldActionMacSecDecryptPktType = 647, /* This action updates MACSEC Decrypt
                                           packet type. */
    bcmFieldActionMacSecEncryptPktType = 648, /* This action updates MACSEC Encrypt
                                           packet type in Egress Pipe. */
    bcmFieldActionMacSecUseSubportNumberFromEvxlt = 649, /* This action updates subport number
                                           from EVXLT in Egress Pipe for Encrypt
                                           case. */
    bcmFieldActionMacSecModidBase = 650, /* This action enables the new modid
                                           base for MACSEC. */
    bcmFieldActionFlowtrackerTimestampDelayMode = 651, /* This action sets timestamp delay mode
                                           for flowtracker. */
    bcmFieldActionSnoopRaw = 652,       /* Snoop matched packets, input should
                                           be raw value. At egress stage refers
                                           only to the snoop ID (strength is not
                                           relevant, and can be changed using
                                           bcmFieldActionSnoopStrength action) */
    bcmFieldActionDropPrecedenceRaw = 653, /* Set Packet's Drop Precedence, input
                                           expects raw value. */
    bcmFieldActionFabricHeaderSetRaw = 654, /* Change System Header Profile, input
                                           expects raw value. */
    bcmFieldActionSrcGportNewRaw = 655, /* Set the Source-Port, input expects
                                           raw value. */
    bcmFieldActionLatencyFlowIdRaw = 656, /* Change the latency flow-Id, input
                                           expects raw value. */
    bcmFieldActionMirrorIngressRaw = 657, /* Set mirror in ingress, input expects
                                           raw value. */
    bcmFieldActionOamRaw = 658,         /* Changes 4 OAM signals
                                           (OAM-Stamp-Offset, OAM-offset,
                                           OAM-Sub-Type, OAM-Up-Mep), input
                                           expects raw value. */
    bcmFieldActionTrapRaw = 659,        /* Set Trap code, input should be raw
                                           value. At egress stage refers only to
                                           the TRAP ID (strength is not
                                           relevant, and can be changed using
                                           bcmFieldActionTrapStrength action). */
    bcmFieldActionVrfSetRaw = 660,      /* Set VRF. Input expects raw value. */
    bcmFieldActionStatProfile0Raw = 661, /* Updates statistics profile 0. Input
                                           expects raw value. */
    bcmFieldActionStatProfile1Raw = 662, /* Updates statistics profile 1. Input
                                           expects raw value. */
    bcmFieldActionStatProfile2Raw = 663, /* Updates statistics profile 2. Input
                                           expects raw value. */
    bcmFieldActionStatProfile3Raw = 664, /* Updates statistics profile 3. Input
                                           expects raw value. */
    bcmFieldActionStatProfile4Raw = 665, /* Updates statistics profile 4. Input
                                           expects raw value. */
    bcmFieldActionStatProfile5Raw = 666, /* Updates statistics profile 5. Input
                                           expects raw value. */
    bcmFieldActionStatProfile6Raw = 667, /* Updates statistics profile 6. Input
                                           expects raw value. */
    bcmFieldActionStatProfile7Raw = 668, /* Updates statistics profile 7. Input
                                           expects raw value. */
    bcmFieldActionStatProfile8Raw = 669, /* Updates statistics profile 8. Input
                                           expects raw value. */
    bcmFieldActionStatProfile9Raw = 670, /* Updates statistics profile 9. Input
                                           expects raw value. */
    bcmFieldActionExtStat0Raw = 671,    /* Update External Statistics ID 0.
                                           Input expects raw value. */
    bcmFieldActionExtStat1Raw = 672,    /* Update External Statistics ID 1.
                                           Input expects raw value. */
    bcmFieldActionExtStat2Raw = 673,    /* Update External Statistics ID 2.
                                           Input expects raw value. */
    bcmFieldActionExtStat3Raw = 674,    /* Update External Statistics ID 3.
                                           Input expects raw value. */
    bcmFieldActionStatSamplingRaw = 675, /* Update statistical sampling value,
                                           input expects raw value. */
    bcmFieldActionStartPacketStripRaw = 676, /* Strip the start of packet. Refers to
                                           bcm_field_start_packet_strip_t. Input
                                           expects raw value. */
    bcmFieldActionParsingStartTypeRaw = 677, /* Indicate the layer type that egress
                                           parser should consider, input expects
                                           raw value. */
    bcmFieldActionParsingStartOffsetRaw = 678, /* Indicate from which offset egress
                                           parser should start parsing (all info
                                           before that will not be parsed).
                                           Input expects raw value. */
    bcmFieldActionIPTCommandRaw = 679,  /* IPT Profile command. Input expects
                                           raw value. */
    bcmFieldActionMirrorEgressRaw = 680, /* Update the egress mirror profile,
                                           input expects raw value. */
    bcmFieldActionTrapStrengthRaw = 681, /* Updates the Trap Strength, input
                                           expects raw value. */
    bcmFieldActionSnoopStrengthRaw = 682, /* Updates the Snoop Strength, input
                                           expects raw value. */
    bcmFieldActionAceContextValueRaw = 683, /* Updates programmable value per ACE
                                           context, input expects raw value. */
    bcmFieldActionStat0Raw = 684,       /* Stat meter object. Input expects raw
                                           value. */
    bcmFieldActionStat1Raw = 685,       /* Stat counter object. Input expects
                                           raw value. */
    bcmFieldActionIpMulticastCompatible = 686, /* Designates when a Compatible MC
                                           procedure found a match. */
    bcmFieldActionRpfOutVport = 687,    /* Updates the RPF OUT LIF. */
    bcmFieldActionRpfOutInterface = 688, /* Updates the RPF OUT LIF. */
    bcmFieldActionRpfOutVportRaw = 689, /* Updates the RPF OUT LIF. Input
                                           expects raw value. */
    bcmFieldActionMirrorOnDropEnable = 690, /* This action enables Mirror On Drop
                                           which in turn mirrors MMU dropped
                                           packets to CosQ profile set by action
                                           bcmFieldActionMirrorOnDropProfileSet */
    bcmFieldActionMirrorOnDropProfileSet = 691, /* Mirrors the MMU dropped packets to
                                           the given CosQ profile. Action
                                           bcmFieldActionMirrorOnDropProfileSet 
                                           need to be added to the entry to
                                           enable this feature. */
    bcmFieldActionLearnRaw0 = 692,      /* Updates learn info 0. */
    bcmFieldActionLearnRaw1 = 693,      /* Updates learn info 1. */
    bcmFieldActionLearnRaw2 = 694,      /* Updates learn info 2. */
    bcmFieldActionLearnRaw3 = 695,      /* Updates learn info 3. */
    bcmFieldActionLearnRaw4 = 696,      /* Updates learn info 4. */
    bcmFieldActionIngressDstTypeSelect = 697, /* To set, ingress destination type. */
    bcmFieldActionIngressDstVal = 698,  /* To set, ingress destination value. */
    bcmFieldActionDlbEcmpAlternatePathEnable = 699, /* To enable Dynamic Load balancing ECMP
                                           alternate path. */
    bcmFieldActionDlbEcmpMonitorDisable = 700, /* To disable Dynamic Load Balancing
                                           ECMP monitoring */
    bcmFieldActionDlbTrunkAlternatePathEnable = 701, /* To enable Dynamic Load balancing LAG
                                           alternate path. */
    bcmFieldActionDlbTrunkMonitorDisable = 702, /* To disable Dynamic Load Balancing LAG
                                            monitoring. */
    bcmFieldActionDlbTrunkMonitorEnable = 703, /* To enable Dynamic Load Balancing LAG 
                                           monitoring. */
    bcmFieldActionSrcNetworkGroup = 704, /* To set Source Network group bitmap. */
    bcmFieldActionDoNotModify = 705,    /* To not apply Field processor changes
                                           on the packet. */
    bcmFieldActionSvpNew = 706,         /* To set new Source Virtual port. */
    bcmFieldActionIntCongestionNotification = 707, /* To set Internal Congestion
                                           Notification value. */
    bcmFieldActionColor = 708,          /* To set color */
    bcmFieldActionMyStationHit = 709,   /* To mark the packet as My Station
                                           lookup done. */
    bcmFieldActionTunnelOuterVlanNew = 710, /* Replace Tunnel Outer Vlan Id */
    bcmFieldActionPktTraceIdx = 711,    /* To Set Packet Trace Index */
    bcmFieldActionAssignOpaqueObject0 = 712, /* Assign a flex Opaque 0 object. */
    bcmFieldActionIntSampleThreshold = 713, /* IOAM threshold to compare it with
                                           generated random number to trigger
                                           metadata insert. */
    bcmFieldActionDstRpfGportNewValid = 714, /* Set the RPF Destination Valid. */
    bcmFieldActionDstRpfGportNewRaw = 715, /* Set the RPF Destination. Input
                                           expects raw value. */
    bcmFieldActionIntResidenceTimeEnable = 716, /* Use residence time in inband
                                           telemetry. */
    bcmFieldActionDgmTrunkPriPathThreshold = 717, /* DGM trunk primary path threshold
                                           value. */
    bcmFieldActionDgmTrunkAltPathCost = 718, /* DGM trunk alternate path cost. */
    bcmFieldActionDgmTrunkAltPathBias = 719, /* DGM trunk alternate path bias. */
    bcmFieldActionDgmEcmpPriPathThreshold = 720, /* DGM ecmp primary path threshold
                                           value. */
    bcmFieldActionDgmEcmpAltPathCost = 721, /* DGM ecmp alternate path cost. */
    bcmFieldActionDgmEcmpAltPathBias = 722, /* DGM ecmp alternate path bias. */
    bcmFieldActionInsertHiGig3Ext0 = 723, /* enforce insertion of HG3 ext0. */
    bcmFieldActionPacketStatus = 724,   /* Packet status. */
    bcmFieldActionForwardingStatus = 725, /* Packet forwarding status. */
    bcmFieldActionIntStatReq0 = 726,    /* Inband telemetry stat request 0
                                           actions. */
    bcmFieldActionIntStatReq1 = 727,    /* Inband telemetry stat request 1
                                           actions. */
    bcmFieldActionCount = 728           /* Always Last. Not a usable value. */
} bcm_field_action_t;

#define BCM_FIELD_ACTION_STRINGS \
{ \
    "CosQNew", \
    "CosQCpuNew", \
    "VlanCosQNew", \
    "UcastCosQNew", \
    "McastCosQNew", \
    "PrioPktAndIntCopy", \
    "PrioPktAndIntNew", \
    "PrioPktAndIntTos", \
    "PrioPktAndIntCancel", \
    "PrioPktCopy", \
    "PrioPktNew", \
    "PrioPktTos", \
    "PrioPktCancel", \
    "PrioIntCopy", \
    "PrioIntNew", \
    "PrioIntTos", \
    "PrioIntCancel", \
    "TosNew", \
    "TosCopy", \
    "TosCancel", \
    "DscpNew", \
    "DscpCancel", \
    "EcnNew", \
    "CopyToCpu", \
    "CopyToCpuCancel", \
    "SwitchToCpuCancel", \
    "SwitchToCpuReinstate", \
    "TimeStampToCpu", \
    "TimeStampToCpuCancel", \
    "RedirectPort", \
    "RedirectTrunk", \
    "RedirectCancel", \
    "RedirectPbmp", \
    "RedirectIpmc", \
    "RedirectMcast", \
    "RedirectVlan", \
    "RedirectBcastPbmp", \
    "EgressMask", \
    "EgressPortsAdd", \
    "Drop", \
    "DropCancel", \
    "MirrorOverride", \
    "MirrorIngress", \
    "MirrorEgress", \
    "L3ChangeVlan", \
    "L3ChangeVlanCancel", \
    "L3ChangeMacDa", \
    "L3ChangeMacDaCancel", \
    "L3Switch", \
    "L3SwitchCancel", \
    "AddClassTag", \
    "DropPrecedence", \
    "RpDrop", \
    "RpDropCancel", \
    "RpDropPrecedence", \
    "RpCopyToCpu", \
    "RpCopyToCpuCancel", \
    "RpSwitchToCpuCancel", \
    "RpSwitchToCpuReinstate", \
    "RpTimeStampToCpu", \
    "RpTimeStampToCpuCancel", \
    "RpDscpNew", \
    "RpDscpCancel", \
    "RpEcnNew", \
    "RpOuterVlanPrioNew", \
    "RpInnerVlanPrioNew", \
    "RpOuterVlanCfiNew", \
    "RpInnerVlanCfiNew", \
    "RpPrioPktCopy", \
    "RpPrioPktNew", \
    "RpPrioPktTos", \
    "RpPrioPktCancel", \
    "RpCosQNew", \
    "RpVlanCosQNew", \
    "RpUcastCosQNew", \
    "RpMcastCosQNew", \
    "RpPrioPktAndIntCopy", \
    "RpPrioPktAndIntNew", \
    "RpPrioPktAndIntTos", \
    "RpPrioPktAndIntCancel", \
    "RpPrioIntCopy", \
    "RpPrioIntNew", \
    "RpPrioIntTos", \
    "RpPrioIntCancel", \
    "YpDrop", \
    "YpDropCancel", \
    "YpDropPrecedence", \
    "YpCopyToCpu", \
    "YpCopyToCpuCancel", \
    "YpSwitchToCpuCancel", \
    "YpSwitchToCpuReinstate", \
    "YpTimeStampToCpu", \
    "YpTimeStampToCpuCancel", \
    "YpDscpNew", \
    "YpDscpCancel", \
    "YpEcnNew", \
    "YpOuterVlanPrioNew", \
    "YpInnerVlanPrioNew", \
    "YpOuterVlanCfiNew", \
    "YpInnerVlanCfiNew", \
    "YpPrioPktCopy", \
    "YpPrioPktNew", \
    "YpPrioPktTos", \
    "YpPrioPktCancel", \
    "YpCosQNew", \
    "YpVlanCosQNew", \
    "YpUcastCosQNew", \
    "YpMcastCosQNew", \
    "YpPrioPktAndIntCopy", \
    "YpPrioPktAndIntNew", \
    "YpPrioPktAndIntTos", \
    "YpPrioPktAndIntCancel", \
    "YpPrioIntCopy", \
    "YpPrioIntNew", \
    "YpPrioIntTos", \
    "YpPrioIntCancel", \
    "UpdateCounter", \
    "MeterConfig", \
    "ColorIndependent", \
    "ClassDestSet", \
    "ClassSourceSet", \
    "VrfSet", \
    "InnerVlanNew", \
    "InnerVlanPrioNew", \
    "InnerVlanDelete", \
    "OuterVlanDelete", \
    "OuterVlanDeleteCancel", \
    "InnerVlanAdd", \
    "InnerVlanCfiNew", \
    "OuterVlanNew", \
    "OuterVlanAdd", \
    "OuterVlanAddCancel", \
    "OuterVlanLookup", \
    "OuterVlanPrioNew", \
    "OuterVlanCfiNew", \
    "OuterTpidNew", \
    "GpDrop", \
    "GpDropCancel", \
    "GpDropPrecedence", \
    "GpCopyToCpu", \
    "GpCopyToCpuCancel", \
    "GpSwitchToCpuCancel", \
    "GpSwitchToCpuReinstate", \
    "GpTimeStampToCpu", \
    "GpTimeStampToCpuCancel", \
    "GpDscpNew", \
    "GpDscpCancel", \
    "GpEcnNew", \
    "GpTosPrecedenceNew", \
    "GpTosPrecedenceCopy", \
    "GpOuterVlanPrioNew", \
    "GpInnerVlanPrioNew", \
    "GpOuterVlanCfiNew", \
    "GpInnerVlanCfiNew", \
    "GpPrioPktCopy", \
    "GpPrioPktNew", \
    "GpPrioPktTos", \
    "GpPrioPktCancel", \
    "GpCosQNew", \
    "GpVlanCosQNew", \
    "GpUcastCosQNew", \
    "GpMcastCosQNew", \
    "GpPrioPktAndIntCopy", \
    "GpPrioPktAndIntNew", \
    "GpPrioPktAndIntTos", \
    "GpPrioPktAndIntCancel", \
    "GpPrioIntCopy", \
    "GpPrioIntNew", \
    "GpPrioIntTos", \
    "GpPrioIntCancel", \
    "DoNotChangeTtl", \
    "DoNotCheckUrpf", \
    "DoNotCheckVlan", \
    "DoNotLearn", \
    "IpFix", \
    "IpFixCancel", \
    "IncomingMplsPortSet", \
    "Deprecated177", \
    "NewClassId", \
    "Deprecated179", \
    "Deprecated180", \
    "Deprecated181", \
    "Deprecated182", \
    "Deprecated183", \
    "Deprecated184", \
    "Deprecated185", \
    "MultipathHash", \
    "IpfixRate", \
    "OffloadRedirect", \
    "OffloadClassSet", \
    "OffloadDropIndication", \
    "OamUpMep", \
    "OamTx", \
    "OamLmepMdl", \
    "OamServicePriMappingPtr", \
    "OamLmBasePtr", \
    "OamDmEnable", \
    "OamLmEnable", \
    "OamLmepEnable", \
    "OamPbbteLookupEnable", \
    "SrcMacNew", \
    "DstMacNew", \
    "VnTagNew", \
    "VnTagDelete", \
    "Deprecated204", \
    "Deprecated205", \
    "VportNew", \
    "VportSpcpNew", \
    "VportCpcpNew", \
    "VportTcNew", \
    "VportDpNew", \
    "RedirectVportPort", \
    "MacDaKnown", \
    "Filters", \
    "FabricQueue", \
    "CnmCancel", \
    "DynamicHgTrunkCancel", \
    "EgressMirrorDisable", \
    "MultipathHashAdditionalInfo", \
    "Deprecated219", \
    "MirrorEgressDisable", \
    "OuterVlanCopyInner", \
    "OuterVlanPrioCopyInner", \
    "OuterVlanCfiCopyInner", \
    "InnerVlanCopyOuter", \
    "InnerVlanPrioCopyOuter", \
    "InnerVlanCfiCopyOuter", \
    "CompressSrcIp6", \
    "CompressDstIp6", \
    "ServicePoolIdNew", \
    "UseGlobalMeterColor", \
    "RedirectEgrNextHop", \
    "TrunkLoadBalanceCancel", \
    "EcmpLoadBalanceCancel", \
    "DoNotOverride", \
    "EgressClassSelect", \
    "HiGigClassSelect", \
    "OamDmTimeFormat", \
    "OamLmDmSampleEnable", \
    "OamTagStatusCheck", \
    "OamTunnelControl", \
    "Regex", \
    "NoRegex", \
    "Stat0", \
    "PolicerLevel0", \
    "PolicerLevel1", \
    "PolicerGroup", \
    "StatGroup", \
    "VSQ", \
    "IntPriorityAndDropPrecedence", \
    "ISQ", \
    "Trap", \
    "UsePolicerResult", \
    "Stat1", \
    "StatTag", \
    "Snoop", \
    "TtlSet", \
    "IncomingIpIfSet", \
    "OrientationSet", \
    "TrunkHashKeySet", \
    "DstRpfGportNew", \
    "DhcpPkt", \
    "SrcGportNew", \
    "ForwardingTypeNew", \
    "StartPacketStrip", \
    "SystemHeaderSet", \
    "VSwitchNew", \
    "LearnSrcMacNew", \
    "LearnSrcPortNew", \
    "LearnForwardingVlanIdNew", \
    "QosMapIdNew", \
    "VlanActionSetNew", \
    "VlanTranslationValueSet", \
    "TunnelTerminatedValueSet", \
    "MplsTerminatedValueSet", \
    "IpTunnelValueSet", \
    "L2SrcValueSet", \
    "L2DestValueSet", \
    "L3SrcRouteValueSet", \
    "L3DestRouteValueSet", \
    "IpmcValueSet", \
    "CascadedKeyValueSet", \
    "IngressGportSet", \
    "ExternalValue0Set", \
    "ExternalValue1Set", \
    "ExternalValue2Set", \
    "ExternalValue3Set", \
    "NatCancel", \
    "Nat", \
    "NatEgressOverride", \
    "RegexActionCancel", \
    "PortPrioIntCosQNew", \
    "RpPortPrioIntCosQNew", \
    "YpPortPrioIntCosQNew", \
    "GpPortPrioIntCosQNew", \
    "YpMirrorIngress", \
    "YpRedirectPort", \
    "Deprecated297", \
    "FibreChanSrcBindEnable", \
    "FibreChanFpmaPrefixCheckEnable", \
    "FibreChanZoneCheckEnable", \
    "FibreChanVsanId", \
    "FibreChanZoneCheckActionCancel", \
    "FibreChanIntVsanPri", \
    "LearnInVPortNew", \
    "OamDomain", \
    "OamOlpHeaderAdd", \
    "OamSessionId", \
    "OuterVlanCfiCancel", \
    "InnerVlanPriCancel", \
    "PrioIntRemark", \
    "UseDefaultWred", \
    "HashValueSet", \
    "L3IngressSet", \
    "InterfaceClassVPort", \
    "IngSampleEnable", \
    "EgrSampleEnable", \
    "HashSelect0", \
    "HashSelect1", \
    "TrunkResilientHashCancel", \
    "HgTrunkResilientHashCancel", \
    "EcmpResilientHashCancel", \
    "UnmodifiedPacketRedirectPort", \
    "EtagNew", \
    "EtagDelete", \
    "PfcClassNew", \
    "RpIntCongestionNotificationNew", \
    "YpIntCongestionNotificationNew", \
    "GpIntCongestionNotificationNew", \
    "RpHGCongestionClassNew", \
    "YpHGCongestionClassNew", \
    "GpHGCongestionClassNew", \
    "RedirDropPrecedence", \
    "RpRedirDropPrecedence", \
    "YpRedirDropPrecedence", \
    "GpRedirDropPrecedence", \
    "HiGigDstModuleGportNew", \
    "HiGigDstPortGportNew", \
    "HiGigDstGportNew", \
    "GpHiGigDropPrecedenceNew", \
    "YpHiGigDropPrecedenceNew", \
    "RpHiGigDropPrecedenceNew", \
    "HiGigDropPrecedenceNew", \
    "GpHiGigIntPriNew", \
    "YpHiGigIntPriNew", \
    "RpHiGigIntPriNew", \
    "HiGigIntPriNew", \
    "LoopbackSrcModuleGportNew", \
    "LoopbackSrcPortGportNew", \
    "LoopbackSrcGportNew", \
    "LoopbackCpuMasqueradePktProfileNew", \
    "LoopbackPacketProcessingPortNew", \
    "LoopBackTypeNew", \
    "RecoverableDropCancel", \
    "StackingRouteNew", \
    "PphPresentSet", \
    "VxlanHeaderBits8_31_Set", \
    "VxlanHeaderBits56_63_Set", \
    "FabricHeaderSet", \
    "Oam", \
    "VpnSet", \
    "L3DestRoutePublicValueSet", \
    "L3SrcRoutePublicValueSet", \
    "ClassZero", \
    "ClassOne", \
    "TrapReduced", \
    "GroupClassSet", \
    "EgressPbmpNullCopyToCpu", \
    "PimBidirFwd", \
    "DscpMapNew", \
    "Reserved370", \
    "Reserved371", \
    "Reserved372", \
    "Reserved373", \
    "FabricEHAddOrUpdate", \
    "Dot1pPreserve", \
    "GpDot1pPreserve", \
    "YpDot1pPreserve", \
    "RpDot1pPreserve", \
    "DscpPreserve", \
    "GpDscpPreserve", \
    "YpDscpPreserve", \
    "RpDscpPreserve", \
    "ChangeL2FieldsCancel", \
    "BFDSessionIdNew", \
    "CosMapNew", \
    "GpCosMapNew", \
    "YpCosMapNew", \
    "RpCosMapNew", \
    "VxlanHeaderFlags", \
    "ChangeL2Fields", \
    "ExactMatchClassId", \
    "PfcTx", \
    "SwitchEncap", \
    "StatVportNew", \
    "UcastQueueNew", \
    "RpUcastQueueNew", \
    "YpUcastQueueNew", \
    "GpUcastQueueNew", \
    "IntCosUcastQueueNew", \
    "RpIntCosUcastQueueNew", \
    "YpIntCosUcastQueueNew", \
    "GpIntCosUcastQueueNew", \
    "HgTrunkRandomRoundRobinHashCancel", \
    "TrunkRandomRoundRobinHashCancel", \
    "EcmpRandomRoundRobinHashCancel", \
    "PacketTraceEnable", \
    "Strength", \
    "RedirectBufferPriority", \
    "RedirectPrioIntNew", \
    "RpRedirectPrioIntNew", \
    "YpRedirectPrioIntNew", \
    "GpRedirectPrioIntNew", \
    "UntaggedPacketPriorityNew", \
    "DoNotCutThrough", \
    "LoopbackOamResponse", \
    "LoopbackSatResponse", \
    "OamStatObjectSessionId", \
    "ServicePrioIntCosQNew", \
    "RpServicePrioIntCosQNew", \
    "YpServicePrioIntCosQNew", \
    "GpServicePrioIntCosQNew", \
    "ProtectionSwitchingDrop", \
    "ServicePoolIdPrecedenceNew", \
    "SwapMacDaSa", \
    "SwapSourceIPDestIP", \
    "ReplaceTtl", \
    "PacketIsL3SAT", \
    "ReplaceSrcMac", \
    "ReplaceDstMac", \
    "ReplaceInnerVlan", \
    "ReplaceOuterVlan", \
    "ReplaceInnerVlanPriority", \
    "ReplaceOuterVlanPriority", \
    "StatAndPolicer", \
    "SnoopAndTrap", \
    "IEEE1588", \
    "ExternalValue4Set", \
    "ExternalValue5Set", \
    "Forward", \
    "TrapCodeQualifier", \
    "PphSnoopCode", \
    "EgressTimeStampInsert", \
    "IngressTimeStampInsert", \
    "IngressTimeStampInsertCancel", \
    "EgressTimeStampInsertCancel", \
    "MplsLabel1ExpNew", \
    "DynamicEcmpEnable", \
    "DynamicTrunkEnable", \
    "DynamicTrunkCancel", \
    "Dgm", \
    "DgmThreshold", \
    "DgmBias", \
    "DgmCost", \
    "StaggeredValue0Set", \
    "StaggeredValue1Set", \
    "StaggeredValue2Set", \
    "StaggeredValue3Set", \
    "StaggeredDirectValueSet", \
    "StaggeredPreselProfile0Set", \
    "StaggeredPreselProfile1Set", \
    "StaggeredPreselProfile2Set", \
    "StaggeredPreselProfile3Set", \
    "StaggeredPreselProfileDirectSet", \
    "EnableVlanCheck", \
    "AdmitProfile", \
    "DynamicHgTrunkEnable", \
    "VxlanTerminate", \
    "UseTunnelPayload", \
    "VlanActions", \
    "SRDuplicateDrop", \
    "SRDuplicateDropCancel", \
    "SRNetIdFilter", \
    "SRNetIdSource", \
    "FilterSrcMacPorts", \
    "SRCopyToCpu", \
    "SRTagAdd", \
    "SRTagDelete", \
    "SRLanIdNew", \
    "SRNetIdNew", \
    "SRFlowIdNew", \
    "SRFlowPriMapIdNew", \
    "MtuSize", \
    "StuSize", \
    "TsnFlowIdNew", \
    "TsnFlowPriMapIdNew", \
    "MtuProfileIdNew", \
    "StuProfileIdNew", \
    "ExternalValue6Set", \
    "ExternalValue7Set", \
    "EsmSearchKeySrcMac", \
    "TrunkResilientHashEnable", \
    "TrunkResilientHashDisable", \
    "EcmpResilientHashEnable", \
    "EcmpResilientHashDisable", \
    "HiGigTrunkResilientHashEnable", \
    "HiGigTrunkResilientHashDisable", \
    "MacSecDecrypt", \
    "MacSecEncrypt", \
    "MacSecSubPortNumAdd", \
    "MacSecPktTypeSet", \
    "LatencyFlowId", \
    "IntEncapEnable", \
    "IntTurnAround", \
    "MacSecRedirectIpmc", \
    "AddIngOuterVlanToEgrOuterVlan", \
    "Erspan3HdrVlanCosPktCopy", \
    "Erspan3HdrGbpSrcIdAdd", \
    "Erspan3HdrUdf2Add", \
    "RoeFrameTypeSet", \
    "FlowtrackerGroupId", \
    "StatisticPtr0", \
    "StatisticPtr1", \
    "TafGatePriMap", \
    "IntEncapUpdate", \
    "MplsLookupEnable", \
    "TerminationAllowed", \
    "MatchPbmpDrop", \
    "MatchPbmpRedirect", \
    "IntEncapDisable", \
    "ElephantLookupEnable", \
    "ElephantLookupDisable", \
    "ElephantColorEnable", \
    "ElephantColorDisable", \
    "ElephantQueueEnable", \
    "ElephantQueueDisable", \
    "LatencyMonitorEnable", \
    "LatencyMonitorDisable", \
    "OamLmCounterPoolId", \
    "LoopbackType", \
    "VisibilityEnable", \
    "DlbEcmpMonitorEnable", \
    "MirrorZeroingEnable", \
    "NshEncapEnable", \
    "NshServicePathId", \
    "NshServiceIndex", \
    "L3IngressStrengthSet", \
    "GbpClassifierAdd", \
    "GbpSrcIdNew", \
    "AssignOpaqueObject1", \
    "AssignOpaqueObject2", \
    "AssignOpaqueObject3", \
    "AssignOpaqueObject4", \
    "AssignExtractionCtrlId", \
    "AssignEditCtrlId", \
    "FlowtrackerEnable", \
    "FlowtrackerNewLearnEnable", \
    "CosMapSelect", \
    "GbpSrcMacMcastBitSet", \
    "GbpDstIdNew", \
    "LoopbackSubtype", \
    "EgressFlowControlEnable", \
    "EgressFlowEncapEnable", \
    "SystemHeaderSizeAdjust", \
    "InVportClass0", \
    "InVportClass1", \
    "NetworkQos", \
    "Void", \
    "Container", \
    "ParsingStartType", \
    "ParsingStartOffset", \
    "EgressForwardingIndex", \
    "UDHData0", \
    "UDHData1", \
    "UDHData2", \
    "UDHData3", \
    "UDHBase0", \
    "UDHBase1", \
    "UDHBase2", \
    "UDHBase3", \
    "UDHBase", \
    "IPTProfile", \
    "IPTCommand", \
    "StatId0", \
    "StatId1", \
    "StatId2", \
    "StatId3", \
    "StatId4", \
    "StatId5", \
    "StatId6", \
    "StatId7", \
    "StatId8", \
    "StatId9", \
    "StatProfile0", \
    "StatProfile1", \
    "StatProfile2", \
    "StatProfile3", \
    "StatProfile4", \
    "StatProfile5", \
    "StatProfile6", \
    "StatProfile7", \
    "StatProfile8", \
    "StatProfile9", \
    "InvalidNext", \
    "IngressDoNotLearn", \
    "EgressDoNotLearn", \
    "DstRpf", \
    "DstRpfValid", \
    "VisibilityClear", \
    "StatMetaData", \
    "AceEntryId", \
    "InVport0", \
    "InVport1", \
    "OutVport0", \
    "OutVport1", \
    "OutVport2", \
    "OutVport3", \
    "ExtStat0", \
    "ExtStat1", \
    "ExtStat2", \
    "ExtStat3", \
    "ForwardingTypeMeterMap", \
    "StatSampling", \
    "StatOamLM", \
    "ForwardingLayerIndex", \
    "InInterface0", \
    "InInterface1", \
    "OutInterface0", \
    "OutInterface1", \
    "OutInterface2", \
    "OutInterface3", \
    "TrapStrength", \
    "SnoopStrength", \
    "OutPortTrafficManagement", \
    "AceContextValue", \
    "BierStringOffset", \
    "BierStringSize", \
    "PacketIsBier", \
    "Eventor", \
    "ForwardingAdditionalInfo", \
    "SmallExemLearn", \
    "LargeExemLearn", \
    "GroupLookupDisable", \
    "OamCopyToCpu", \
    "GpOamCopyToCpu", \
    "YpOamCopyToCpu", \
    "RpOamCopyToCpu", \
    "InVport0Raw", \
    "InVport1Raw", \
    "OutVport0Raw", \
    "OutVport1Raw", \
    "OutVport2Raw", \
    "OutVport3Raw", \
    "AppendPointerCompensation", \
    "AssignNatClassId", \
    "AssignChangeL2FieldsClassId", \
    "IngressTimeStampInsertValid", \
    "MacSecDecryptPktType", \
    "MacSecEncryptPktType", \
    "MacSecUseSubportNumberFromEvxlt", \
    "MacSecModidBase", \
    "FlowtrackerTimestampDelayMode", \
    "SnoopRaw", \
    "DropPrecedenceRaw", \
    "FabricHeaderSetRaw", \
    "SrcGportNewRaw", \
    "LatencyFlowIdRaw", \
    "MirrorIngressRaw", \
    "OamRaw", \
    "TrapRaw", \
    "VrfSetRaw", \
    "StatProfile0Raw", \
    "StatProfile1Raw", \
    "StatProfile2Raw", \
    "StatProfile3Raw", \
    "StatProfile4Raw", \
    "StatProfile5Raw", \
    "StatProfile6Raw", \
    "StatProfile7Raw", \
    "StatProfile8Raw", \
    "StatProfile9Raw", \
    "ExtStat0Raw", \
    "ExtStat1Raw", \
    "ExtStat2Raw", \
    "ExtStat3Raw", \
    "StatSamplingRaw", \
    "StartPacketStripRaw", \
    "ParsingStartTypeRaw", \
    "ParsingStartOffsetRaw", \
    "IPTCommandRaw", \
    "MirrorEgressRaw", \
    "TrapStrengthRaw", \
    "SnoopStrengthRaw", \
    "AceContextValueRaw", \
    "Stat0Raw", \
    "Stat1Raw", \
    "IpMulticastCompatible", \
    "RpfOutVport", \
    "RpfOutInterface", \
    "RpfOutVportRaw", \
    "MirrorOnDropEnable", \
    "MirrorOnDropProfileSet", \
    "LearnRaw0", \
    "LearnRaw1", \
    "LearnRaw2", \
    "LearnRaw3", \
    "LearnRaw4", \
    "IngressDstTypeSelect", \
    "IngressDstVal", \
    "DlbEcmpAlternatePathEnable", \
    "DlbEcmpMonitorDisable", \
    "DlbTrunkAlternatePathEnable", \
    "DlbTrunkMonitorDisable", \
    "DlbTrunkMonitorEnable", \
    "SrcNetworkGroup", \
    "DoNotModify", \
    "SvpNew", \
    "IntCongestionNotification", \
    "Color", \
    "MyStationHit", \
    "TunnelOuterVlanNew", \
    "PktTraceIdx", \
    "AssignOpaqueObject0", \
    "IntSampleThreshold", \
    "DstRpfGportNewValid", \
    "DstRpfGportNewRaw", \
    "IntResidenceTimeEnable", \
    "DgmTrunkPriPathThreshold", \
    "DgmTrunkAltPathCost", \
    "DgmTrunkAltPathBias", \
    "DgmEcmpPriPathThreshold", \
    "DgmEcmpAltPathCost", \
    "DgmEcmpAltPathBias", \
    "InsertHiGig3Ext0", \
    "PacketStatus", \
    "ForwardingStatus", \
    "IntStatReq0", \
    "IntStatReq1"  \
}

/* Used as data value for qualifier bcm_field_qualify_MacSecFlow */
typedef enum bcm_field_macsec_flow_e {
    bcmFieldMacSecFlowNotMacSec = 0,    /* Regular non MACSEC packets */
    bcmFieldMacSecFlowForEncrypt = 1,   /* MACSEC packets for Encryption to
                                           MACSEC port */
    bcmFieldMacSecFlowForDecrypt = 2,   /* MACSEC packets for Decryption to
                                           MACSEC port */
    bcmFieldMacSecFlowAfterDecrypt = 3, /* MACSEC packets after Decryption from
                                           MACSEC port */
    bcmFieldMacSecFlowAfterEncrypt = 4, /* MACSEC packets after Encryption from
                                           MACSEC port */
    bcmFieldMacSecFlowCount = 5         /* Always last. Not to be used. */
} bcm_field_macsec_flow_t;

/* Used as param0 for action bcmFieldActionMacSecPktTypeSet */
typedef enum bcm_field_macsec_pkt_type_e {
    bcmFieldMacSecPktTypeNonMacSec = 0, /* Regular non MACSEC packets */
    bcmFieldMacSecPktTypeMacSec = 1,    /* MACSEC Data packet */
    bcmFieldMacSecPktTypeMacSecMgmt = 2, /* Both BPDU & KaY tagged packets */
    bcmFieldMacSecPktTypeKaYFrames = 3, /* MACSEC packets with SecTAG.TCI.E=1
                                           and SecTAG.TCI.C=0 */
    bcmFieldMacSecPktTypeControlPkt = 4, /* MACSEC Control packet */
    bcmFieldMacSecPktTypeMacSecEncrypted = 5, /* MACSEC already encrypted packet */
    bcmFieldMacSecPktTypeCount = 6      /* Always last. Not to be used. */
} bcm_field_macsec_pkt_type_t;

/* Requires BROADCOM_PREMIUM license */
typedef enum bcm_field_timestamp_transmit_pkt_type_e {
    bcmFieldTimestampTwampOwamp = 0, 
    bcmFieldTimestampCount = 1 
} bcm_field_timestamp_transmit_pkt_type_t;

/* Flow control packet type */
typedef enum bcm_field_flow_control_pkt_type_e {
    bcmFieldFlowControlPktTypeDataPkt = 0, /* Data packet */
    bcmFieldFlowControlPktTypePause = 1, /* Pause flow control */
    bcmFieldFlowControlPktTypePfc = 2,  /* PFC flow control */
    bcmFieldFlowControlPktTypeE2ecc = 3, /* E2ECC flow control */
    bcmFieldFlowControlPktTypeCount = 4 /* Always last. Not to be used. */
} bcm_field_flow_control_pkt_type_t;

/* 
 * Roe Frame Types used for qualifier bcmFieldQualifyRoeFrameType and
 * action bcmFieldActionRoeFrameTypeSet.
 */
typedef enum bcm_field_roe_frame_type_e {
    bcmFieldRoeFrameTypeNone = 0,   /* Frame type is neither Radio over Ethernet
                                       nor Custom Protocol. */
    bcmFieldRoeFrameTypeRoe = 1,    /* Frame type is Radio over Ethernet. */
    bcmFieldRoeFrameTypeCustom = 2, /* Frame type is Custom Protocol. */
    bcmFieldRoeFrameTypeCount = 3   /* Always last. Not to be used. */
} bcm_field_roe_frame_type_t;

#define BCM_FIELD_ROE_FRAME_TYPE_STRINGS \
{ \
    "None", \
    "Roe", \
    "Custom"  \
}

/* 
 * Used as parameter for COS MAP select APIs like
 * bcm_field_qualify_CosMapSelect and bcmFieldActionCosMapSelect
 */
typedef enum bcm_field_cos_map_select_e {
    bcmFieldCosMapSelectWired = 0,      /* Wired */
    bcmFieldCosMapSelectWireless = 1,   /* Wireless */
    bcmFieldCosMapSelectCount = 2       /* Always last. Not to be used. */
} bcm_field_cos_map_select_t;

/* 
 * Used for action bcmFieldActionAdmitProfile to return profile number by
 * enum.
 */
typedef enum bcm_field_admit_profile_e {
    bcmFieldAdmitProfileEcnNonCapable = 0, /* Packet is not ECN capable. Use
                                           profile 0. */
    bcmFieldAdmitProfileEcnCapable = 1  /* Packet is ECN capable. Use profile 1. */
} bcm_field_admit_profile_t;

/* Double Actions param1 values enum */
typedef enum bcm_field_double_action_vals_e {
    bcmFieldDoubleActionNone = 0,   /* Run No Action */
    bcmFieldDoubleActionFirst = 1,  /* Run First Action */
    bcmFieldDoubleActionSecond = 2, /* Run Second Action */
    bcmFieldDoubleActionBoth = 3    /* Run Both Actions */
} bcm_field_double_action_vals_t;

#define BCM_FIELD_DOUBLE_ACTION_VALS \
{ \
    "None", \
    "First", \
    "Second", \
    "Both"  \
}

/* 
 * BCM action and the stage on which it applies specified internal
 * action. See bcm_field_internal_to_bcm_action_map()
 */
typedef struct bcm_field_internal_to_bcm_map_s {
    bcm_field_action_t bcm_action;  /* BCM action containing specified internal
                                       action. See
                                       bcm_field_internal_to_bcm_action_map() */
    bcm_field_stage_t bcm_stage;    /* BCM stage related to specified internal
                                       action. See
                                       bcm_field_internal_to_bcm_action_map() */
} bcm_field_internal_to_bcm_map_t;

/* Holds which action to set width for, and the size of width to set */
typedef struct bcm_field_action_width_s {
    uint32 action; 
    uint32 width; 
    uint8 valid; 
} bcm_field_action_width_t;

/* 
 * Used to specify the actions that can be taken by the entries in a
 * group
 */
typedef struct bcm_field_aset_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(bcmFieldActionCount)]; 
    bcm_field_action_width_t actions_width[16]; /* Actions width struct, used by
                                           bcm_petra_field_action_width_set to
                                           set width for certain action, 16 is
                                           max_actions_per_db */
} bcm_field_aset_t;

#define BCM_FIELD_ASET_INIT(aset)  \
    sal_memset(&(aset), 0, sizeof(bcm_field_aset_t)) 

#define BCM_FIELD_ASET_ADD(aset, q)  SHR_BITSET(((aset).w), (q)) 

#define BCM_FIELD_ASET_ADD_WIDTH(aset, q, width_)  \
    do {                                          \
        int __i__ = 0;                            \
        uint8 __new_valid__ = 1;                  \
        SHR_BITSET(((aset).w), (q));                   \
        for (;(aset).actions_width[__i__].valid != 0;__i__++);  \
        if (__i__ < 16) { \
            sal_memcpy(&((aset).actions_width[__i__].action), &(q), sizeof((q))); \
            sal_memcpy(&((aset).actions_width[__i__].width), &(width_), sizeof((width_))); \
            sal_memcpy(&((aset).actions_width[__i__].valid), &(__new_valid__), 1); \
        } \
    } while(0) 

#define BCM_FIELD_ASET_REMOVE(aset, q)  SHR_BITCLR(((aset).w), (q)) 

#define BCM_FIELD_ASET_TEST(aset, q)  SHR_BITGET(((aset).w), (q)) 

/* 
 * Match rule value used by OAM CCM Embedded App to indicate MEP type
 * through bcmFieldActionCopyToCpu Action
 */
#define BCM_FIELD_OAM_MATCHED_RULE_ETHERNET_PORT 0x1        /* Match rule values used
                                                          by OAM CCM Embedded
                                                          App to indicate Port
                                                          MEP type */
#define BCM_FIELD_OAM_MATCHED_RULE_ETHERNET_INNER_VLAN 0x2        /* Match rule values used
                                                          by OAM CCM Embedded
                                                          App to indicate Inner
                                                          vlan MEP type */
#define BCM_FIELD_OAM_MATCHED_RULE_ETHERNET_OUTER_VLAN 0x3        /* Match rule values used
                                                          by OAM CCM Embedded
                                                          App to indicate Outer
                                                          vlan MEP type */
#define BCM_FIELD_OAM_MATCHED_RULE_ETHERNET_INNER_PLUS_OUTER_VLAN 0x4        /* Match rule values used
                                                          by OAM CCM Embedded
                                                          App to indicate Inner
                                                          + Outer vlan MEP type */

/* 
 * Match rule value used by BFD Embedded App to indicate endpoint type
 * through bcmFieldActionCopyToCpu Action
 */
#define BCM_FIELD_BFD_MATCHED_RULE_MPLS_TUNNEL_PHP 0x1        /* Match rule value used
                                                          by BFD Embedded App to
                                                          indicate MPLS PHP
                                                          tunnel type */

#define BCM_FIELD_PRESEL_INIT(presel_set)  \
    sal_memset(&(presel_set), 0, sizeof(bcm_field_presel_set_t)) 

#define BCM_FIELD_PRESEL_ADD(presel_set, presel_id)  SHR_BITSET(((presel_set).w), (presel_id)) 

#define BCM_FIELD_PRESEL_REMOVE(presel_set, presel_id)  SHR_BITCLR(((presel_set).w), (presel_id)) 

#define BCM_FIELD_PRESEL_TEST(presel_set, presel_id)  SHR_BITGET(((presel_set).w), (presel_id)) 

#define BCM_FIELD_ACTION_WIDTH_MAX  48         

#define BCM_FIELD_ASET_WIDTH_MAX    \
    ((BCM_FIELD_ACTION_WIDTH_MAX+1) * \
    bcmFieldActionCount + 1) 

/* Parameter flags for bcmFieldActionFabricQueue action. */
#define BCM_FABRIC_QUEUE_CUSTOMER       (1U << 29) /* Indicates the intended
                                                      application for the
                                                      SBX_QUEUE_TAG.0x0-Fabric
                                                      Interface Chip.0x1 Traffic
                                                      Manager. */
#define BCM_FABRIC_QUEUE_QOS_BASE       (1U << 30) /* Offset to base queue
                                                      number from the QUEUE_MAP
                                                      Table. Index into
                                                      QUEUE_MAP Table is
                                                      DST_MODID, DST_PID. */
#define BCM_FABRIC_QUEUE_DEST_OFFSET    (1U << 31) /*  Index into QUEUE_MAP
                                                      Table used for lookup. . */

/* Unit capabilities flags. */
#define BCM_FIELD_STAT_WIDE_MODE    (1 << 0)   /* Unit has wide-mode slices. */
#define BCM_FIELD_STAT_SLICE_EN     (1 << 1)   /* Enable/disable slice lookup. */
#define BCM_FIELD_STAT_COS_QUEUE    (1 << 2)   /* Unit has CoS Queue change
                                                  actions. */

/* information related to the field class. */
typedef struct bcm_field_class_info_s {
    bcm_field_action_t action;  /* field class action. */
    bcm_class_t class_id;       /* field class value. */
} bcm_field_class_info_t;

/* This API is deprecated and no longer supported. */
typedef struct bcm_field_status_s {
    int group_total;    /* Total possible number of groups in unit. */
    int group_free;     /* Unused groups in unit. */
    uint32 flags;       /* Unit capabilities flags. */
} bcm_field_status_t;

/* Field name. */
typedef struct bcm_field_presel_config_s {
    uint8 name[BCM_FIELD_MAX_NAME_LEN]; 
} bcm_field_presel_config_t;

/* 
 * Value for bcmFieldControlSharedVlanFieldSet.
 * 
 * When using shared VLAN feature, the shared VLAN ID can be used in
 * place of the packet's inner or outer vlan ID during packet
 * classification.
 */
#define BCM_FIELD_SHARED_VLAN_NONE  0          /* Do not use shared VLAN ID. */
#define BCM_FIELD_SHARED_VLAN_INNER 1          /* Use shared VLAN ID as inner
                                                  VLAN ID. */
#define BCM_FIELD_SHARED_VLAN_OUTER 2          /* Use shared VLAN ID as outer
                                                  VLAN ID. */

/* Field control elements. */
typedef enum bcm_field_control_e {
    bcmFieldControlStage = 0,           /* Select default Field Processor stage. */
    bcmFieldControlColorIndependent = 1, /* Default for color in/dependent. */
    bcmFieldControlUdfHigig0 = 2,       /* UDF_ID=7, has 1st word of HiGig
                                           Packet (deprecated). */
    bcmFieldControlUdfHigig1 = 3,       /* UDF_ID=6, has 2nd word of HiGig
                                           Packet (deprecated). */
    bcmFieldControlUdfHigig2 = 4,       /* UDF_ID=5, has 3rd word of HiGig
                                           Packet (deprecated). */
    bcmFieldControlSharedVlanFieldSet = 5, /* Shared VLAN ID as inner/outer VLAN.
                                           See BCM_FIELD_SHARED_VLAN_xxx. */
    bcmFieldControlRedirectIngressVlanCheck = 6, /* Enable ingress vlan membership check
                                           for FP redirected traffic. */
    bcmFieldControlRedirectNonUcastTrunkResolve = 7, /* Enable uniform distribution of
                                           non-unicast FP redirected traffic. */
    bcmFieldControlRedirectExcludeSrcPort = 8, /* Exclude source port/trunk from FP
                                           redirection  destination. */
    bcmFieldControlRedirectPortFloodBlock = 9, /* Enable port flood blocking policy for
                                           FP redirected traffic. */
    bcmFieldControlRedirectVlanFloodBlock = 10, /* Enable vlan flood blocking policy for
                                           FP redirected traffic. */
    bcmFieldControlArpAsIp = 11,        /* Treat ARP packets as Ip. */
    bcmFieldControlRarpAsIp = 12,       /* Treat RARP packets as Ip. */
    bcmFieldControlIntraDoubleEnable = 13, /* Enable/Disable INTRA slice groups. */
    bcmFieldControlExternalUdfEnable = 14, /* Enable/Disable External UDF support. */
    bcmFieldControlRedirectNonUcastEtherTrunkResolve = 15, /* Enable uniform distribution of
                                           non-unicast FP redirected traffic
                                           over Ethernet Ports. */
    bcmFieldControlRedirectNonUcastFabricTrunkResolve = 16, /* Enable uniform distribution of
                                           non-unicast FP redirected traffic
                                           over HiGig Ports. */
    bcmFieldControlStatSyncEnable = 17, /* Field stat get api will sync up with
                                           hardware before returning the stat
                                           value. */
    bcmFieldControlCascadedKeyWidth = 18, /* Default width of key cascaded between
                                           groups */
    bcmFieldControlPolicerGroupSharingEnable = 19, /* Enable/Disable sharing of policer by
                                           field groups. */
    bcmFieldControlRedirectNextHopExcludeSrcPort = 20, /* Enable removal of system ingress port
                                           from port-bitmap for packets that
                                           have been Redirected to a Next-hop
                                           index by the IFP. */
    bcmFieldControlIngressLogicalPolicerPoolsMode = 21, /* Configure Logical Policer pool mode.
                                           It can be set only if the policers
                                           are not existing. */
    bcmFieldControlEcmpHashOffset = 22, /* Configure offset for every ECMP hash
                                           key. */
    bcmFieldControlEcmpHashUseCrc = 23, /* If set, then use CRC32 hash, else use
                                           XOR function. */
    bcmFieldControlEcmpHashUseUpper5Bits = 24, /* If set, uses upper-most 5 bits of
                                           hash result, else uses least
                                           significant 5-bits of hash result. */
    bcmFieldControlEcmpHashEnable = 25, /* If set, then enable the use of the
                                           ECMP_HASH_SEL field from the Field
                                           Processor. */
    bcmFieldControlOverrideStageLookupPhb = 26, /* If set, internal priority assigned by
                                           L2/L3/DSCP lookups overrides internal
                                           priority assigned by VFP */
    bcmFieldControlRedirectExcludeEtherSrcPort = 27, /* Exclude the ingress front panel port
                                           from FP redirection destination. */
    bcmFieldControlRedirectExcludeHiGigSrcPort = 28, /* Exclude the ingress higig port from
                                           FP redirection destination. */
    bcmFieldControlReplacementTtl = 29, /* To program the TTL value to be used
                                           by bcmFieldActionReplaceTtl */
    bcmFieldControlLargeDirectLuKeyLength = 30, /* Field processor large direct lookup
                                           key length. valid values are 14,15,16
                                           or 17. */
    bcmFieldControlKeyGenVar = 31,      /* Value for KeyGenVar */
    bcmFieldControlEgressAutoExpandWithPolicer = 32, /* Enable or disable auto expansion with
                                           policers in case of non-shared meter
                                           pool of Egress stage. */
    bcmFieldControlDlbMonitorIngressRandomSeed = 33, /* Set RNG seed for DLB flow monitoring
                                           for IFP. This RNG seed overwrites the
                                           RNG seed set by the switch control
                                           bcmSwitchDlbMonitorIngressRandomSeed.
                                           This seed is used by the device for
                                           the flow which matches IFP entries
                                           with action
                                           bcmFieldActionDlbEcmpMonitorEnable. */
    bcmFieldControlGbpSrcMacMcastBitSet = 34, /* This Field control converts packet?s
                                           Source mac to Multicast when IFP
                                           action
                                           bcmFieldActionGbpSrcMacMcastBitSet is
                                           applied on the matched packet. */
    bcmFieldControlCount = 35           /* Always last. Not a usable value. */
} bcm_field_control_t;

#define BCM_FIELD_CONTROL_STRINGS \
{ \
    "Stage", \
    "ColorIndependent", \
    "UdfHigig0", \
    "UdfHigig1", \
    "UdfHigig2", \
    "SharedVlanFieldSet", \
    "RedirectIngressVlanCheck", \
    "RedirectNonUcastTrunkResolve", \
    "RedirectExcludeSrcPort", \
    "RedirectPortFloodBlock", \
    "RedirectVlanFloodBlock", \
    "ArpAsIp", \
    "RarpAsIp", \
    "IntraDoubleEnable", \
    "ExternalUdfEnable", \
    "RedirectNonUcastEtherTrunkResolve", \
    "RedirectNonUcastFabricTrunkResolve", \
    "StatSyncEnable", \
    "CascadedKeyWidth", \
    "PolicerGroupSharingEnable", \
    "RedirectNextHopExcludeSrcPort", \
    "IngressLogicalPolicerPoolsMode", \
    "EcmpHashOffset", \
    "EcmpHashUseCrc", \
    "EcmpHashUseUpper5Bits", \
    "EcmpHashEnable", \
    "OverrideStageLookupPhb", \
    "RedirectExcludeEtherSrcPort", \
    "RedirectExcludeHiGigSrcPort", \
    "ReplacementTtl", \
    "LargeDirectLuKeyLength", \
    "KeyGenVar", \
    "EgressAutoExpandWithPolicer", \
    "DlbMonitorIngressRandomSeed", \
    "GbpSrcMacMcastBitSet"  \
}

/* Field Group Status structure. */
typedef struct bcm_field_group_status_s {
    int prio_min;       /* Minimum priority within group. */
    int prio_max;       /* Maximum priority within group. */
    int entries_total;  /* Total possible entries in group. */
    int entries_free;   /* Unused entries in slice. */
    int counters_total; /* Total possible counters in slice. */
    int counters_free;  /* Unused counters in slice. */
    int meters_total;   /* Total meters in slice. */
    int meters_free;    /* Unused meters in slice. */
    int entry_count;    /* Number of entries in the group. */
    int counter_count;  /* Number of counters attached to group entries. */
    int meter_count;    /* Number of meters attached to group entries. */
} bcm_field_group_status_t;

/* Group Modes (single, double or triple wide). */
typedef enum bcm_field_group_mode_e {
    bcmFieldGroupModeSingle = 0,        /* Single-wide group. */
    bcmFieldGroupModeDouble = 1,        /* Double-wide group. */
    bcmFieldGroupModeTriple = 2,        /* Triple-wide group. */
    bcmFieldGroupModeQuad = 3,          /* Quad-wide group. */
    bcmFieldGroupModeAuto = 4,          /* Auto-expand group based on Qset
                                           (default). */
    bcmFieldGroupModeDirect = 5,        /* Direct group (no TCAM lookup). */
    bcmFieldGroupModeDirectExtraction = 6, /* Direct extraction (instead of TCAM)
                                           group. */
    bcmFieldGroupModeHashing = 7,       /* Hash function group - no entries are
                                           expected. */
    bcmFieldGroupModeExactMatch = 8,    /* Exact match group - partial masking
                                           is not supported. */
    bcmFieldGroupModeIntraSliceDouble = 9, /* Intraslice double wide group. */
    bcmFieldGroupModeCount = 10         /* Always last. Not a usable value. */
} bcm_field_group_mode_t;

#define BCM_FIELD_GROUP_MODE_STRINGS \
{ \
    "Single", \
    "Double", \
    "Triple", \
    "Quad", \
    "Auto", \
    "Direct", \
    "DirectExtraction", \
    "Hashing", \
    "ExactMatch", \
    "IntraSliceDouble"  \
}

/* 
 * Ingress Policer Pool Modes (8x1024default, 16x512Contiguous,
 * 16x512Split).
 */
typedef enum bcm_field_ingress_policer_pools_e {
    bcmFieldIngressLogicalPolicerPools8x1024, /* 8 Meter pools with 1024 entries in
                                           each pool (Default Configuration). */
    bcmFieldIngressLogicalPolicerPools16x512Contiguous, /* 16 Meter pools with 512 entries in
                                           each pool in Contiguous mode. */
    bcmFieldIngressLogicalPolicerPools16x512Split, /* 16 Meter pools with 512 entries in
                                           each pool in Split mode. */
    bcmFieldIngressPolicerPoolsCount    /* Always last. Not a usable value. */
} bcm_field_ingress_policer_pools_t;

#define BCM_FIELD_INGRESS_POLICER_POOL_MODE_STRINGS \
{ \
    "bcmFieldIngressLogicalPolicerPools8x1024", \
    "bcmFieldIngressLogicalPolicerPools16x512Contiguous", \
    "bcmFieldIngressLogicalPolicerPools16x512Split"  \
}

#define bcmFieldGroupModeDefault    bcmFieldGroupModeAuto 

#define BCM_FIELD_GROUP_MODE_WIDTH_MAX  24         

/* Parameter for bcmFieldActionEgressClassSelect */
#define BCM_FIELD_EGRESS_CLASS_SELECT_PORT  0          
#define BCM_FIELD_EGRESS_CLASS_SELECT_SVP   1          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L3_IIF 2          
#define BCM_FIELD_EGRESS_CLASS_SELECT_FIELD_SRC 3          
#define BCM_FIELD_EGRESS_CLASS_SELECT_FIELD_DST 4          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L2_SRC 5          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L2_DST 6          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L3_SRC 7          
#define BCM_FIELD_EGRESS_CLASS_SELECT_L3_DST 8          
#define BCM_FIELD_EGRESS_CLASS_SELECT_VLAN  9          
#define BCM_FIELD_EGRESS_CLASS_SELECT_VRF   10         
#define BCM_FIELD_EGRESS_CLASS_SELECT_NEW   11         

/* Parameter for bcmFieldActionHiGigClassSelect */
#define BCM_FIELD_HIGIG_CLASS_SELECT_EGRESS 0          
#define BCM_FIELD_HIGIG_CLASS_SELECT_EGR_DVP 1          
#define BCM_FIELD_HIGIG_CLASS_SELECT_EGR_L3_INTERFACE 2          
#define BCM_FIELD_HIGIG_CLASS_SELECT_EGR_NEXT_HOP 3          
#define BCM_FIELD_HIGIG_CLASS_SELECT_PORT   4          

/* parameter for bcmFieldActionOamDmTimeFormat */
#define BCM_FIELD_OAM_DM_TIME_FORMAT_IEEE1588 0          
#define BCM_FIELD_OAM_DM_TIME_FORMAT_NTP    1          

/* Parameter for bcmFieldActionOamTagStatusCheck */
#define BCM_FIELD_OAM_TAG_STATUS_OUTER_MASK (1 << 0)   
#define BCM_FIELD_OAM_TAG_STATUS_INNER_MASK (1 << 1)   
#define BCM_FIELD_OAM_TAG_STATUS_INNER_L2_OUTER_MASK (1 << 2)   
#define BCM_FIELD_OAM_TAG_STATUS_INNER_L2_INNER_MASK (1 << 3)   

/* Parameter for bcmFieldActionOamTunnelControl */
#define BCM_FIELD_OAM_TUNNEL_CONTROL_ANY    0          
#define BCM_FIELD_OAM_TUNNEL_CONTROL_NOT_TUNNELDED 1          

/* Parameter for qualifier bcmFieldQualifyOamEgressMulticastMacHit */
#define BCM_FIELD_OAM_MUTLICAST_MAC_NO_HIT  0x1        /* Destination MAC
                                                          address not in OAM
                                                          Multicast MAC CLASS1
                                                          or CLASS 2 Address
                                                          Range */
#define BCM_FIELD_OAM_MUTLICAST_MAC_CLASS1_HIT 0x2        /* Destination MAC
                                                          address in OAM
                                                          Multicast MAC CLASS1
                                                          Address Range
                                                          01-80-C2-00-00-30 to
                                                          01-80-C2-00-00-37 */
#define BCM_FIELD_OAM_MUTLICAST_MAC_CLASS2_HIT 0x3        /* Destination MAC
                                                          address in OAM
                                                          Multicast MAC CLASS2
                                                          Address Range
                                                          01-80-C2-00-00-38 to
                                                          01-80-C2-00-00-3f */

/* Group config create API optional flags. */
#define BCM_FIELD_GROUP_CREATE_WITH_ID      (1 << 0)   
#define BCM_FIELD_GROUP_CREATE_WITH_PORT    (1 << 1)   
#define BCM_FIELD_GROUP_CREATE_WITH_MODE    (1 << 2)   
#define BCM_FIELD_GROUP_CREATE_SMALL        (1 << 3)   
#define BCM_FIELD_GROUP_CREATE_LARGE        (1 << 4)   
#define BCM_FIELD_GROUP_CREATE_WITH_ASET    (1 << 5)   
#define BCM_FIELD_GROUP_CREATE_WITH_PRESELSET (1 << 6)   
#define BCM_FIELD_GROUP_CREATE_INSERTION_ORDER_LOOSE (1 << 7)   /* If set, do not apply
                                                          the rule where TCAM
                                                          entries with identical
                                                          priorities are ordered
                                                          in the TCAM according
                                                          to their insertion
                                                          order */
#define BCM_FIELD_GROUP_CREATE_IS_EQUAL     (1 << 8)   /* If set, the is-equal
                                                          result of this Field
                                                          group key and the
                                                          Field group
                                                          'group_ref' is set in
                                                          the
                                                          bcmFieldQualifyIsEqualValue
                                                          qualifier */
#define BCM_FIELD_GROUP_CREATE_SPARSE_ENTRY_PRIORITIES (1 << 9)   /* If set, the TCAM
                                                          shuffle algorithm
                                                          assumes only sparse
                                                          priorities assigned to
                                                          the Field group
                                                          entries */
#define BCM_FIELD_GROUP_CREATE_SINGLE       (1 << 10)  /* If set, use single
                                                          resource for field
                                                          group */
#define BCM_FIELD_GROUP_CREATE_IS_CASCADED  (1 << 11)  /* If set, the cascaded
                                                          action value of this
                                                          Field group is set in
                                                          the
                                                          bcmFieldQualifyCascadedKeyValue
                                                          qualifier of the Field
                                                          group 'group_ref'. */
#define BCM_FIELD_GROUP_CREATE_HANDLE_ENTRIES_BY_KEY (1 << 12)  /* If set,  entries in
                                                          this group is handled
                                                          by key and not by ID.
                                                          entries with identical
                                                          key cannot be added.
                                                          getting and deleting
                                                          entries should be
                                                          according to the key'. */
#define BCM_FIELD_GROUP_CREATE_WITH_CYCLE   (1 << 13)  /* If set, use created
                                                          cycle value for field
                                                          group */
#define BCM_FIELD_GROUP_CREATE_WITH_PROGRAMS (1 << 14)  /* Create field group
                                                          attached with specific
                                                          program(s). */
#define BCM_FIELD_GROUP_CREATE_WITH_CE_ID   (1 << 15)  /* Create field group
                                                          with user provided ce
                                                          id(s). */
#define BCM_FIELD_GROUP_CREATE_WITH_MW_SUPPORT (1 << 16)  /* Create field group
                                                          with multiwide
                                                          support. The allocated
                                                          slice for this group
                                                          can spam multiwide
                                                          modes. */
#define BCM_FIELD_GROUP_CREATE_WITH_PRESEL_GROUP (1 << 17)  /* Create field group
                                                          with preselector
                                                          group. */
#define BCM_FIELD_GROUP_CREATE_WITH_COMPRESSION (1 << 18)  /* Create field group
                                                          with compression
                                                          support. This triggers
                                                          to compress the
                                                          srcIp(6) and dstIp(6)
                                                          qualifiers available
                                                          in the group's QSET */

#define BCM_FIELD_PRESEL_SEL_MAX    1024       /* Maximum Preselection entries
                                                  supported. */

/* Bitmap of all possible preselection specification IDs. */
typedef struct bcm_field_presel_set_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(BCM_FIELD_PRESEL_SEL_MAX)]; 
} bcm_field_presel_set_t;

#define BCM_FIELD_PRESEL_ENTRY_SET(_eid_, _presel_id_)  (_eid_ = _presel_id_ | BCM_FIELD_QUALIFY_PRESEL) /* Build Preselector Entry ID for
                                                  the given preselector ID. */

/* Identifier for bcm_field_hint_t structure */
typedef uint32 bcm_field_hintid_t;

/*  Default Action resolution ID for groups. */
#define BCM_FIELD_GROUP_ACTION_RES_ID_DEFAULT -1         /* Group default action
                                                          resolution id value */

/* Group Cycle value. */
typedef enum bcm_field_group_cycle_e {
    bcmFieldGroupCycle0 = 0,    /* Create Field Group in Cycle 0. */
    bcmFieldGroupCycle1 = 1,    /* Create Field Group in Cycle 1. */
    bcmFieldGroupCycleCount = 2 /* Always last. Not a usable value. */
} bcm_field_group_cycle_t;

#define BCM_FIELD_GROUP_CYCLE_STRINGS \
{ \
    "Cycle0", \
    "Cycle1"  \
}

/* PMF Program ID. */
typedef uint32 bcm_field_context_t;

/* Maximum number of presels per FG. */
#define BCM_FIELD_NOF_PRESEL_PER_FG 32         /* Maximum number of presels per
                                                  fg */

/* Maximum number of qualifiers per FG . */
#define BCM_FIELD_NOF_QUALS_PER_FG  32         /* Maximum number of quals per fg */

/* Maximum number of ce id per qualifier . */
#define BCM_FIELD_NOF_CE_ID_PER_QUAL    8          /* Maximum number of ce ids
                                                      per qualifier */

/* Description of a qualifier ce information. */
typedef struct bcm_field_qual_ce_info_s {
    bcm_field_qualify_t qual;           /* Qualifier for which the ce info is
                                           provided */
    int nof_ce_ids;                     /* Number of ce ids for the given
                                           qualifeir */
    int ce_id[BCM_FIELD_NOF_CE_ID_PER_QUAL]; /* ce ids for the given qualifier */
    int key_index[BCM_FIELD_NOF_CE_ID_PER_QUAL]; /* key_index for the given ce ids. In
                                           case the key is double key and the
                                           ce_id is located in the second key -
                                           this index should be set to 1 */
} bcm_field_qual_ce_info_t;

/* Opaque handle to a field presel. */
typedef int bcm_field_presel_t;

/* Description of a group hw information. */
typedef struct bcm_field_group_presel_info_s {
    bcm_field_presel_t presel_id;       /* Presel Id for the given group hw info */
    int nof_qual_info;                  /* Number of qualifiers in the hw info */
    bcm_field_qual_ce_info_t qual_info[BCM_FIELD_NOF_QUALS_PER_FG]; /* Hw info for the given qualifier */
} bcm_field_group_presel_info_t;

/* Opaque handle to a field presel group ID. */
typedef int bcm_field_presel_group_t;

/* 
 * Group configuration structure. Used to create a field group with
 * specific attributes.
 */
typedef struct bcm_field_group_config_s {
    uint32 flags;                       /* Group create flags
                                           BCM_FIELD_GROUP_CREATE_XXX. */
    bcm_field_qset_t qset;              /* Group qualifier set. */
    int priority;                       /* Group priority. */
    bcm_field_group_mode_t mode;        /* Group mode. */
    bcm_pbmp_t ports;                   /* Group member ports. */
    bcm_field_group_t group;            /* Group. */
    bcm_field_aset_t aset;              /* Group action set */
    bcm_field_presel_set_t preselset;   /* Group preselector set */
    bcm_field_presel_set_t group_ref;   /* Reference Field group for operation
                                           set by the Flag. */
    int max_entry_priorities;           /* Number of entries priorities in the
                                           group. 0 means unlimited. */
    bcm_field_hintid_t hintid;          /* Hints for Group Creation. */
    int action_res_id;                  /* Action resolution id for Group. */
    uint8 name[BCM_FIELD_MAX_NAME_LEN]; /* Name for Group. */
    bcm_field_group_cycle_t cycle;      /* Create Field Group Cycle. */
    uint32 pgm_bmp;                     /* Bitmap of program-ids which the
                                           current field group will be pointing
                                           to. */
    uint32 share_id;                    /* Group share ID. Groups created with
                                           same share ID may share TCAM banks. */
    bcm_field_presel_group_t presel_group; /* Presel Group ID. */
} bcm_field_group_config_t;

/* Used to create a field group with specific attributes. */
typedef struct bcm_field_group_config_extension_s {
    uint32 flags;                       /* Group create flags
                                           BCM_FIELD_GROUP_CREATE_XXX. */
    bcm_field_qset_t qset;              /* Group qualifier set. */
    int priority;                       /* Group priority. */
    bcm_field_group_mode_t mode;        /* Group mode. */
    bcm_pbmp_t ports;                   /* Group member ports. */
    bcm_field_group_t group;            /* Group. */
    bcm_field_aset_t aset;              /* Group action set */
    bcm_field_presel_set_t preselset;   /* Group preselector set */
    bcm_field_presel_set_t group_ref;   /* Reference Field group for operation
                                           set by the Flag. */
    int max_entry_priorities;           /* Number of entries priorities in the
                                           group. 0 means unlimited. */
    bcm_field_hintid_t hintid;          /* Hints for Group Creation. */
    int action_res_id;                  /* Action resolution id for Group. */
    uint8 name[BCM_FIELD_MAX_NAME_LEN]; /* Name for Group. */
    bcm_field_group_cycle_t cycle;      /* Create Field Group Cycle. */
    uint32 pgm_bmp;                     /* Bitmap of program-ids which the
                                           current field group will be pointing
                                           to. */
    uint32 share_id;                    /* Group share ID. Groups created with
                                           same share ID may share TCAM banks. */
    uint32 nof_presel_info;             /* Number of presel_info elements. */
    bcm_field_group_presel_info_t *presel_info; /* Per preselector data. */
} bcm_field_group_config_extension_t;

/* Description of a single extraction point. */
typedef struct bcm_field_extraction_field_s {
    uint32 flags;                   /* Flags for this extraction point */
    bcm_field_qualify_t qualifier;  /* BCM field qualifier ID (or
                                       bcmFieldQualifyCount is using constant
                                       value) */
    int lsb;                        /* Least significant bit to be extracted
                                       from qualifier */
    int bits;                       /* Number of bits to use, valid for both
                                       qualifier extraction and constant */
    int value;                      /* Constant value (if qualifier is
                                       bcmFieldQualifyCount) */
} bcm_field_extraction_field_t;

/* 
 * A single action, composed of possibly several extraction fields, for
 * an entry in a direct extraction group.
 */
typedef struct bcm_field_extraction_action_s {
    bcm_field_action_t action;  /* BCM field action ID of the action to be built
                                   by extraction */
    int bias;                   /* Bias value added to the final extracted value
                                   before using it as an argument to the action */
} bcm_field_extraction_action_t;

/* core specific paramters for a field group entry */
typedef struct bcm_field_action_core_config_s {
    uint32 flags;   /* flags for core specific action */
    int param0;     /* action core-specific paramter No.0 */
    int param1;     /* action core-specific paramter No.1 */
    int param2;     /* action core-specific paramter No.2 */
    int param3;     /* action core-specific paramter No.3 */
} bcm_field_action_core_config_t;

/* core specific paramters for a field group entry */
typedef struct bcm_field_flowtrackercheck_s {
    bcm_flowtracker_check_t flow_check_id; /* Flowtracker check ID */
    uint32 value;                       /* Value for flowtracker check ID */
} bcm_field_flowtrackercheck_t;

#define BCM_ILLEGAL_ACTION_PARAMETER    (-1)       /* Indicates meaningless
                                                      paramX on
                                                      bcm_field_action_core_config_t */

/* Field Qualifier Arp Opcode (for bcm_field_qualify_ArpOpcode). */
typedef enum bcm_field_ArpOpcode_e {
    bcmFieldArpOpcodeRequest = 0,   /* Request opcode. */
    bcmFieldArpOpcodeReply = 1,     /* Reply opcode. */
    bcmFieldArpOpcodeCount = 2      /* Always last; not a usable value. */
} bcm_field_ArpOpcode_t;

#define BCM_FIELD_FARPOPCODE_STRINGS \
{ \
    "Request", \
    "Reply"  \
}

/* 
 * Bitmap for the various options on 'flags' on
 * bcm_field_action_width_set() or bcm_field_action_width_get()
 */
typedef enum bcm_field_action_width_flags_e {
    bcm_default_action_width = 0    /* When this bit is set then ignore 'width'
                                       and set action runtime width to its
                                       default value. */
} bcm_field_action_width_flags_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Initialize field software subsystem */
extern int bcm_field_init(
    int unit);

/* De-initialize field software subsystem */
extern int bcm_field_detach(
    int unit);

/* Set or get a field control value. */
extern int bcm_field_control_get(
    int unit, 
    bcm_field_control_t control, 
    uint32 *state);

/* Set or get a field control value. */
extern int bcm_field_control_set(
    int unit, 
    bcm_field_control_t control, 
    uint32 state);

/* The API returns the number of slices in the given stage. */
extern int bcm_field_stage_slice_count_get(
    int unit, 
    bcm_field_stage_t stage_id, 
    int *slice_count);

/* 
 * The API returns the details of the stage and entries count of the
 * given slice for the given port bitmap. If the field stage is operating
 * in global mode, the 'pbmp' input variable to the function will be
 * ignored and returns the slice information for the global instance and
 * if the stage is operating in pipe local mode, the function expects the
 * valid PBMP input for the respective pipe instance and it returns slice
 * information for the pipe instance.
 */
extern int bcm_field_stage_slice_info_get(
    int unit, 
    bcm_field_stage_t stage_id, 
    bcm_pbmp_t pbmp, 
    int slice_no, 
    bcm_field_stage_slice_info_t *slice_info);

/* List the qualifiers supported for a given stage */
extern int bcm_field_stage_qset_get(
    int unit, 
    bcm_field_stage_t stage, 
    uint8 presel, 
    bcm_field_qset_t *qset);

#endif /* BCM_HIDE_DISPATCHABLE */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a field group */
extern int bcm_field_group_create(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_t *group);

/* Create a field group */
extern int bcm_field_group_create_id(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_t group);

/* Enable or Disable auto expansion of entries for a group. */
extern int bcm_field_group_expansion_enable_set(
    int unit, 
    bcm_field_group_t group, 
    int enable);

/* Get auto expansion status of a group */
extern int bcm_field_group_expansion_enable_get(
    int unit, 
    bcm_field_group_t group, 
    int *enable);

/* Create a field group */
extern int bcm_field_group_create_mode(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

/* Create a field group */
extern int bcm_field_group_create_mode_id(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Create a field group */
extern int bcm_field_group_port_create_mode(
    int unit, 
    bcm_port_t port, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

/* Create a field group */
extern int bcm_field_group_port_create_mode_id(
    int unit, 
    bcm_port_t port, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Create a field group */
extern int bcm_field_group_ports_create_mode(
    int unit, 
    bcm_pbmp_t pbmp, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

/* Create a field group */
extern int bcm_field_group_ports_create_mode_id(
    int unit, 
    bcm_pbmp_t pbmp, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Get the mode of a group. */
extern int bcm_field_group_mode_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_group_mode_t *mode);

/* Create a field group with specific attributes. */
extern int bcm_field_group_config_create(
    int unit, 
    bcm_field_group_config_t *group_config);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize the Field Group Config structure. */
extern void bcm_field_group_config_t_init(
    bcm_field_group_config_t *group_config);

/* FP group traverse callback function */
typedef int (*bcm_field_group_traverse_cb)(
    int unit, 
    bcm_field_group_t group, 
    void *user_data);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Traverse all the fp groups on the device, calling a specified callback
 * for each valid group.
 */
extern int bcm_field_group_traverse(
    int unit, 
    bcm_field_group_traverse_cb callback, 
    void *user_data);

/* Change or retrieve the qualifiers for a field group. */
extern int bcm_field_group_set(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_qset_t qset);

/* Change or retrieve the qualifiers for a field group. */
extern int bcm_field_group_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_qset_t *qset);

/* Change or retrieve the actions for a field group. */
extern int bcm_field_group_action_set(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_aset_t aset);

/* Change or retrieve the actions for a field group. */
extern int bcm_field_group_action_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_aset_t *aset);

/* Deallocates a field group. */
extern int bcm_field_group_destroy(
    int unit, 
    bcm_field_group_t group);

/* Compress field group entries. */
extern int bcm_field_group_compress(
    int unit, 
    bcm_field_group_t group);

/* Set or Clear provided entry as default for group. */
extern int bcm_field_group_default_entry_set(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_entry_t entry, 
    int enable);

/* Get default entry id associated to a group. */
extern int bcm_field_group_default_entry_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_entry_t *entry);

/* Assign relative priority to a group. */
extern int bcm_field_group_priority_set(
    int unit, 
    bcm_field_group_t group, 
    int priority);

/* Extract priority for a group. */
extern int bcm_field_group_priority_get(
    int unit, 
    bcm_field_group_t group, 
    int *priority);

/* Retrieve status of a specified field group */
extern int bcm_field_group_status_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_group_status_t *status);

/* Get or set the group enable state. */
extern int bcm_field_group_enable_set(
    int unit, 
    bcm_field_group_t group, 
    int enable);

/* Get or set the group enable state. */
extern int bcm_field_group_enable_get(
    int unit, 
    bcm_field_group_t group, 
    int *enable);

/* Allocate a range checker with specified configuration */
extern int bcm_field_range_create(
    int unit, 
    bcm_field_range_t *range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max);

/* Install all entries of a field group into the hardware tables. */
extern int bcm_field_group_install(
    int unit, 
    bcm_field_group_t group);

/* Remove all entries of a field group from the hardware table. */
extern int bcm_field_group_remove(
    int unit, 
    bcm_field_group_t group);

/* Allocate a range checker with specified configuration */
extern int bcm_field_range_create_id(
    int unit, 
    bcm_field_range_t range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max);

/* Retrieve parameters associated with an existing range checker */
extern int bcm_field_range_get(
    int unit, 
    bcm_field_range_t range, 
    uint32 *flags, 
    bcm_l4_port_t *min, 
    bcm_l4_port_t *max);

/* Destroy a virtual range checker */
extern int bcm_field_range_destroy(
    int unit, 
    bcm_field_range_t range);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize the bcm_field_data_qualifier_s structure. */
extern void bcm_field_data_qualifier_t_init(
    bcm_field_data_qualifier_t *data_qual);

/* Initialize the bcm_field_data_ethertype_s structure. */
extern void bcm_field_data_ethertype_t_init(
    bcm_field_data_ethertype_t *etype);

/* Initialize the bcm_field_data_ip_protocol_s structure. */
extern void bcm_field_data_ip_protocol_t_init(
    bcm_field_data_ip_protocol_t *ip_protocol);

/* Initialize the bcm_field_data_packet_format_s structure. */
extern void bcm_field_data_packet_format_t_init(
    bcm_field_data_packet_format_t *packet_format);

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a data/offset-based qualifier. */
extern int bcm_field_data_qualifier_create(
    int unit, 
    bcm_field_data_qualifier_t *data_qualifier);

/* Return an array of IDs of defined data qualifiers. */
extern int bcm_field_data_qualifier_multi_get(
    int unit, 
    int qual_size, 
    int *qual_array, 
    int *qual_count);

/* Return the configuration of the given data qualifier. */
extern int bcm_field_data_qualifier_get(
    int unit, 
    int qual_id, 
    bcm_field_data_qualifier_t *qual);

/* Destroy a data/offset-based qualifier. */
extern int bcm_field_data_qualifier_destroy(
    int unit, 
    int qual_id);

/* Destroy all data/offset-based qualifiers. */
extern int bcm_field_data_qualifier_destroy_all(
    int unit);

/* Add EtherType-based offset to data qualifier object. */
extern int bcm_field_data_qualifier_ethertype_add(
    int unit, 
    int qual_id, 
    bcm_field_data_ethertype_t *etype);

/* Remove EtherType-based offset from  data qualifier object. */
extern int bcm_field_data_qualifier_ethertype_delete(
    int unit, 
    int qual_id, 
    bcm_field_data_ethertype_t *etype);

/* Add IP protocol-based offset to data qualifier object. */
extern int bcm_field_data_qualifier_ip_protocol_add(
    int unit, 
    int qual_id, 
    bcm_field_data_ip_protocol_t *ip_protocol);

/* Remove IP protocol based offset from data qualifier object. */
extern int bcm_field_data_qualifier_ip_protocol_delete(
    int unit, 
    int qual_id, 
    bcm_field_data_ip_protocol_t *ip_protocol);

/* Add packet format-based offset to data qualifier object. */
extern int bcm_field_data_qualifier_packet_format_add(
    int unit, 
    int qual_id, 
    bcm_field_data_packet_format_t *packet_format);

/* Delete packet format-based offset from data qualifier object. */
extern int bcm_field_data_qualifier_packet_format_delete(
    int unit, 
    int qual_id, 
    bcm_field_data_packet_format_t *packet_format);

/* 
 * Add data/offset qualifier to a group qualifiers set.
 * Use \ref bcm_field_qset_data_qualifier_add API to add data
 * qualifiers to the qset.
 */
extern int bcm_field_qset_data_qualifier_add(
    int unit, 
    bcm_field_qset_t *qset, 
    int qual_id);

/* 
 * Delete a data/offset qualifier from a group qualifiers set.
 * Use \ref bcm_field_qset_data_qualifier_delete API to delete data
 * qualifiers from the qset.
 */
extern int bcm_field_qset_data_qualifier_delete(
    int unit, 
    bcm_field_qset_t *qset, 
    int qual_id);

/* Get field data qualifiers included in a group qset. */
extern int bcm_field_qset_data_qualifier_get(
    int unit, 
    bcm_field_qset_t qset, 
    int qual_max, 
    int *qual_arr, 
    int *qual_count);

/* Create a blank field entry */
extern int bcm_field_entry_create(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_entry_t *entry);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_FIELD_DATA_QUALIFIER_SHIFT  14         

#define BCM_FIELD_DATA_QUALIFIER_SET(data_qual_id, qual_id)  (qual_id = (1 << BCM_FIELD_DATA_QUALIFIER_SHIFT) | data_qual_id) 

#ifndef BCM_HIDE_DISPATCHABLE

/* Create a blank field entry */
extern int bcm_field_entry_create_id(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_entry_t entry);

/* Get an array of entry IDs in use in a group */
extern int bcm_field_entry_multi_get(
    int unit, 
    bcm_field_group_t group, 
    int entry_size, 
    bcm_field_entry_t *entry_array, 
    int *entry_count);

/* Destroy a field entry */
extern int bcm_field_entry_destroy(
    int unit, 
    bcm_field_entry_t entry);

/* Destroy all field entries */
extern int bcm_field_entry_destroy_all(
    int unit);

/* 
 * Create a copy of an existing field entry and
 * control the entry copy using flags.
 */
extern int bcm_field_entry_config_copy(
    int unit, 
    bcm_field_entry_t src_entry, 
    bcm_field_entry_t *dst_entry, 
    uint32 flags);

/* Create a copy of an existing field entry */
extern int bcm_field_entry_copy(
    int unit, 
    bcm_field_entry_t src_entry, 
    bcm_field_entry_t *dst_entry);

/* Create a copy of an existing field entry */
extern int bcm_field_entry_copy_id(
    int unit, 
    bcm_field_entry_t src_entry, 
    bcm_field_entry_t dst_entry);

/* Install a field entry into the hardware tables */
extern int bcm_field_entry_install(
    int unit, 
    bcm_field_entry_t entry);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_FIELD_LARGE_DIRECT_ENTRY_ID_PACK(_entry_id, _group_id, _index)  \
        _SHR_FIELD_LARGE_DIRECT_ENTRY_ID_PACK(_entry_id, _group_id, _index)
 

#define BCM_FIELD_LARGE_DIRECT_ENTRY_ID_UNPACK(_entry_id, _group_id, _index)  \
        _SHR_FIELD_LARGE_DIRECT_ENTRY_ID_UNPACK(_entry_id, _group_id, _index)
 

#ifndef BCM_HIDE_DISPATCHABLE

/* Re-install a field entry into the hardware tables */
extern int bcm_field_entry_reinstall(
    int unit, 
    bcm_field_entry_t entry);

/* Remove a field entry from the hardware tables */
extern int bcm_field_entry_remove(
    int unit, 
    bcm_field_entry_t entry);

/* Enable/Disable an entry from the hardware table. */
extern int bcm_field_entry_enable_set(
    int unit, 
    bcm_field_entry_t entry, 
    int enable_flag);

/* Get the Enable or Disable status of a field Entry. */
extern int bcm_field_entry_enable_get(
    int unit, 
    bcm_field_entry_t entry, 
    int *enable_flag);

/* Attach a policer to a field entry. */
extern int bcm_field_entry_policer_attach(
    int unit, 
    bcm_field_entry_t entry_id, 
    int level, 
    bcm_policer_t policer_id);

/* 
 * Detach a policer from a field entry. When the API is called, the
 * policer is
 * marked as detached but it is not completely detached from the entry.
 * This is
 * because, the policer and meter entries are updated in the hardware
 * during
 * entry re-install. So, this API should always be followed by entry
 * remove or
 * entry re-install to completely detach the policer from the entry.
 */
extern int bcm_field_entry_policer_detach(
    int unit, 
    bcm_field_entry_t entry_id, 
    int level);

/* Detach all policers from a field entry. */
extern int bcm_field_entry_policer_detach_all(
    int unit, 
    bcm_field_entry_t entry_id);

/* Get the policer(s) attached to a field entry. */
extern int bcm_field_entry_policer_get(
    int unit, 
    bcm_field_entry_t entry_id, 
    int level, 
    bcm_policer_t *policer_id);

/* Get/Set the priority for an entry within a group. */
extern int bcm_field_entry_prio_get(
    int unit, 
    bcm_field_entry_t entry, 
    int *prio);

/* Get/Set the priority for an entry within a group. */
extern int bcm_field_entry_prio_set(
    int unit, 
    bcm_field_entry_t entry, 
    int prio);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_FIELD_ENTRY_LARGE_DIRECT_LOOKUP 0x10000000 /* OR with ID when
                                                          calling
                                                          bcm_field_entry_*
                                                          functions to indicate
                                                          large direct lookup
                                                          advanced application */

#define BCM_FIELD_ENTRY_KEEP_LOCATION   0x20000000 /* OR with ID when calling
                                                      bcm_field_entry_remove
                                                      functions to indicate TCAM
                                                      location of entry is kept
                                                      for
                                                      bcm_field_entry_install
                                                      function */

#define BCM_FIELD_SEL_NOT_IN_TABLE  0xfff0     

#define BCM_FIELD_QUALIFY_PRESEL    0x40000000 /* OR with ID when calling
                                                  bcm_field_qualify_* functions
                                                  to indicate ID is a
                                                  preselector instead of an
                                                  entry */

#define BCM_FIELD_QUALIFY_PRESEL_ADVANCED_MODE_STAGE_INGRESS 0x80001000 /* OR with ID when
                                                          calling
                                                          bcm_field_qualify_*
                                                          functions to indicate
                                                          ID is a preselector in
                                                          ingress stage instead
                                                          of an entry */

#define BCM_FIELD_QUALIFY_PRESEL_ADVANCED_MODE_STAGE_EGRESS 0x80002000 /* OR with ID when
                                                          calling
                                                          bcm_field_qualify_*
                                                          functions to indicate
                                                          ID is a preselector in
                                                          egress stage instead
                                                          of an entry */

#define BCM_FIELD_QUALIFY_PRESEL_ADVANCED_MODE_STAGE_HASH 0x80004000 /* OR with ID when
                                                          calling
                                                          bcm_field_qualify_*
                                                          functions to indicate
                                                          ID is a preselector in
                                                          hashing stage instead
                                                          of an entry */

#define BCM_FIELD_QUALIFY_PRESEL_ADVANCED_MODE_STAGE_EXTERNAL 0x80008000 /* OR with ID when
                                                          calling
                                                          bcm_field_qualify_*
                                                          functions to indicate
                                                          ID is a preselector in
                                                          external stage */

#define BCM_FIELD_QUALIFY_PRESEL_STAGGERED  0x41000000 /* OR with ID when
                                                          calling
                                                          bcm_field_qualify_*
                                                          functions to indicate
                                                          ID is a preselector in
                                                          staggered mode */

#define BCM_FIELD_PRESEL_STAGGERED  512        /* flag to indicate the prsele-id
                                                  is staggered and should be
                                                  configured in the second pass
                                                  program selection table */

#ifndef BCM_HIDE_DISPATCHABLE

/* Remove all qualifications from a field entry */
extern int bcm_field_qualify_clear(
    int unit, 
    bcm_field_entry_t entry);

/* Add data field that the packet must match to trigger qualifier */
extern int bcm_field_qualify_data(
    int unit, 
    bcm_field_entry_t eid, 
    int qual_id, 
    uint8 *data, 
    uint8 *mask, 
    uint16 length);

/* Remove match criteria from field entry. */
extern int bcm_field_qualifier_delete(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_qualify_t qual_id);

/* bcm_field_qualify_InPort */
extern int bcm_field_qualify_InPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t data, 
    bcm_port_t mask);

/* bcm_field_qualify_OutPort */
extern int bcm_field_qualify_OutPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t data, 
    bcm_port_t mask);

/* bcm_field_qualify_InPorts */
extern int bcm_field_qualify_InPorts(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t data, 
    bcm_pbmp_t mask);

/* bcm_field_qualify_Drop */
extern int bcm_field_qualify_Drop(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_SrcPort */
extern int bcm_field_qualify_SrcPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t data_modid, 
    bcm_module_t mask_modid, 
    bcm_port_t data_port, 
    bcm_port_t mask_port);

/* bcm_field_qualify_SrcTrunk */
extern int bcm_field_qualify_SrcTrunk(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t data, 
    bcm_trunk_t mask);

/* 
 * Set match criteria for bcmFieldQualifySrcTrunkMemberGport
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_SrcTrunkMemberGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t data);

/* bcm_field_qualify_DstPort */
extern int bcm_field_qualify_DstPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t data_modid, 
    bcm_module_t mask_modid, 
    bcm_port_t data_port, 
    bcm_port_t mask_port);

/* bcm_field_qualify_DstTrunk */
extern int bcm_field_qualify_DstTrunk(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t data, 
    bcm_trunk_t mask);

/* bcm_field_qualify_InnerL4SrcPort */
extern int bcm_field_qualify_InnerL4SrcPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_InnerL4DstPort */
extern int bcm_field_qualify_InnerL4DstPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_L4SrcPort */
extern int bcm_field_qualify_L4SrcPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_L4DstPort */
extern int bcm_field_qualify_L4DstPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_OuterVlan */
extern int bcm_field_qualify_OuterVlan(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Set match criteria for bcmFieldQualifyOuterVlanId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_OuterVlanId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Set match criteria for bcmFieldQualifyOuterVlanPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_OuterVlanPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Set match criteria for bcmFieldQualifyOuterVlanCfi
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_OuterVlanCfi(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerVlan */
extern int bcm_field_qualify_InnerVlan(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Set match criteria for bcmFieldQualifyInnerVlanId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_InnerVlanId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 *  Set match criteria for bcmFieldQualifyInnerVlanPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_InnerVlanPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Set match criteria for bcmFieldQualifyInnerVlanCfi
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_InnerVlanCfi(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_EtherType */
extern int bcm_field_qualify_EtherType(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* Add loopback field qualification to a field entry. */
extern int bcm_field_qualify_Loopback(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Add loopback type field qualification to a field entry. */
extern int bcm_field_qualify_LoopbackType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_LoopbackType_t loopback_type);

/* Add tunnel type field qualification to a field entry. */
extern int bcm_field_qualify_TunnelType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_TunnelType_t tunnel_type);

/* bcm_field_qualify_DstL3Egress */
extern int bcm_field_qualify_DstL3Egress(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t if_id);

/* bcm_field_qualify_DstMulticastGroup */
extern int bcm_field_qualify_DstMulticastGroup(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t group);

/* bcm_field_qualify_SrcMplsGport */
extern int bcm_field_qualify_SrcMplsGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mpls_port_id);

/* bcm_field_qualify_DstMplsGport */
extern int bcm_field_qualify_DstMplsGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mpls_port_id);

/* bcm_field_qualify_SrcMimGport */
extern int bcm_field_qualify_SrcMimGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mim_port_id);

/* bcm_field_qualify_DstMimGport */
extern int bcm_field_qualify_DstMimGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mim_port_id);

/* bcm_field_qualify_SrcWlanGport */
extern int bcm_field_qualify_SrcWlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t wlan_port_id);

/* bcm_field_qualify_DstWlanGport */
extern int bcm_field_qualify_DstWlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t wlan_port_id);

/* bcm_field_qualify_SrcVxlanGport */
extern int bcm_field_qualify_SrcVxlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vxlan_port_id);

/* bcm_field_qualify_DstVxlanGport */
extern int bcm_field_qualify_DstVxlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vxlan_port_id);

/* 
 * Set match criteria for bcmFieldQualifyIntPriority
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IntPriority(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Set match criteria for bcmFieldQualifyForwardingVlanId
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ForwardingVlanId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 * Get match criteria for bcmFieldQualifyForwardingVlanId
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardingVlanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* Match on VPN. */
extern int bcm_field_qualify_Vpn(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vpn_t data, 
    bcm_vpn_t mask);

/* To get qualified inputs on VPN. */
extern int bcm_field_qualify_Vpn_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vpn_t *data, 
    bcm_vpn_t *mask);

/* 
 * Set match criteria for bcmFieldQualifyColor
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_Color(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 color);

/* 
 * Set match criteria for bcmFieldQualifySrcModPortGport
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_SrcModPortGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t data);

/* 
 * Set match criteria for bcmFieldQualifySrcModuleGport
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_SrcModuleGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t data);

/* bcm_field_qualify_IpProtocol */
extern int bcm_field_qualify_IpProtocol(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpInfo */
extern int bcm_field_qualify_IpInfo(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_PacketRes */
extern int bcm_field_qualify_PacketRes(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcIp */
extern int bcm_field_qualify_SrcIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_DstIp */
extern int bcm_field_qualify_DstIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_DSCP */
extern int bcm_field_qualify_DSCP(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Tos */
extern int bcm_field_qualify_Tos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpFlags */
extern int bcm_field_qualify_IpFlags(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_TcpControl */
extern int bcm_field_qualify_TcpControl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Ttl */
extern int bcm_field_qualify_Ttl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_RangeCheck */
extern int bcm_field_qualify_RangeCheck(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_range_t range, 
    int invert);

/* bcm_field_qualify_SrcIp6 */
extern int bcm_field_qualify_SrcIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_DstIp6 */
extern int bcm_field_qualify_DstIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_SrcIp6High */
extern int bcm_field_qualify_SrcIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_DstIp6High */
extern int bcm_field_qualify_DstIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_DstIp6Low */
extern int bcm_field_qualify_DstIp6Low(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_SrcIp6Low */
extern int bcm_field_qualify_SrcIp6Low(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_Ip6NextHeader */
extern int bcm_field_qualify_Ip6NextHeader(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Ip6TrafficClass */
extern int bcm_field_qualify_Ip6TrafficClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Ip6FlowLabel */
extern int bcm_field_qualify_Ip6FlowLabel(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_Ip6HopLimit */
extern int bcm_field_qualify_Ip6HopLimit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_SrcMac */
extern int bcm_field_qualify_SrcMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* bcm_field_qualify_DstMac */
extern int bcm_field_qualify_DstMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* bcm_field_qualify_InnerIpType */
extern int bcm_field_qualify_InnerIpType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpType_t type);

/* bcm_field_qualify_ForwardingType */
extern int bcm_field_qualify_ForwardingType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_ForwardingType_t type);

/* bcm_field_qualify_IpType */
extern int bcm_field_qualify_IpType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpType_t type);

/* bcm_field_qualify_L2Format */
extern int bcm_field_qualify_L2Format(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_L2Format_t type);

/* bcm_field_qualify_VlanFormat */
extern int bcm_field_qualify_VlanFormat(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MHOpcode */
extern int bcm_field_qualify_MHOpcode(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Qualify on HiGig packets. */
extern int bcm_field_qualify_HiGig(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Qualify on HiGig destination packets. */
extern int bcm_field_qualify_DstHiGig(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Qualify on HiGig lookup packets. */
extern int bcm_field_qualify_HiGigProxy(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InterfaceClassPort */
extern int bcm_field_qualify_InterfaceClassPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_InterfaceClassL2 */
extern int bcm_field_qualify_InterfaceClassL2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_InterfaceClassL3 */
extern int bcm_field_qualify_InterfaceClassL3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcClassL2 */
extern int bcm_field_qualify_SrcClassL2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcClassL3 */
extern int bcm_field_qualify_SrcClassL3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcClassField */
extern int bcm_field_qualify_SrcClassField(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstClassL2 */
extern int bcm_field_qualify_DstClassL2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstClassL3 */
extern int bcm_field_qualify_DstClassL3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstClassField */
extern int bcm_field_qualify_DstClassField(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstMultipath */
extern int bcm_field_qualify_DstMultipath(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t mpintf);

/* bcm_field_qualify_DstMultipath_get */
extern int bcm_field_qualify_DstMultipath_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t *mpintf);

/* bcm_field_qualify_IpProtocolCommon */
extern int bcm_field_qualify_IpProtocolCommon(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpProtocolCommon_t protocol);

/* bcm_field_qualify_InnerIpProtocolCommon */
extern int bcm_field_qualify_InnerIpProtocolCommon(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpProtocolCommon_t protocol);

/* bcm_field_qualify_Snap */
extern int bcm_field_qualify_Snap(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_snap_header_t data, 
    bcm_field_snap_header_t mask);

/* bcm_field_qualify_Llc */
extern int bcm_field_qualify_Llc(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_llc_header_t data, 
    bcm_field_llc_header_t mask);

/* bcm_field_qualify_InnerTpid */
extern int bcm_field_qualify_InnerTpid(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 tpid);

/* bcm_field_qualify_OuterTpid */
extern int bcm_field_qualify_OuterTpid(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 tpid);

/* bcm_field_qualify_L3Routable */
extern int bcm_field_qualify_L3Routable(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpFrag */
extern int bcm_field_qualify_IpFrag(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t frag_info);

/* bcm_field_qualify_Vrf */
extern int bcm_field_qualify_Vrf(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_L3Ingress */
extern int bcm_field_qualify_L3Ingress(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 intf_id, 
    uint32 mask);

/* bcm_field_qualify_ExtensionHeaderType */
extern int bcm_field_qualify_ExtensionHeaderType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_ExtensionHeaderSubCode */
extern int bcm_field_qualify_ExtensionHeaderSubCode(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_ExtensionHeader2Type */
extern int bcm_field_qualify_ExtensionHeader2Type(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L4Ports */
extern int bcm_field_qualify_L4Ports(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MirrorCopy */
extern int bcm_field_qualify_MirrorCopy(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_TunnelTerminated */
extern int bcm_field_qualify_TunnelTerminated(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MplsTerminated */
extern int bcm_field_qualify_MplsTerminated(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerSrcIp */
extern int bcm_field_qualify_InnerSrcIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_InnerDstIp */
extern int bcm_field_qualify_InnerDstIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_InnerSrcIp6 */
extern int bcm_field_qualify_InnerSrcIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerDstIp6 */
extern int bcm_field_qualify_InnerDstIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerSrcIp6High */
extern int bcm_field_qualify_InnerSrcIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerDstIp6High */
extern int bcm_field_qualify_InnerDstIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerIp6HopLimit */
extern int bcm_field_qualify_InnerIp6HopLimit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerTtl */
extern int bcm_field_qualify_InnerTtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerTos */
extern int bcm_field_qualify_InnerTos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerDSCP */
extern int bcm_field_qualify_InnerDSCP(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerIpProtocol */
extern int bcm_field_qualify_InnerIpProtocol(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerIp6NextHeader */
extern int bcm_field_qualify_InnerIp6NextHeader(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerIpFrag */
extern int bcm_field_qualify_InnerIpFrag(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t frag_info);

/* bcm_field_qualify_DosAttack */
extern int bcm_field_qualify_DosAttack(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpmcStarGroupHit */
extern int bcm_field_qualify_IpmcStarGroupHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MyStationHit */
extern int bcm_field_qualify_MyStationHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Match on first eight bytes of L2 payload */
extern int bcm_field_qualify_L2PayloadFirstEightBytes(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data1, 
    uint32 data2, 
    uint32 mask1, 
    uint32 mask2);

/* bcm_field_qualify_L3DestRouteHit */
extern int bcm_field_qualify_L3DestRouteHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L3DestHostHit */
extern int bcm_field_qualify_L3DestHostHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L3SrcHostHit */
extern int bcm_field_qualify_L3SrcHostHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2CacheHit */
extern int bcm_field_qualify_L2CacheHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2StationMove */
extern int bcm_field_qualify_L2StationMove(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2DestHit */
extern int bcm_field_qualify_L2DestHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2SrcStatic */
extern int bcm_field_qualify_L2SrcStatic(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2SrcHit */
extern int bcm_field_qualify_L2SrcHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IngressStpState */
extern int bcm_field_qualify_IngressStpState(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_ForwardingVlanValid */
extern int bcm_field_qualify_ForwardingVlanValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_SrcVirtualPortValid */
extern int bcm_field_qualify_SrcVirtualPortValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Set match criteria for bcmFieldQualifyDstL3EgressNextHops
 *                 qualifier in the field entry.
 */
extern int bcm_field_qualify_DstL3EgressNextHops(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_VlanTranslationHit */
extern int bcm_field_qualify_VlanTranslationHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IcmpTypeCode */
extern int bcm_field_qualify_IcmpTypeCode(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Set match criteria for bcmFieldQualifyTranslatedVlanFormat
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_TranslatedVlanFormat(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Add Fibre Channel outer header type field qualification to a field
 * entry.
 */
extern int bcm_field_qualify_FibreChanOuter(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_FibreChan_t fibre_chan_type);

/* 
 * Add Fibre Channel inner header type field qualification to a field
 * entry.
 */
extern int bcm_field_qualify_FibreChanInner(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_FibreChan_t fibre_chan_type);

/* bcm_field_qualify_VnTag */
extern int bcm_field_qualify_VnTag(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_CnTag */
extern int bcm_field_qualify_CnTag(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_FabricQueueTag */
extern int bcm_field_qualify_FabricQueueTag(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyIntPriority
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IntPriority_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyColor
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Color_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *color);

/* 
 * Get match criteria for bcmFieldQualifySrcModPortGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcModPortGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *data);

/* 
 * Get match criteria for bcmFieldQualifySrcModuleGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcModuleGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *data);

/* Get loopback type field qualification from a field entry. */
extern int bcm_field_qualify_LoopbackType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_LoopbackType_t *loopback_type);

/* Get tunnel type field qualification from a field entry. */
extern int bcm_field_qualify_TunnelType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_TunnelType_t *tunnel_type);

/* 
 * Get match criteria for bcmFieldQualifyDstL3Egress
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstL3Egress_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t *if_id);

/* 
 * Get match criteria for bcmFieldQualifyDstMulticastGroup
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMulticastGroup_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t *group);

/* 
 * Get match criteria for bcmFieldQualifySrcMplsGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcMplsGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mpls_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstMplsGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMplsGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mpls_port_id);

/* 
 * Get match criteria for bcmFieldQualifySrcMimGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcMimGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mim_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstMimGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMimGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mim_port_id);

/* 
 * Get match criteria for bcmFieldQualifySrcWlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcWlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *wlan_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstWlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstWlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *wlan_port_id);

/* 
 * Get match criteria for bcmFieldQualifySrcVxlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcVxlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vxlan_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstVxlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstVxlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vxlan_port_id);

/* Get loopback field qualification from  a field entry. */
extern int bcm_field_qualify_Loopback_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t *data, 
    bcm_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyOutPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_OutPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t *data, 
    bcm_port_t *mask);

/* Get InPorts qualification match criteria from a field entry */
extern int bcm_field_qualify_InPorts_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t *data, 
    bcm_pbmp_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDrop
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Drop_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t *data_modid, 
    bcm_module_t *mask_modid, 
    bcm_port_t *data_port, 
    bcm_port_t *mask_port);

/* 
 * Get match criteria for bcmFieldQualifySrcTrunk
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcTrunk_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t *data, 
    bcm_trunk_t *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcTrunkMemberGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcTrunkMemberGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *data);

/* 
 * Get match criteria for bcmFieldQualifyDstPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t *data_modid, 
    bcm_module_t *mask_modid, 
    bcm_port_t *data_port, 
    bcm_port_t *mask_port);

/* 
 * Get match criteria for bcmFieldQualifyDstTrunk
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstTrunk_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t *data, 
    bcm_trunk_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerL4SrcPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerL4SrcPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t *data, 
    bcm_l4_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerL4DstPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerL4DstPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t *data, 
    bcm_l4_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyL4SrcPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L4SrcPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t *data, 
    bcm_l4_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyL4DstPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L4DstPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t *data, 
    bcm_l4_port_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyOuterVlan
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterVlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Get match criteria for bcmFieldQualifyOuterVlanId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterVlanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Get match criteria for bcmFieldQualifyOuterVlanPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterVlanPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Get match criteria for bcmFieldQualifyOuterVlanCfi
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterVlanCfi_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerVlan
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerVlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Get match criteria for bcmFieldQualifyInnerVlanId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerVlanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 *  Get match criteria for bcmFieldQualifyInnerVlanPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerVlanPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Get match criteria for bcmFieldQualifyInnerVlanCfi_get
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerVlanCfi_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyEtherType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_EtherType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpProtocol
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpProtocol_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpInfo
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpInfo_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyPacketRes
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_PacketRes_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t *data, 
    bcm_ip_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t *data, 
    bcm_ip_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyTos
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Tos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDSCP
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DSCP_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpFlags
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpFlags_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyTcpControl
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TcpControl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyTtl
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ttl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyRangeCheck
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_RangeCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    int max_count, 
    bcm_field_range_t *range, 
    int *invert, 
    int *count);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6High
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6High_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6High
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6High_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6Low
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6Low_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6Low
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6Low_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyIp6NextHeader
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ip6NextHeader_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIp6TrafficClass
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ip6TrafficClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIp6FlowLabel
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ip6FlowLabel_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIp6HopLimit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Ip6HopLimit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcMac
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcMac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t *data, 
    bcm_mac_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstMac
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t *data, 
    bcm_mac_t *mask);

/* 
 * Set match criteria for bcmFieldQualifyForwardHdrSrcMac
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardHdrSrcMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* 
 * Get match criteria for bcmFieldQualifyForwardHdrSrcMac
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardHdrSrcMac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t *data, 
    bcm_mac_t *mask);

/* 
 * Set match criteria for bcmFieldQualifyForwardHdrDstMac
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardHdrDstMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* 
 * Get match criteria for bcmFieldQualifyForwardHdrDstMac
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardHdrDstMac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t *data, 
    bcm_mac_t *mask);

/* 
 *  Set match criteria for bcmFieldQualifyForwardHdrVlanId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_ForwardHdrVlanId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* 
 * Get match criteria for bcmFieldQualifyForwardHdrVlanId
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardHdrVlanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t *data, 
    bcm_vlan_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIpType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIpType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpType_t *type);

/* 
 * Get match criteria for bcmFieldQualifyForwardingType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardingType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_ForwardingType_t *type);

/* 
 * Get match criteria for bcmFieldQualifyIpType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpType_t *type);

/* 
 * Get match criteria for bcmFieldQualifyL2Format
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2Format_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_L2Format_t *type);

/* 
 * Get match criteria for bcmFieldQualifyTranslatedVlanFormat
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TranslatedVlanFormat_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyVlanFormat
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_VlanFormat_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyMHOpcode
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_MHOpcode_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstHiGig
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstHiGig_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGig
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGig_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigProxy
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigProxy_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInterfaceClassPort
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InterfaceClassPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInterfaceClassL2
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InterfaceClassL2_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInterfaceClassL3
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InterfaceClassL3_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcClassL2
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcClassL2_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcClassL3
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcClassL3_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcClassField
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcClassField_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstClassL2
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstClassL2_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstClassL3
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstClassL3_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstClassField
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstClassField_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpProtocolCommon
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpProtocolCommon_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpProtocolCommon_t *protocol);

/* 
 * Get match criteria for bcmFieldQualifyInnerIpProtocolCommon
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIpProtocolCommon_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpProtocolCommon_t *protocol);

/* 
 * Get match criteria for bcmFieldQualifySnap
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Snap_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_snap_header_t *data, 
    bcm_field_snap_header_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyLlc
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Llc_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_llc_header_t *data, 
    bcm_field_llc_header_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerTpid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerTpid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *tpid);

/* 
 * Get match criteria for bcmFieldQualifyOuterTpid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_OuterTpid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *tpid);

/* 
 * Get match criteria for bcmFieldQualifyL3Routable
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3Routable_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpFrag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpFrag_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t *frag_info);

/* 
 * Get match criteria for bcmFieldQualifyVrf
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_Vrf_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL3Ingress
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3Ingress_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyExtensionHeaderType
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ExtensionHeaderType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyExtensionHeaderSubCode
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ExtensionHeaderSubCode_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyExtensionHeader2Type
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ExtensionHeader2Type_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL4Ports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L4Ports_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyMirrorCopy
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_MirrorCopy_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyTunnelTerminated
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TunnelTerminated_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyMplsTerminated
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_MplsTerminated_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerSrcIp
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerSrcIp_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t *data, 
    bcm_ip_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerDstIp
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerDstIp_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t *data, 
    bcm_ip_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerSrcIp6
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerSrcIp6_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerDstIp6
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerDstIp6_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerSrcIp6High
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerSrcIp6High_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerDstIp6High
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerDstIp6High_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t *data, 
    bcm_ip6_t *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerTtl
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerTtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIp6HopLimit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIp6HopLimit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerTos
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerTos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerDSCP
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerDSCP_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIpProtocol
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIpProtocol_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIp6NextHeader
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIp6NextHeader_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyInnerIpFrag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_InnerIpFrag_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t *frag_info);

/* 
 * Get match criteria for bcmFieldQualifyDosAttack
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DosAttack_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIpmcStarGroupHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpmcStarGroupHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyMyStationHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_MyStationHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2PayloadFirstEightBytes
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2PayloadFirstEightBytes_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data1, 
    uint32 *data2, 
    uint32 *mask1, 
    uint32 *mask2);

/* 
 * Get match criteria for bcmFieldQualifyL3DestRouteHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3DestRouteHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL3DestHostHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3DestHostHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL3SrcHostHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L3SrcHostHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2CacheHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2CacheHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2StationMove
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2StationMove_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2DestHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2DestHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2SrcStatic
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2SrcStatic_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2SrcHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_L2SrcHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIngressStpState
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IngressStpState_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyForwardingVlanValid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ForwardingVlanValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifySrcVirtualPortValid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcVirtualPortValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyDstL3EgressNextHops
 *                 qualifier from the field entry.
 */
extern int bcm_field_qualify_DstL3EgressNextHops_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyVlanTranslationHit
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_VlanTranslationHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyIcmpTypeCode
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IcmpTypeCode_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Get Fibre Channel outer header type field qualification from a field
 * entry.
 */
extern int bcm_field_qualify_FibreChanOuter_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_FibreChan_t *fibre_chan_type);

/* 
 * Get Fibre Channel inner header type field qualification from a field
 * entry.
 */
extern int bcm_field_qualify_FibreChanInner_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_FibreChan_t *fibre_chan_type);

/* 
 * Get match criteria for bcmFieldQualifyVnTag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_VnTag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyCnTag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_CnTag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Get match criteria for bcmFieldQualifyFabricQueueTag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_FabricQueueTag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for RepCopy
 *                qualifier.
 */
extern int bcm_field_qualify_RepCopy(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for RepCopy
 *                qualifier.
 */
extern int bcm_field_qualify_RepCopy_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for IpTunnelHit
 *                qualifier.
 */
extern int bcm_field_qualify_IpTunnelHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for IpTunnelHit
 *                qualifier.
 */
extern int bcm_field_qualify_IpTunnelHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsLabel1Hit
 *                qualifier.
 */
extern int bcm_field_qualify_MplsLabel1Hit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsLabel1Hit
 *                qualifier.
 */
extern int bcm_field_qualify_MplsLabel1Hit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for TrillEgressRbridgeHit
 *                qualifier.
 */
extern int bcm_field_qualify_TrillEgressRbridgeHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for TrillEgressRbridgeHit
 *                qualifier.
 */
extern int bcm_field_qualify_TrillEgressRbridgeHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for L2GreSrcIpHit
 *                qualifier.
 */
extern int bcm_field_qualify_L2GreSrcIpHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for L2GreSrcIpHit
 *                qualifier.
 */
extern int bcm_field_qualify_L2GreSrcIpHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MimSrcGportHit
 *                qualifier.
 */
extern int bcm_field_qualify_MimSrcGportHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MimSrcGportHit
 *                qualifier.
 */
extern int bcm_field_qualify_MimSrcGportHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsLabel2Hit
 *                qualifier.
 */
extern int bcm_field_qualify_MplsLabel2Hit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsLabel2Hit
 *                qualifier.
 */
extern int bcm_field_qualify_MplsLabel2Hit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for TrillIngressRbridgeHit
 *                qualifier.
 */
extern int bcm_field_qualify_TrillIngressRbridgeHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for TrillIngressRbridgeHit
 *                qualifier.
 */
extern int bcm_field_qualify_TrillIngressRbridgeHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for L2GreVfiHit
 *                qualifier.
 */
extern int bcm_field_qualify_L2GreVfiHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for L2GreVfiHit
 *                qualifier.
 */
extern int bcm_field_qualify_L2GreVfiHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MimVfiHit
 *                qualifier.
 */
extern int bcm_field_qualify_MimVfiHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MimVfiHit
 *                qualifier.
 */
extern int bcm_field_qualify_MimVfiHit_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for GenericAssociatedChannelLabelValid
 *                qualifier.
 */
extern int bcm_field_qualify_GenericAssociatedChannelLabelValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for GenericAssociatedChannelLabelValid
 *                qualifier.
 */
extern int bcm_field_qualify_GenericAssociatedChannelLabelValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for RouterAlertLabelValid
 *                qualifier.
 */
extern int bcm_field_qualify_RouterAlertLabelValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for RouterAlertLabelValid
 *                qualifier.
 */
extern int bcm_field_qualify_RouterAlertLabelValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for DspIpLocal
 *                qualifier.
 */
extern int bcm_field_qualify_DstIpLocal(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for DspIpLocal
 *                qualifier.
 */
extern int bcm_field_qualify_DstIpLocal_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for IpAddrsNormalized
 *                qualifier.
 */
extern int bcm_field_qualify_IpAddrsNormalized(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for IpAddrsNormalized
 *                qualifier.
 */
extern int bcm_field_qualify_IpAddrsNormalized_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MacAddrsNormalized
 *                qualifier.
 */
extern int bcm_field_qualify_MacAddrsNormalized(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MacAddrsNormalized
 *                qualifier.
 */
extern int bcm_field_qualify_MacAddrsNormalized_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsForwardingLabel
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabel(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for MplsForwardingLabel
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabel_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for MplsForwardingLabelTtl
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelTtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsForwardingLabelTtl
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelTtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsForwardingLabelBos
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelBos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsForwardingLabelBos
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelBos_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsForwardingLabelExp
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelExp(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsForwardingLabelExp
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelExp_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsForwardingLabelId
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for MplsForwardingLabelId
 *                qualifier.
 */
extern int bcm_field_qualify_MplsForwardingLabelId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for MplsControlWord
 *                qualifier.
 */
extern int bcm_field_qualify_MplsControlWord(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for MplsControlWord
 *                qualifier.
 */
extern int bcm_field_qualify_MplsControlWord_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for Rtag7AHashUpper
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7AHashUpper(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for Rtag7AHashUpper
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7AHashUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for Rtag7AHashLower
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7AHashLower(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for Rtag7AHashLower
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7AHashLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for Rtag7BHashUpper
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7BHashUpper(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for Rtag7BHashUpper
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7BHashUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for Rtag7BHashLower
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7BHashLower(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for Rtag7BHashLower
 *                qualifier.
 */
extern int bcm_field_qualify_Rtag7BHashLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for MplsForwardingLabelAction
 *                qualifier(8 bits).
 */
extern int bcm_field_qualify_MplsForwardingLabelAction(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsForwardingLabelAction
 *                qualifier(8 bits).
 */
extern int bcm_field_qualify_MplsForwardingLabelAction_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for MplsControlWordValid
 *                qualifier.
 */
extern int bcm_field_qualify_MplsControlWordValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for MplsControlWordValid
 *                qualifier.
 */
extern int bcm_field_qualify_MplsControlWordValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for EgressClass
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClass
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for EgressClassL3Interface
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassL3Interface(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClassL3Interface
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassL3Interface_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for EgressClassTrill
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassTrill(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClassTrill
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassTrill_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for EgressClassWlan
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassWlan(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClassWlan
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassWlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for EgressClassL2Gre
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassL2Gre(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for EgressClassL2Gre
 *                qualifier.
 */
extern int bcm_field_qualify_EgressClassL2Gre_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* Set match criteria for CpuQueue qualifier. */
extern int bcm_field_qualify_CpuQueue(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for CpuQueue qualifier. */
extern int bcm_field_qualify_CpuQueue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for SrcGport qualifier. */
extern int bcm_field_qualify_SrcGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id);

/* Get match criteria for SrcGport qualifier. */
extern int bcm_field_qualify_SrcGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id);

/* Set match criteria for ISid qualifier. */
extern int bcm_field_qualify_ISid(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for ISid qualifier. */
extern int bcm_field_qualify_ISid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for InterfaceClassVPort qualifier. */
extern int bcm_field_qualify_InterfaceClassVPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for InterfaceClassVPort qualifier. */
extern int bcm_field_qualify_InterfaceClassVPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Set match criteria for L4PortRangeCheck qualifier. */
extern int bcm_field_qualify_L4PortRangeCheck(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_range_t range, 
    int invert);

/* Get match criteria for L4PortRangeCheck qualifier. */
extern int bcm_field_qualify_L4PortRangeCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    int max_count, 
    bcm_field_range_t *range, 
    int *invert, 
    int *count);

/* Qualify on Exact Match Hit Status. */
extern int bcm_field_qualify_ExactMatchHitStatus(
    int unit, 
    bcm_field_entry_t entry, 
    int group_pri, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for ExactMatchHitStatus qualifier. */
extern int bcm_field_qualify_ExactMatchHitStatus_get(
    int unit, 
    bcm_field_entry_t entry, 
    int group_pri, 
    uint8 *data, 
    uint8 *mask);

/* Qualify on Exact Match Action Class Id. */
extern int bcm_field_qualify_ExactMatchActionClassId(
    int unit, 
    bcm_field_entry_t entry, 
    int group_pri, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for ExactMatchActionClassId qualifier. */
extern int bcm_field_qualify_ExactMatchActionClassId_get(
    int unit, 
    bcm_field_entry_t entry, 
    int group_pri, 
    uint32 *data, 
    uint32 *mask);

/* Qualify on Exact Match Group Class Id. */
extern int bcm_field_qualify_ExactMatchGroupClassId(
    int unit, 
    bcm_field_entry_t entry, 
    int group_pri, 
    bcm_field_group_t group);

/* Get match criteria for ExactMatchGroupClassId qualifier. */
extern int bcm_field_qualify_ExactMatchGroupClassId_get(
    int unit, 
    bcm_field_entry_t entry, 
    int group_pri, 
    bcm_field_group_t *group);

/* Add match criteria for bcmFieldQualifyDstMultipathOverlay. */
extern int bcm_field_qualify_DstMultipathOverlay(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t data, 
    bcm_if_t mask);

/* Get match criteria for ECMP groups with Overlay flag. */
extern int bcm_field_qualify_DstMultipathOverlay_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t *data, 
    bcm_if_t *mask);

/* Add match criteria for bcmFieldQualifyDstMultipathUnderlay. */
extern int bcm_field_qualify_DstMultipathUnderlay(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t data, 
    bcm_if_t mask);

/* Get match criteria for ECMP groups with Underlay flag. */
extern int bcm_field_qualify_DstMultipathUnderlay_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_t *data, 
    bcm_if_t *mask);

/* Add an action to a field entry */
extern int bcm_field_action_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    uint32 param0, 
    uint32 param1);

/* Delete an action from a field entry */
extern int bcm_field_action_delete(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    uint32 param0, 
    uint32 param1);

/* Add an action to a field entry */
extern int bcm_field_action_mac_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_mac_t mac);

/* Add an action to a field entry */
extern int bcm_field_action_ports_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_pbmp_t pbmp);

/* 
 * Retrieve the parameters for an action previously added to a field
 * entry
 */
extern int bcm_field_action_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    uint32 *param0, 
    uint32 *param1);

/* 
 * Retrieve the parameters for an action previously added to a field
 * entry
 */
extern int bcm_field_action_mac_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_mac_t *mac);

/* 
 * Retrieve the parameters for an action previously added to a field
 * entry
 */
extern int bcm_field_action_ports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_pbmp_t *pbmp);

/* Remove an action from a field entry */
extern int bcm_field_action_remove(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action);

/* Remove all actions from a field entry */
extern int bcm_field_action_remove_all(
    int unit, 
    bcm_field_entry_t entry);

#endif /* BCM_HIDE_DISPATCHABLE */

#ifndef BCM_HIDE_DISPATCHABLE

/* Create stat collection entity. */
extern int bcm_field_stat_create(
    int unit, 
    bcm_field_group_t group, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    int *stat_id);

/* 
 * Create stat collection entity with specified Statistics entity ID
 * value.
 */
extern int bcm_field_stat_create_id(
    int unit, 
    bcm_field_group_t group, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    int stat_id);

/* Destroy stat collection entity. */
extern int bcm_field_stat_destroy(
    int unit, 
    int stat_id);

/* Get number of counters associated with statistics entity. */
extern int bcm_field_stat_size(
    int unit, 
    int stat_id, 
    int *stat_size);

/* Get enabled statistics for specific collection entity. */
extern int bcm_field_stat_config_get(
    int unit, 
    int stat_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr);

/* Set 64-bit counter value for specific statistic type. */
extern int bcm_field_stat_set(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint64 value);

/* Set 32-bit counter value for specific statistic type. */
extern int bcm_field_stat_set32(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint32 value);

/* Set 64-bit counter value to all counters. */
extern int bcm_field_stat_all_set(
    int unit, 
    int stat_id, 
    uint64 value);

/* Set 32-bit counter value to all counters. */
extern int bcm_field_stat_all_set32(
    int unit, 
    int stat_id, 
    uint32 value);

/* Get 64-bit counter value for specific statistic type. */
extern int bcm_field_stat_get(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint64 *value);

/* 
 * Force an immediate counter update and retrieve specific statistic
 * type.
 */
extern int bcm_field_stat_sync_get(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint64 *value);

/* Get 32-bit counter value for specific statistic type. */
extern int bcm_field_stat_get32(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint32 *value);

/* 
 * Force an immediate counter update and retrieve specific statistic
 * type.
 * Get 32-bit counter value for specific statistic type.
 */
extern int bcm_field_stat_sync_get32(
    int unit, 
    int stat_id, 
    bcm_field_stat_t stat, 
    uint32 *value);

/* Get 64-bit counter values for multiple statistic types. */
extern int bcm_field_stat_multi_get(
    int unit, 
    int stat_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    uint64 *value_arr);

/* Get 32-bit counter values for multiple statistic types. */
extern int bcm_field_stat_multi_get32(
    int unit, 
    int stat_id, 
    int nstat, 
    bcm_field_stat_t *stat_arr, 
    uint32 *value_arr);

/* Attach statistics entity to Field Processor entry. */
extern int bcm_field_entry_stat_attach(
    int unit, 
    bcm_field_entry_t entry, 
    int stat_id);

/* Detach statistics entity from Field Processor entry. */
extern int bcm_field_entry_stat_detach(
    int unit, 
    bcm_field_entry_t entry, 
    int stat_id);

/* Get statistics entity attached to Field Processor entry. */
extern int bcm_field_entry_stat_get(
    int unit, 
    bcm_field_entry_t entry, 
    int *stat_id);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Initialize Field Qualifier LLC header structure. */
extern void bcm_field_llc_header_t_init(
    bcm_field_llc_header_t *llc_header);

/* Initialize Field Qualifier SNAP header structure. */
extern void bcm_field_snap_header_t_init(
    bcm_field_snap_header_t *snap_header);

/* Initialize the Field Qualifier Set structure. */
extern void bcm_field_qset_t_init(
    bcm_field_qset_t *qset);

/* Initialize the Field Action Set structure. */
extern void bcm_field_aset_t_init(
    bcm_field_aset_t *aset);

/* Initialize the Field Group Status structure. */
extern void bcm_field_group_status_t_init(
    bcm_field_group_status_t *fgroup);

#ifndef BCM_HIDE_DISPATCHABLE

#if defined(BROADCOM_DEBUG)
/* Show current software state of the field module */
extern int bcm_field_show(
    int unit, 
    const char *pfx);
#endif

#if defined(BROADCOM_DEBUG)
/* Show contents of a field entry */
extern int bcm_field_entry_dump(
    int unit, 
    bcm_field_entry_t entry);
#endif

#if defined(BROADCOM_DEBUG)
/* Show contents of a field group */
extern int bcm_field_group_dump(
    int unit, 
    bcm_field_group_t group);
#endif

#endif /* BCM_HIDE_DISPATCHABLE */

/* SDK 5.2.0 backward compatibility. */
#define bcmFieldQualifyOutVlan  bcmFieldQualifyOuterVlan 
#define bcmFieldQualifyInVlan   bcmFieldQualifyInnerVlan 

/* SDK 5.2.0 backward compatibility. */
#define bcm_field_qualify_OutVlan   bcm_field_qualify_OuterVlan 
#define bcm_field_qualify_InVlan    bcm_field_qualify_InnerVlan 

/* Field entry operation structure. */
typedef struct bcm_field_entry_oper_s {
    uint32 flags;               /* Entry operation BCM_FIELD_ENTRY_OPER_XXX. */
    bcm_field_entry_t entry_id; /* Entry identifier. */
} bcm_field_entry_oper_t;

/* Parameter for bcm_field_entry_oper_t. */
#define BCM_FIELD_ENTRY_OPER_BACKUP     (1 << 0)   /* Backup up an entry
                                                      configuration. */
#define BCM_FIELD_ENTRY_OPER_RESTORE    (1 << 1)   /* Restore backed up entry
                                                      configuration. */
#define BCM_FIELD_ENTRY_OPER_CLEANUP    (1 << 2)   /* Free resources used by
                                                      back entry. */
#define BCM_FIELD_ENTRY_OPER_MASK       (0x7)      /* Mask of valid entry
                                                      operations supported. */

/* Initialize field entry operation structure */
extern void bcm_field_entry_oper_t_init(
    bcm_field_entry_oper_t *entry_oper);

#ifndef BCM_HIDE_DISPATCHABLE

/* Perform backup, restore and cleanup operations on a field entry. */
extern int bcm_field_entry_operation(
    int unit, 
    bcm_field_entry_oper_t *entry_oper);

/* Get data field that the packet must match to trigger qualifier */
extern int bcm_field_qualify_data_get(
    int unit, 
    bcm_field_entry_t eid, 
    int qual_id, 
    uint16 length_max, 
    uint8 *data, 
    uint8 *mask, 
    uint16 *length);

/* 
 * Set match criteria for bcmFieldQualifyIngressClassField
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressClassField(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyIngressClassField
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressClassField_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyIngressInterfaceClassPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressInterfaceClassPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyIngressInterfaceClassPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressInterfaceClassPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyVxlanNetworkId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_VxlanNetworkId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyVxlanNetworkId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_VxlanNetworkId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyVxlanFlags
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_VxlanFlags(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyVxlanFlags
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_VxlanFlags_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyNatNeeded
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatNeeded(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyNatNeeded
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatNeeded_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyNatDstRealmId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatDstRealmId(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyNatDstRealmId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatDstRealmId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyNatSrcRealmId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatSrcRealmId(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyNatSrcRealmId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_NatSrcRealmId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyIcmpError
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_IcmpError(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyIcmpError
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_IcmpError_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanRCtl
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanRCtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanRCtl
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanRCtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanFCtl
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanFCtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanFCtl
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanFCtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanCSCtl
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanCSCtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanCSCtl
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanCSCtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanDFCtl
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanDFCtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanDFCtl
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDFCtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanType
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanType
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanSrcId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanSrcId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanDstId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanDstId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanDstId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTVersion
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVersion(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTVersion
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVersion_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTFabricId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTFabricId(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTFabricId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTFabricId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTHopCount
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTHopCount(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTHopCount
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTHopCount_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTVsanId
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVsanId(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTVsanId
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVsanId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTVsanPri
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVsanPri(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTVsanPri
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTVsanPri_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFcoeSOF
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FcoeSOF(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFcoeSOF
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeSOF_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanSrcFpmaCheck
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcFpmaCheck(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanSrcFpmaCheck
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcFpmaCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanSrcBindCheck
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcBindCheck(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanSrcBindCheck
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcBindCheck_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFcoeVersionIsZero
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FcoeVersionIsZero(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFcoeVersionIsZero
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeVersionIsZero_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 *  Set match criteria for bcmFieldQualifyFibreChanVFTValid
 *                  qualifier in the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 *  Get match criteria for bcmFieldQualifyFibreChanVFTValid
 *                  qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanVFTValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef enum bcm_field_orientation_e {
    bcmFieldOrientationNetwork = 0, /* Network orientation (hub) */
    bcmFieldOrientationAccess = 1,  /* Access orientation (spoke) */
    bcmFieldOrientationCount = 2    /* Always Last. Not a usable value. */
} bcm_field_orientation_t;

typedef enum bcm_field_start_packet_strip_e {
    bcmFieldStartToConfigurableStrip = 0, /* Configurable size of number of bytes
                                           to strip, according to param1. */
    bcmFieldStartToL2Strip = 1,         /* Remove the start-of-packet up to the
                                           L2 header. */
    bcmFieldStartToFwdStrip = 2,        /* Remove the start-of-packet up to the
                                           Forwarding header. */
    bcmFieldStartToFwdNextStrip = 3,    /* Remove the start-of-packet up to the
                                           header following the Forwarding
                                           header. */
    bcmFieldStartStripCount = 4         /* Always Last. Not a usable value. */
} bcm_field_start_packet_strip_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Set qualification on a particular stage. This feature is normally
 * used for preselectors.
 */
extern int bcm_field_qualify_Stage(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_stage_t data);

/* Get stage qualifier information. */
extern int bcm_field_qualify_Stage_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_stage_t *data);

/* 
 * Configure match criteria for bcmFieldQualifyIpFragNonOrFirst
 *         qualifier from the field entry.
 */
extern int bcm_field_qualify_IpFragNonOrFirst(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyIpFragNonOrFirst
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_IpFragNonOrFirst_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Configure match criteria for bcmFieldQualifyPacketLength
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_PacketLength(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for bcmFieldQualifyPacketLength
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_PacketLength_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for bcmFieldQualifyGroupClass
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_GroupClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyGroupClass
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_GroupClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyUdfClass
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_UdfClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyUdfClass
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_UdfClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyInterfaceLookupClassPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_InterfaceLookupClassPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyInterfaceLookupClassPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_InterfaceLookupClassPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for
 * bcmFieldQualifyInterfaceIngressKeySelectClassPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_InterfaceIngressKeySelectClassPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for
 * bcmFieldQualifyInterfaceIngressKeySelectClassPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_InterfaceIngressKeySelectClassPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyITag
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_ITag(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyITag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ITag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyBfdYourDiscriminator
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_BfdYourDiscriminator(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyBfdYourDiscriminator
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_BfdYourDiscriminator_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyCpuVisibilityPacket
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_CpuVisibilityPacket(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyCpuVisibilityPacket
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_CpuVisibilityPacket_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyDstL2MulticastGroup
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_DstL2MulticastGroup(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t group, 
    bcm_multicast_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstL2MulticastGroup
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstL2MulticastGroup_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t *group, 
    bcm_multicast_t *mask);

/* 
 * Set match criteria for bcmFieldQualifyDstL3MulticastGroup
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_DstL3MulticastGroup(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t group, 
    bcm_multicast_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstL3MulticastGroup
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstL3MulticastGroup_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t *group, 
    bcm_multicast_t *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Oam Type (ETHERNET, MPLS). */
typedef enum bcm_field_oam_type_e {
    bcmFieldOamTypeEthernet,    /* Oam Type Ethernet. */
    bcmFieldOamTypeMpls,        /* Oam Type MPLS. */
    bcmFieldOamTypeCount        /* Always last. Not a usable value. */
} bcm_field_oam_type_t;

#define BCM_FIELD_OAM_TYPE \
{ \
    "Ethernet", \
    "Mpls"  \
}

/* 
 * Mpls Oam Control Packet Type (UNKNOWN, VCCV1, VCCV2, VCCV3,
 * VCCV4/GAL_ACH).
 */
typedef enum bcm_field_MplsOam_Control_pktType_e {
    bcmFieldMplsOamControlPktTypeUnknown, /* Mpls Oam Control Packet Type UNKNOWN. */
    bcmFieldMplsOamControlPktTypeVCCV1, /* Mpls Oam Control Packet Type VCCV1. */
    bcmFieldMplsOamControlPktTypeVCCV2, /* Mpls Oam Control Packet Type VCCV2. */
    bcmFieldMplsOamControlPktTypeVCCV3, /* Mpls Oam Control Packet Type VCCV3. */
    bcmFieldMplsOamControlPktTypeVCCV4_GAL_ACH, /* Mpls Oam Control Packet Type
                                           VCCV4/GAL_ACH. */
    bcmFieldMplsOamControlPktTypeCount  /* Always last. Not a usable value. */
} bcm_field_MplsOam_Control_pktType_t;

#define BCM_FIELD_MPLS_OAM_CONTROL_PKT_TYPE \
{ \
    "Unknown", \
    "VCCV1", \
    "VCCV2", \
    "VCCV3", \
    "VCCV4_GAL_ACH"  \
}

#ifndef BCM_HIDE_DISPATCHABLE

/* bcm_field_qualify_ETag */
extern int bcm_field_qualify_ETag(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 data, 
    uint64 mask);

/* 
 * Get match criteria for bcmFieldQualifyETag
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_ETag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint64 *data, 
    uint64 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

typedef enum bcm_field_system_header_e {
    bcmFieldSystemHeaderPphEei = 0, /* EEI extension of the PPH (Packet
                                       Processing Header) */
    bcmFieldSystemHeaderCount = 1   /* Always Last. Not a usable value. */
} bcm_field_system_header_t;

typedef enum bcm_field_fabric_header_e {
    bcmFieldFabricHeaderEthernet = 0,   /* Ethernet fabric header */
    bcmFieldFabricHeaderTrafficManagementUcast = 1, /* Unicast Traffic Management fabric
                                           header */
    bcmFieldFabricHeaderTrafficManagementMcast = 2, /* Multicast Traffic Management fabric
                                           header */
    bcmFieldFabricHeaderTrafficManagementVPort = 3, /*  VPort Traffic Management fabric
                                           header */
    bcmFieldFabricHeaderStacking = 4,   /* Stacking fabric header */
    bcmFieldFabricHeaderEthernetDSP = 5, /* regular Ethernet, stacking FTMH with
                                           DSP Extension and PPH fabric header */
    bcmFieldFabricHeaderEthernetLearn = 6, /* regular Ethernet, stacking FTMH with
                                           DSP Extension and PPH fabric header */
    bcmFieldFabricHeaderEthernetlatency = 7, /* regular Ethernet, stacking FTMH with
                                           OAM-TS-LATENCY header */
    bcmFieldFabricHeaderEthernetLearnDisable = 8, /* Regular Ethernet, with disabled PPH
                                           header learn extension. */
    bcmFieldFabricHeaderCount = 9       /* Always Last. Not a usable value. */
} bcm_field_fabric_header_t;

/* Multi-range flags */
#define BCM_FIELD_RANGE_MULTI_WITH_ID   0x00000001 /* Range Id is provided */
#define BCM_FIELD_RANGE_MULTI_REPLACE   0x00000002 /* Replace existing range */

/* VXLAN Flags from IETF Draft(for bcm_field_qualify_VxlanFlags). */
#define BCM_FIELD_VXLAN_VNI_VALID   0x8        /* VXLAN Network ID (VNI)- Valid */

/* FCOE zone check action types. */
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_NOP 0          
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_DISABLE 1          
#define BCM_FIELD_FIBRE_CHAN_ZONE_CHECK_ENABLE 2          

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Set match criteria for bcmFieldQualifyOamMdl
 *                 qualifier from the field entry
 */
extern int bcm_field_qualify_OamMdl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyOamMdl
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_OamMdl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for IntCongestionNotification qualifier. */
extern int bcm_field_qualify_IntCongestionNotification(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for IntCongestionNotification qualifier. */
extern int bcm_field_qualify_IntCongestionNotification_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* bcm_field_qualify_SrcNivGport */
extern int bcm_field_qualify_SrcNivGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t niv_port_id);

/* bcm_field_qualify_DstNivGport */
extern int bcm_field_qualify_DstNivGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t niv_port_id);

/* 
 * Get match criteria for bcmFieldQualifySrcNivGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcNivGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *niv_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstNivGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstNivGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *niv_port_id);

/* Set match criteria for DstGport qualifier. */
extern int bcm_field_qualify_DstGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id);

/* Get match criteria for DstGport qualifier. */
extern int bcm_field_qualify_DstGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id);

/* bcm_field_qualify_SrcVlanGport */
extern int bcm_field_qualify_SrcVlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vlan_port_id);

/* bcm_field_qualify_DstVlanGport */
extern int bcm_field_qualify_DstVlanGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vlan_port_id);

/* 
 * Get match criteria for bcmFieldQualifySrcVlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcVlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vlan_port_id);

/* 
 * Get match criteria for bcmFieldQualifyDstVlanGport
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstVlanGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vlan_port_id);

/* 
 * Set match criteria for bcmFieldQualifyIngressInterfaceClassVPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressInterfaceClassVPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyIngressInterfaceClassVPort
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_IngressInterfaceClassVPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* bcm_field_qualify_SrcVlanGports */
extern int bcm_field_qualify_SrcVlanGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vlan_port_id, 
    bcm_gport_t vlan_port_mask);

/* bcm_field_qualify_DstVlanGports */
extern int bcm_field_qualify_DstVlanGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vlan_port_id, 
    bcm_gport_t vlan_port_mask);

/* 
 * Get match criteria for bcmFieldQualifySrcVlanGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcVlanGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vlan_port_id, 
    bcm_gport_t *vlan_port_mask);

/* 
 * Get match criteria for bcmFieldQualifyDstVlanGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstVlanGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vlan_port_id, 
    bcm_gport_t *vlan_port_mask);

/* bcm_field_qualify_SrcVxlanGports */
extern int bcm_field_qualify_SrcVxlanGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vxlan_port_id, 
    bcm_gport_t vxlan_port_mask);

/* bcm_field_qualify_DstVxlanGports */
extern int bcm_field_qualify_DstVxlanGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t vxlan_port_id, 
    bcm_gport_t vxlan_port_mask);

/* 
 * Get match criteria for bcmFieldQualifySrcVxlanGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcVxlanGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vxlan_port_id, 
    bcm_gport_t *vxlan_port_mask);

/* 
 * Get match criteria for bcmFieldQualifyDstVxlanGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstVxlanGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *vxlan_port_id, 
    bcm_gport_t *vxlan_port_mask);

/* bcm_field_qualify_SrcWlanGports */
extern int bcm_field_qualify_SrcWlanGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t wlan_port_id, 
    bcm_gport_t wlan_port_mask);

/* bcm_field_qualify_DstWlanGports */
extern int bcm_field_qualify_DstWlanGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t wlan_port_id, 
    bcm_gport_t wlan_port_mask);

/* 
 * Get match criteria for bcmFieldQualifySrcWlanGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcWlanGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *wlan_port_id, 
    bcm_gport_t *wlan_port_mask);

/* 
 * Get match criteria for bcmFieldQualifyDstWlanGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstWlanGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *wlan_port_id, 
    bcm_gport_t *wlan_port_mask);

/* bcm_field_qualify_SrcMplsGports */
extern int bcm_field_qualify_SrcMplsGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mpls_port_id, 
    bcm_gport_t mpls_port_mask);

/* bcm_field_qualify_DstMplsGports */
extern int bcm_field_qualify_DstMplsGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mpls_port_id, 
    bcm_gport_t mpls_port_mask);

/* 
 * Get match criteria for bcmFieldQualifySrcMplsGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcMplsGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mpls_port_id, 
    bcm_gport_t *mpls_port_mask);

/* 
 * Get match criteria for bcmFieldQualifyDstMplsGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMplsGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mpls_port_id, 
    bcm_gport_t *mpls_port_mask);

/* bcm_field_qualify_SrcGports */
extern int bcm_field_qualify_SrcGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* bcm_field_qualify_DstGports */
extern int bcm_field_qualify_DstGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifySrcGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Get match criteria for bcmFieldQualifyDstGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* bcm_field_qualify_SrcMimGports */
extern int bcm_field_qualify_SrcMimGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mim_port_id, 
    bcm_gport_t mim_port_mask);

/* bcm_field_qualify_DstMimGports */
extern int bcm_field_qualify_DstMimGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t mim_port_id, 
    bcm_gport_t mim_port_mask);

/* 
 * Get match criteria for bcmFieldQualifySrcMimGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcMimGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mim_port_id, 
    bcm_gport_t *mim_port_mask);

/* 
 * Get match criteria for bcmFieldQualifyDstMimGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMimGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *mim_port_id, 
    bcm_gport_t *mim_port_mask);

/* bcm_field_qualify_SrcNivGports */
extern int bcm_field_qualify_SrcNivGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t niv_port_id, 
    bcm_gport_t niv_port_mask);

/* bcm_field_qualify_DstNivGports */
extern int bcm_field_qualify_DstNivGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t niv_port_id, 
    bcm_gport_t niv_port_mask);

/* 
 * Get match criteria for bcmFieldQualifySrcNivGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcNivGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *niv_port_id, 
    bcm_gport_t *niv_port_mask);

/* 
 * Get match criteria for bcmFieldQualifyDstNivGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstNivGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *niv_port_id, 
    bcm_gport_t *niv_port_mask);

/* bcm_field_qualify_SrcModPortGports */
extern int bcm_field_qualify_SrcModPortGports(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifySrcModPortGports
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcModPortGports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* Qualify Reserved_1 field in Vxlan Header */
extern int bcm_field_qualify_VxlanHeaderBits8_31(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* Get match criteria for Reserved_1 field in Vxlan Header */
extern int bcm_field_qualify_VxlanHeaderBits8_31_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Qualify Reserved_2 field in Vxlan Header */
extern int bcm_field_qualify_VxlanHeaderBits56_63(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* Get match criteria for Reserved_2 field in Vxlan Header */
extern int bcm_field_qualify_VxlanHeaderBits56_63_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Field Hint Type
 * 
 * Specify the hint type for a group.
 */
typedef enum bcm_field_hint_type_e {
    bcmFieldHintTypeCompression = 0,    /* Hint Type for Auto Compression */
    bcmFieldHintTypeExtraction = 1,     /* Hint Type for Qualifier Extraction */
    bcmFieldHintTypeGroupAutoExpansion = 2, /* Hint Type for Group Auto Expansion */
    bcmFieldHintTypeExactMatch = 3,     /* Hint Type for Exact Match. */
    bcmFieldHintTypeGroupIdenticalLookupId = 4, /* Hint Type for Group will have
                                           identical lookup Id as provided by
                                           the bcm_field_hint_t.group_id. */
    bcmFieldHintTypeCount = 5           /* Always Last. Not a usable value. */
} bcm_field_hint_type_t;

#define BCM_FIELD_HINT_TYPE_STRINGS \
{ \
    "Compression", \
    "Extraction", \
    "GroupAutoExpansion", \
    "ExactMatch", \
    "GroupIdenticalLookupId"  \
}

/* 
 * Field Hints.
 * 
 * Flags values to update the bcm_field_hints_t structure.
 */
#define BCM_FIELD_HINT_EXACT_MATCH_ONLY     (1 << 0)   /* Exact Match Only. */
#define BCM_FIELD_GROUP_AUTO_EXPANSION_SMALL (1 << 1)   /* Prefer expanding using
                                                          smaller slices */
#define BCM_FIELD_GROUP_AUTO_EXPANSION_LARGE (1 << 2)   /* Prefer expanding using
                                                          larger slices */
#define BCM_FIELD_GROUP_MAX_SIZE_HARD_LIMIT (1 << 3)   /* Set Hard limit for
                                                          max_group_size. */
#define BCM_FIELD_HINT_EXACT_MATCH_GROUP_PRIORITY (1 << 4)   /* Set Hint for Exact
                                                          Match Group. */

/* Specify hints to be used during group creation. */
typedef struct bcm_field_hint_s {
    bcm_field_hint_type_t hint_type;    /* Field hints of type
                                           bcm_field_hint_type_t. */
    bcm_field_qualify_t qual;           /* Field qualifier bcmFieldQualifyXXX. */
    uint32 max_values;                  /* To figure out the width of the
                                           compression output. */
    uint32 start_bit;                   /* Builds the range in conjunction with
                                           end_bit which will indicate that in
                                           the
                                                                   full mask any
                                           bits outside of that range are
                                           guaranteed to be 0. */
    uint32 end_bit;                     /* End bit of a mask for the qualifier
                                           in hint structure. */
    uint32 flags;                       /* Flags. */
    uint32 dosattack_event_flags;       /* Dos Attack Events Flags. */
    uint32 max_group_size;              /* Max size of the group. */
    int priority;                       /* Group priority. */
    bcm_udf_id_t udf_id;                /* UDF ID. */
    bcm_field_group_t group_id;         /* Original Group ID. */
} bcm_field_hint_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Set match criteria for bcmFieldQualifyDstMulticastGroups
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_DstMulticastGroups(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t group, 
    bcm_multicast_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstMulticastGroups
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DstMulticastGroups_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t *group, 
    bcm_multicast_t *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * List of Field Processor group operational modes supported per-CAP
 * stage.
 */
typedef enum bcm_field_group_oper_mode_e {
    bcmFieldGroupOperModeGlobal = 0,    /* Group Operational Global Mode Value. */
    bcmFieldGroupOperModePipeLocal = 1, /* Group Operational Pipe Local Mode
                                           Value. */
    bcmFieldGroupOperModeCount = 2      /* Always last. Not a usable value. */
} bcm_field_group_oper_mode_t;

#define BCM_FIELD_OPER_MODE_STRINGS \
{ \
    "Global", \
    "PipeLocal"  \
}

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Set operational mode of field group's in a particulat Filter Processor
 * Stage.
 */
extern int bcm_field_group_oper_mode_set(
    int unit, 
    bcm_field_qualify_t stage, 
    bcm_field_group_oper_mode_t mode);

/* 
 * Get operational mode of field group's in a particulat Filter Processor
 * Stage.
 */
extern int bcm_field_group_oper_mode_get(
    int unit, 
    bcm_field_qualify_t stage, 
    bcm_field_group_oper_mode_t *mode);

/* 
 * Configure match criteria for bcmFieldQualifyDestVirtualPortValid
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_DestVirtualPortValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyDestVirtualPortValid
 *                 qualifier from the field entry.
 */
extern int bcm_field_qualify_DestVirtualPortValid_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFcoeOxID
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeOxID(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for bcmFieldQualifyFcoeOxID
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeOxID_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFcoeRxID
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeRxID(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for bcmFieldQualifyFcoeRxID
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeRxID_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Configure match criteria for bcmFieldQualifyIpProtocolClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_IpProtocolClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyIpProtocolClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_IpProtocolClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyEtherTypeClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_EtherTypeClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyEtherTypeClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_EtherTypeClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyL4SrcPortClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_L4SrcPortClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyL4SrcPortClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_L4SrcPortClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyL4DstPortClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_L4DstPortClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyL4DstPortClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_L4DstPortClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifySrcIpClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIpClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIpClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIpClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifySrcIpClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIpClassMsbNibble(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIpClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIpClassMsbNibble_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifySrcIpClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIpClassLower(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIpClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIpClassLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifySrcIpClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIpClassUpper(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIpClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIpClassUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifySrcIp6Class
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6Class(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6Class
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6Class_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifySrcIp6ClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6ClassMsbNibble(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6ClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6ClassMsbNibble_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifySrcIp6ClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6ClassLower(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6ClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6ClassLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifySrcIp6ClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6ClassUpper(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifySrcIp6ClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_SrcIp6ClassUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFcoeOxIDClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeOxIDClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFcoeOxIDClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeOxIDClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyDstIpClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIpClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIpClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIpClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyDstIpClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIpClassMsbNibble(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIpClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIpClassMsbNibble_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyDstIpClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIpClassLower(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIpClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIpClassLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyDstIpClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIpClassUpper(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIpClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIpClassUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyDstIp6Class
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6Class(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6Class
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6Class_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyDstIp6ClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6ClassMsbNibble(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6ClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6ClassMsbNibble_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyDstIp6ClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6ClassLower(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6ClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6ClassLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyDstIp6ClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6ClassUpper(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyDstIp6ClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_DstIp6ClassUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFcoeRxIDClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeRxIDClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFcoeRxIDClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FcoeRxIDClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFibreChanSrcIdClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcIdClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFibreChanSrcIdClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcIdClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for
 * bcmFieldQualifyFibreChanSrcIdClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcIdClassMsbNibble(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFibreChanSrcIdClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcIdClassMsbNibble_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFibreChanSrcIdClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcIdClassLower(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFibreChanSrcIdClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcIdClassLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFibreChanSrcIdClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcIdClassUpper(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFibreChanSrcIdClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanSrcIdClassUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFibreChanDstIdClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstIdClass(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFibreChanDstIdClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstIdClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for
 * bcmFieldQualifyFibreChanDstIdClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstIdClassMsbNibble(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFibreChanDstIdClassMsbNibble
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstIdClassMsbNibble_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFibreChanDstIdClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstIdClassLower(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFibreChanDstIdClassLower
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstIdClassLower_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyFibreChanDstIdClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstIdClassUpper(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyFibreChanDstIdClassUpper
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_FibreChanDstIdClassUpper_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyTcpClassZero
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TcpClassZero(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyTcpClassZero
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TcpClassZero_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyTosClassZero
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TosClassZero(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyTosClassZero
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TosClassZero_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyTtlClassZero
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TtlClassZero(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyTtlClassZero
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TtlClassZero_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyTcpClassOne
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TcpClassOne(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyTcpClassOne
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TcpClassOne_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyTosClassOne
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TosClassOne(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyTosClassOne
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TosClassOne_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyTtlClassOne
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TtlClassOne(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

/* 
 * Get match criteria for bcmFieldQualifyTtlClassOne
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_TtlClassOne_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_field_redirect_type_e */
typedef enum bcm_field_redirect_type_e {
    bcmFieldRedirectTypeL3 = 0,     /* Redirect based on L3 route flow. */
    bcmFieldRedirectTypeAll = 1,    /* Redirect all IP and non-IP flows. */
    bcmFieldRedirectTypeCount = 3   /* Always Last. Not a usable value. */
} bcm_field_redirect_type_t;

#define BCM_FIELD_REDIRECT_TYPE \
{ \
    "bcmFieldRedirectTypeL3", \
    "bcmFieldRedirectTypeAll"  \
}

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Set match criteria for bcmFieldQualifyHiGigDstMulticast
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDstMulticast(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDstMulticast
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDstMulticast_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigDstMulticastGroupId
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDstMulticastGroupId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t group, 
    bcm_multicast_t mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDstMulticastGroupId
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDstMulticastGroupId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_multicast_t *group, 
    bcm_multicast_t *mask);

/* 
 * Set match criteria for bcmFieldQualifyHigigTrafficClass
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigTrafficClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigTrafficClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigTrafficClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigDstModuleGport
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDstModuleGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDstModuleGport
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDstModuleGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigDstPortGport
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDstPortGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDstPortGport
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDstPortGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigDstModPortGport
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDstModPortGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDstModPortGport
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDstModPortGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigSrcModuleGport
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigSrcModuleGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigSrcModuleGport
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigSrcModuleGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigSrcPortGport
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigSrcPortGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigSrcPortGport
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigSrcPortGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigSrcModPortGport
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigSrcModPortGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigSrcModPortGport
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigSrcModPortGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigLoadBalanceID
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigLoadBalanceID(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigLoadBalanceID
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigLoadBalanceID_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigColor
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigColor(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 color);

/* 
 * Get match criteria for bcmFieldQualifyHiGigColor
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigColor_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *color);

/* 
 * Set match criteria for bcmFieldQualifyHiGigIntCongestionNotification
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigIntCongestionNotification(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigIntCongestionNotification
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigIntCongestionNotification_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigIngressTagged
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigIngressTagged(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigIngressTagged
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigIngressTagged_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigDstTrunk
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDstTrunk(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDstTrunk
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDstTrunk_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigDstTrunkId
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDstTrunkId(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t data, 
    bcm_trunk_t mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDstTrunkId
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDstTrunkId_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t *data, 
    bcm_trunk_t *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigIngressL3SwitchPkt
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigIngressL3SwitchPkt(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigIngressL3SwitchPkt
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigIngressL3SwitchPkt_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigLabel
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigLabel(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigLabel
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigLabel_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigReplicationId
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigReplicationId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigReplicationId
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigReplicationId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigVlan
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigVlan(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigVlan
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigVlan_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigPortFilteringMode
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigPortFilteringMode(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigPortFilteringMode
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigPortFilteringMode_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigSrcTrunk
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigSrcTrunk(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigSrcTrunk
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigSrcTrunk_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigIngressClassificationTag
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigIngressClassificationTag(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigIngressClassificationTag
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigIngressClassificationTag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigEgressMcast
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigEgressMcast(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigEgressMcast
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigEgressMcast_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigVni
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigVni(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigVni
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigVni_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigDstGport
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDstGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDstGport
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDstGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigMulticastIndex
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigMulticastIndex(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigMulticastIndex
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigMulticastIndex_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigVpReplicationId
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigVpReplicationId(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigVpReplicationId
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigVpReplicationId_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigSrcGport
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigSrcGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigSrcGport
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigSrcGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigProtectionSwitchingStatus
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigProtectionSwitchingStatus(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigProtectionSwitchingStatus
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigProtectionSwitchingStatus_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigMirrorToVp
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigMirrorToVp(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigMirrorToVp
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigMirrorToVp_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigDstType
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDstType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDstType
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDstType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigSrcType
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigSrcType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigSrcType
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigSrcType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for
 * bcmFieldQualifyHiGigOffloadEngineClassificationTag
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineClassificationTag(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* 
 * Get match criteria for
 * bcmFieldQualifyHiGigOffloadEngineClassificationTag
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineClassificationTag_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 *data, 
    uint16 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigOffloadEnginePktPriNew
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEnginePktPriNew(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigOffloadEnginePktPriNew
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEnginePktPriNew_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigOffloadEngineDscpNew
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineDscpNew(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigOffloadEngineDscpNew
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineDscpNew_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyLoopBackQueue
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_LoopBackQueue(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyLoopBackQueue
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_LoopBackQueue_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyLoopBackSrcGport
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_LoopBackSrcGport(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifyLoopBackSrcGport
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_LoopBackSrcGport_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

/* 
 * Set match criteria for bcmFieldQualifyPktIsVisible
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_PktIsVisible(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyPktIsVisible
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_PktIsVisible_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyLoopBackCpuMasqueradePktProfile
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_LoopBackCpuMasqueradePktProfile(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyLoopBackCpuMasqueradePktProfile
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_LoopBackCpuMasqueradePktProfile_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyLoopBackColor
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_LoopBackColor(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 color);

/* 
 * Get match criteria for bcmFieldQualifyLoopBackColor
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_LoopBackColor_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *color);

/* 
 * Set match criteria for bcmFieldQualifyLoopBackTrafficClass
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_LoopBackTrafficClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyLoopBackTrafficClass
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_LoopBackTrafficClass_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyLoopBackPacketProcessingPort
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_LoopBackPacketProcessingPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t port_id, 
    bcm_gport_t port_mask);

/* 
 * Get match criteria for bcmFieldQualifyLoopBackPacketProcessingPort
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_LoopBackPacketProcessingPort_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_gport_t *port_id, 
    bcm_gport_t *port_mask);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_field_src_class_mode_e */
typedef enum bcm_field_src_class_mode_e {
    bcmFieldSrcClassModeDefault = 0,    /* XGS Default. */
    bcmFieldSrcClassModeSDN = 1,        /* Suitable for  SDN. */
    bcmFieldSrcClassModeBalanced = 2,   /* Balanced mode. */
    bcmFieldSrcClassModeOverlayNetworks = 3, /* Suitable for Overlay Networks. */
    bcmFieldSrcClassModeCount = 4       /* Always Last. Not a usable value. */
} bcm_field_src_class_mode_t;

#define BCM_FIELD_SRC_CLASS_MODE_TYPE \
{ \
    "bcmFieldSrcClassModeDefault", \
    "bcmFieldSrcClassModeSDN", \
    "bcmFieldSrcClassModeBalanced", \
    "bcmFieldSrcClassModeOverlayNetworks"  \
}

/* Source Class Mode Structure. */
typedef struct bcm_field_src_class_s {
    uint16 src_class_field;     /* Field Lookup stage Class ID value assigned by
                                   bcmFieldActionClassSourceSet action */
    uint16 dst_class_field;     /* Field Stage Lookup Class ID value assigned by
                                   bcmFieldActionClassDestSet action. */
    uint32 udf_class;           /* Class ID value from UDF lookup. */
    uint32 intf_class_port;     /* Class ID value from Port Table. */
    uint32 intf_class_l2;       /* Class ID value from Vlan or Vfi lookup. */
    uint32 intf_class_l3;       /* L3 ingress interface Class ID. */
    uint32 intf_class_vport;    /* Class ID value from Mim / L2Gre / VxLan /
                                   Mpls / Trill / Vlan Translation / Field
                                   Lookup stage source virtual port lookup. */
} bcm_field_src_class_t;

/* Initiaize Field Source Class Mode structure */
extern void bcm_field_src_class_t_init(
    bcm_field_src_class_t *src_class);

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Configures the mixed Source Class ID generation mode for Ingress
 * and Exact Match Search stages
 */
extern int bcm_field_source_class_mode_set(
    int unit, 
    bcm_field_stage_t stage, 
    bcm_pbmp_t pbmp, 
    bcm_field_src_class_mode_t mode);

/* 
 * Gets the mixed source class ID generation mode configured in hardware
 * for Field Ingress
 * and Exact Match Search stages
 */
extern int bcm_field_source_class_mode_get(
    int unit, 
    bcm_field_stage_t stage, 
    bcm_pbmp_t pbmp, 
    bcm_field_src_class_mode_t *mode);

/* To qualify on a port bitmap generated from SGLP. */
extern int bcm_field_qualify_SystemPortBitmap(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t data, 
    bcm_pbmp_t mask);

/* 
 * Get match criteria for SystemPortBitmap qualifier from the field
 * entry.
 */
extern int bcm_field_qualify_SystemPortBitmap_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t *data, 
    bcm_pbmp_t *mask);

/* To qualify on a port bitmap generated from SVP. */
extern int bcm_field_qualify_SourceGportBitmap(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t data, 
    bcm_pbmp_t mask);

/* 
 * Get match criteria for SourceGportBitmap qualifier from the field.
 * entry.
 */
extern int bcm_field_qualify_SourceGportBitmap_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t *data, 
    bcm_pbmp_t *mask);

/* To qualify on a port bitmap generated from device ingress port. */
extern int bcm_field_qualify_DevicePortBitmap(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t data, 
    bcm_pbmp_t mask);

/* 
 * Get match criteria for DevicePortBitmap qualifier from the field
 * entry.
 */
extern int bcm_field_qualify_DevicePortBitmap_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t *data, 
    bcm_pbmp_t *mask);

/* 
 * Set match criteria for bcmFieldQualifyL2PayLoad
 *            qualifier in the field entry.
 */
extern int bcm_field_qualify_L2PayLoad(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 length, 
    const uint8 *data, 
    const uint8 *mask);

/* 
 * Get match criteria for bcmFieldQualifyL2PayLoad
 *            qualifier from the field entry.
 */
extern int bcm_field_qualify_L2PayLoad_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 length, 
    uint8 *data, 
    uint8 *mask);

/* Set match criteria for VLAN STG STP states. */
extern int bcm_field_qualify_StpState(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data);

/* Get match criteria for VLAN STG STP states. */
extern int bcm_field_qualify_StpState_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data);

#endif /* BCM_HIDE_DISPATCHABLE */

/* VLAN STG STP States (for bcm_field_qualify_StgState) */
#define BCM_FIELD_STG_STP_DISABLE   0x1        /* Disabled state */
#define BCM_FIELD_STG_STP_BLOCK     0x2        /* Blocked state */
#define BCM_FIELD_STG_STP_LEARN     0x4        /* Learn state */
#define BCM_FIELD_STG_STP_FORWARD   0x8        /* Forward state */

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Set match criteria for bcmFieldQualifyHiGigMirrorOrSwitchPkt
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigMirrorOrSwitchPkt(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigMirrorOrSwitchPkt
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigMirrorOrSwitchPkt_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigMplsPkt
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigMplsPkt(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigMplsPkt
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigMplsPkt_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigLabelType
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigLabelType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigLabelType
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigLabelType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigForwardingType
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigForwardingType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_HiGigForwardingType_t type);

/* 
 * Get match criteria for bcmFieldQualifyHiGigForwardingType
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigForwardingType_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_HiGigForwardingType_t *type);

/* 
 * Set match criteria for bcmFieldQualifyHiGigDoNotFlags
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigDoNotFlags(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigDoNotFlags
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigDoNotFlags_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigPreserveFlags
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigPreserveFlags(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigPreserveFlags
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigPreserveFlags_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigVpPreserveFlags
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigVpPreserveFlags(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigVpPreserveFlags
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigVpPreserveFlags_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigOffloadEngineDeferredFlags
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineDeferredFlags(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigOffloadEngineDeferredFlags
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineDeferredFlags_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigOffloadEngineVxltStatus
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineVxltStatus(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigOffloadEngineVxltStatus
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineVxltStatus_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigOffloadEngineSrcType
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineSrcType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigOffloadEngineSrcType
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEngineSrcType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigOffloadEnginePreserveDscp
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEnginePreserveDscp(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigOffloadEnginePreserveDscp
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEnginePreserveDscp_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigOffloadEnginePreserveDot1p
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEnginePreserveDot1p(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigOffloadEnginePreserveDot1p
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigOffloadEnginePreserveDot1p_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigExtendedHeaderPresent
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigExtendedHeaderPresent(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigExtendedHeaderPresent
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigExtendedHeaderPresent_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* 
 * Set match criteria for bcmFieldQualifyHiGigVpLagFailoverPacket
 *             qualifier in the field entry.
 */
extern int bcm_field_qualify_HiGigVpLagFailoverPacket(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyHiGigVpLagFailoverPacket
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_HiGigVpLagFailoverPacket_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Set match criteria for bcmFieldQualifyTrunkMemberSourceModuleId
 *                qualifier in the field entry.
 */
extern int bcm_field_qualify_TrunkMemberSourceModuleId(
    int unit, 
    bcm_field_entry_t entry, 
    int data, 
    int mask);

/* 
 * Get match criteria for bcmFieldQualifyTrunkMemberSourceModuleId
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_TrunkMemberSourceModuleId_get(
    int unit, 
    bcm_field_entry_t entry, 
    int *data, 
    int *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

/* SR (Seamless Redundancy) port type */
typedef enum bcm_field_port_sr_type_e {
    bcmFieldPortSRTypeNone = 0,     /* SR not supported on this port */
    bcmFieldPortSRTypeEthernet = 1, /* Ethernet */
    bcmFieldPortSRTypePrp = 2,      /* PRP */
    bcmFieldPortSRTypeHsr = 3,      /* HSR */
    bcmFieldPortSRTypeDot1cb = 4,   /* 802.1CB */
    bcmFieldPortSRTypeCount = 5     /* Always last. Not a usable value. */
} bcm_field_port_sr_type_t;

/* SR (Seamless Redundancy) port mode */
typedef enum bcm_field_sr_port_mode_e {
    bcmFieldSRPortModeDefault = 0,      /* Default mode (custom value 0) */
    bcmFieldSRPortModeInterworkingPrp = 1, /* It's a PRP port in an interworking
                                           box */
    bcmFieldSRPortModeCustom1 = 2,      /* Custom value 1 */
    bcmFieldSRPortModeCustom2 = 3,      /* Custom value 2 */
    bcmFieldSRPortModeCustom3 = 4,      /* Custom value 3 */
    bcmFieldSRPortModeCustom4 = 5,      /* Custom value 4 */
    bcmFieldSRPortModeCustom5 = 6,      /* Custom value 5 */
    bcmFieldSRPortModeCustom6 = 7,      /* Custom value 6 */
    bcmFieldSRPortModeCount = 8         /* Always last. Not a usable value. */
} bcm_field_sr_port_mode_t;

/* SR (Seamless Redundancy) tag type */
typedef enum bcm_field_sr_tag_type_e {
    bcmFieldSRTagTypeNone = 0,      /* No SR tag present in the packet */
    bcmFieldSRTagTypeHsr = 1,       /* HSR */
    bcmFieldSRTagTypePrp = 2,       /* PRP */
    bcmFieldSRTagTypeDot1cb = 3,    /* IEEE 802.1CB */
    bcmFieldSRTagTypeCount = 4      /* Always last. Not a usable value. */
} bcm_field_sr_tag_type_t;

/* SR (Seamless Redundancy) node type */
typedef enum bcm_field_sr_node_type_e {
    bcmFieldSRNodeTypeDan = 0,          /* DAN node */
    bcmFieldSRNodeTypeLinkLocal = 1,    /* Link local MAC address */
    bcmFieldSRNodeTypeSan = 2,          /* SAN node */
    bcmFieldSRNodeTypeSupervision = 3,  /* PRP/HSR/802.1CB Supervision MAC
                                           address */
    bcmFieldSRNodeTypeCount = 4         /* Always last. Not a usable value. */
} bcm_field_sr_node_type_t;

/* SR (Seamless Redundancy) supervision type */
typedef enum bcm_field_sr_supervision_type_e {
    bcmFieldSRSupervisionTypeNone = 0,  /* Not an SR Supervision Packet */
    bcmFieldSRSupervisionTypePrp = 1,   /* PRP Supervision Packet */
    bcmFieldSRSupervisionTypeHsr = 2,   /* HSR Supervision Packet */
    bcmFieldSRSupervisionTypeDot1cb = 3, /* 802.1CB Supervision Packet */
    bcmFieldSRSupervisionTypeCount = 4  /* Always last. Not an usable value. */
} bcm_field_sr_supervision_type_t;

/* Used for IEEE1588Encapsulation value */
typedef enum bcm_field_IEEE1588Encap_e {
    bcmFieldIEEE1588EncapUdp = 0,   /* UDP Encapsulation for IEEE-1588 */
    bcmFieldIEEE1588EncapEth = 1    /* ETH Encapsulation for IEEE-1588 */
} bcm_field_IEEE1588Encap_t;

/* Parameter for bcmFieldQualifySRError */
#define BCM_FIELD_SR_ERROR_UNEXPECTED_PKT   (1 << 0)   /* Unexpected SR tag
                                                          present */
#define BCM_FIELD_SR_ERROR_TAG_ERROR        (1 << 1)   /* Invalid SR tag format */
#define BCM_FIELD_SR_ERROR_RX_ERROR         (1 << 2)   /* Invalid SR flow or
                                                          dropped due to errors */

/* Parameter for bcmFieldActionSRNetIdSource */
#define BCM_FIELD_SR_NET_ID_SOURCE_FORCE_ZERO 0          /* Force NET ID to be 0
                                                          (default) */
#define BCM_FIELD_SR_NET_ID_SOURCE_SRC_PORT 1          /* From source port NET
                                                          ID configuration */
#define BCM_FIELD_SR_NET_ID_SOURCE_DST_PORT 2          /* From destination port
                                                          NET ID configuration */
#define BCM_FIELD_SR_NET_ID_SOURCE_PACKET   3          /* From SR tag of the
                                                          packet */

/* Parameter for bcmFieldActionSRCopyToCpu */
#define BCM_FIELD_SR_COPYTOCPU_ANY          0          /* Copy to CPU regardless
                                                          of SR status */
#define BCM_FIELD_SR_COPYTOCPU_NON_DUPLICATE 1          /* Copy to CPU only if
                                                          it's a non-duplicate
                                                          packet */

/* Parameters for bcmFieldActionSRTagAdd and bcmFieldActionSRTagDelete */
#define BCM_FIELD_SR_TAG_TYPE_RESERVED  0          /* Reserved */
#define BCM_FIELD_SR_TAG_TYPE_HSR       1          /* HSR */
#define BCM_FIELD_SR_TAG_TYPE_PRP       2          /* PRP */
#define BCM_FIELD_SR_TAG_TYPE_DOT1CB    3          /* 802.1CB */

#ifndef BCM_HIDE_DISPATCHABLE

/* Add ports to the specified group */
extern int bcm_field_group_ports_add(
    int unit, 
    bcm_field_group_t group, 
    bcm_pbmp_t pbmp);

/* Remove ports from the specified group */
extern int bcm_field_group_ports_remove(
    int unit, 
    bcm_field_group_t group, 
    bcm_pbmp_t pbmp);

/* Retrieve the bitmap of ports associated with a given field group. */
extern int bcm_field_group_ports_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_pbmp_t *pbmp);

/* To verify whether a group can be created with a given qset and mode. */
extern int bcm_field_group_config_validate(
    int unit, 
    bcm_field_group_config_t *group_config, 
    bcm_field_group_mode_t *mode);

/* 
 * To map a given set of TTL/ToS/TCP values of the packet to another set
 * of TTL/ToS/TCP values respectively.
 */
extern int bcm_field_class_map_set(
    int unit, 
    bcm_field_stage_t stage, 
    bcm_field_qualify_t qual, 
    uint32 num_entries, 
    uint32 *orig_values_array, 
    uint32 *map_values_array);

/* 
 * To get the set of mapped TTL/ToS/TCP values of the packet for a given
 * set of TTL/ToS/TCP values respectively.
 */
extern int bcm_field_class_map_get(
    int unit, 
    bcm_field_stage_t stage, 
    bcm_field_qualify_t qual, 
    uint32 num_entries, 
    uint32 *orig_values_array, 
    uint32 *map_values_array);

#endif /* BCM_HIDE_DISPATCHABLE */

/* 
 * Field Qualifier System Header types (for
 * bcm_field_qualify_SysHdrType).
 */
typedef enum bcm_field_sys_hdr_type_e {
    bcmFieldSysHdrNone = 0,             /* No System Header in the packet. */
    bcmFieldSysHdrSubPort = 1,          /* Subport type System Header. */
    bcmFieldSysHdrLoopbackNot = 2,      /* Not a system header of any Loopback
                                           type. */
    bcmFieldSysHdrLoopbackAny = 3,      /* Loopback system header
                                           (GenericLoopback or CPU Masquerade). */
    bcmFieldSysHdrLoopbackGeneric = 4,  /* System header of Generic Loopback. */
    bcmFieldSysHdrLoopbackCpuMasquerade = 5, /* System header of Loopback CPU
                                           Masquerade. */
    bcmFieldSysHdrHiGigNot = 6,         /* Not a System header of any HiGig
                                           type. */
    bcmFieldSysHdrHiGigAny = 7,         /* System header of any HiGig type. */
    bcmFieldSysHdrHiGigTypePpd0 = 8,    /* HiGig with PPD0. */
    bcmFieldSysHdrHiGigTypePpd2 = 9,    /* HiGig with PPD2. */
    bcmFieldSysHdrHiGigTypePpd0EhType0 = 10, /* HiGig with PPD0 Extension Header Type
                                           0. */
    bcmFieldSysHdrHiGigTypePpd0EhType1 = 11, /* HiGig with PPD0 Extension Header Type
                                           1. */
    bcmFieldSysHdrHiGigTypePpd0EhType2 = 12, /* HiGig with PPD0 Extension Header Type
                                           2. */
    bcmFieldSysHdrHiGigTypePpd2EhType0 = 13, /* HiGig with PPD2 Extension Header Type
                                           0. */
    bcmFieldSysHdrHiGigTypePpd2EhType1 = 14, /* HiGig with PPD2 Extension Header Type
                                           1. */
    bcmFieldSysHdrHiGigTypePpd2EhType2 = 15, /* HiGig with PPD2 Extension Header Type
                                           2. */
    bcmFieldSysHdrHiGigTypeUnknownPpd = 16, /* HiGig with unknown PPD. */
    bcmFieldSysHdrHiGigTypeUnknownPpdWithEh = 17, /* HiGig with unknown PPD Extension
                                           header. */
    bcmFieldSysHdrHiGigTypePpd1 = 18,   /* HiGig with PPD1. */
    bcmFieldSysHdrHiGigTypePpd1WithEh = 19, /* HiGig with PPD1 Extension Header. */
    bcmFieldSysHdrTxTimestamp = 20,     /* Requires BROADCOM_PREMIUM license */
    bcmFieldSysHdrLoopbackRedirected = 21, /* Loopback redirected system header */
    bcmFieldSysHdrLastCount = 22        /* Always Last. Not a usable value. */
} bcm_field_sys_hdr_type_t;

#define BCM_FIELD_SYS_HDR_TYPE_STRINGS \
{ \
    "None", \
    "SubPort", \
    "LoopbackNot", \
    "LoopbackAny", \
    "LoopbackGeneric", \
    "LoopbackCpuMasquerade", \
    "HiGigNot", \
    "HiGigAny", \
    "HiGigTypePpd0", \
    "HiGigTypePpd2", \
    "HiGigTypePpd0EhType0", \
    "HiGigTypePpd0EhType1", \
    "HiGigTypePpd0EhType2", \
    "HiGigTypePpd2EhType0", \
    "HiGigTypePpd2EhType1", \
    "HiGigTypePpd2EhType2", \
    "HiGigTypeUnknownPpd", \
    "HiGigTypeUnknownPpdWithEh", \
    "HiGigTypePpd1", \
    "HiGigTypePpd1WithEh", \
    "TxTimestamp", \
    "LoopbackRedirected"  \
}

/* Parameters for bcmFieldActionMplsLookupEnable */
#define BCM_FIELD_MPLS_ENABLE   1          /* Enabling MPLS support */
#define BCM_FIELD_MPLS_DISABLE  2          /* Disabling MPLS support */

/* Parameters for bcmFieldActionTerminationAllowed */
#define BCM_FIELD_MPLS_TERM_ALLOWED         (1 << 0)   /* Enabling MPLS tunnel
                                                          termination */
#define BCM_FIELD_IPV4_TERM_ALLOWED         (1 << 1)   /* Enabling L3 Ipv4
                                                          termination */
#define BCM_FIELD_IPV6_TERM_ALLOWED         (1 << 2)   /* Enabling L3 Ipv6
                                                          termination */
#define BCM_FIELD_IPV4_MCAST_TERM_ALLOWED   (1 << 3)   /* Enabling L3 Ipv4
                                                          multicast termination */
#define BCM_FIELD_IPV6_MCAST_TERM_ALLOWED   (1 << 4)   /* Enabling L3 Ipv6
                                                          multicast termination */
#define BCM_FIELD_ARP_RARP_TERM_ALLOWED     (1 << 5)   /* Enabling arp/rarp
                                                          termination */

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Configure match criteria for bcmFieldQualifyIpTunnelTtlClassZero
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_IpTunnelTtlClassZero(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t data, 
    bcm_class_t mask);

#endif /* BCM_HIDE_DISPATCHABLE */

/* bcm_field_network_tag_type_e */
typedef enum bcm_field_network_tag_type_e {
    bcmFieldNetworkTagVnTag = 0,    /* Network tag type VNTAG. */
    bcmFieldNetworkTagEtag = 1,     /* Network tag type ETAG. */
    bcmFieldNetworkTagLastCount = 2 /* Always Last. Not a usable value. */
} bcm_field_network_tag_type_t;

#define BCM_FIELD_NETWORK_TAG_TYPE \
{ \
    "VnTag", \
    "Etag"  \
}

/* bcm_field_l2_pkt_type_e */
typedef enum bcm_field_l2_pkt_type_e {
    bcmFieldL2PktTypeEthernet = 0,  /* Ethernet L2 packet type. */
    bcmFieldL2PktTypeSnap = 1,      /* SNAP L2 packet type. */
    bcmFieldL2PktTypeLLC = 2,       /* LLC L2 packet type. */
    bcmFieldL2PktTypeLastCount = 3  /* Always Last. Not a usable value. */
} bcm_field_l2_pkt_type_t;

#define BCM_FIELD_L2_PKT_TYPE \
{ \
    "Ethernet", \
    "Snap", \
    "LLC"  \
}

/* bcm_field_pkt_type_e */
typedef enum bcm_field_pkt_type_e {
    bcmFieldPktTypeMplsNot = 0,         /* Non-MPLS Packet type */
    bcmFieldPktTypeMplsAny = 1,         /* Any MPLS Packet type */
    bcmFieldPktTypeMplsOneLabel = 2,    /* MPLS with one label Packet type */
    bcmFieldPktTypeMplsTwoLabel = 3,    /* MPLS with two labels Packet type */
    bcmFieldPktTypeMplsThreeLabel = 4,  /* MPLS with three labels Packet type */
    bcmFieldPktTypeMplsFourLabel = 5,   /* MPLS with four labels Packet type */
    bcmFieldPktTypeMplsFiveLabel = 6,   /* MPLS with five labels Packet type */
    bcmFieldPktTypeMplsSixLabel = 7,    /* MPLS with six labels Packet type */
    bcmFieldPktTypeMplsSevenLabel = 8,  /* MPLS with seven labels Packet type */
    bcmFieldPktTypeMplsMoreThanSevenLabel = 9, /* MPLS with more than seven labels
                                           Packet type */
    bcmFieldPktTypeFCoENot = 10,        /* Non-FCoE Packet type */
    bcmFieldPktTypeFCoEAny = 11,        /* Any FCoE Packet type */
    bcmFieldPktTypeFCoEVft = 12,        /* FCoE VFT Packet type */
    bcmFieldPktTypeFCoEEncap = 13,      /* FCoE ENCAP Packet type */
    bcmFieldPktTypeFCoEIfr = 14,        /* FCoE IFR Packet type */
    bcmFieldPktTypeFCoEStd = 15,        /* FCoE STD Packet type */
    bcmFieldPktTypeFCoEVftStd = 16,     /* FCoE VFT-STD Packet type */
    bcmFieldPktTypeFCoEEncapStd = 17,   /* FCoE ENCAP-STD Packet type */
    bcmFieldPktTypeFCoEIfrStd = 18,     /* FCoE IFR-STD Packet type */
    bcmFieldPktTypeFCoEFip = 19,        /* FCoE FIP Packet type */
    bcmFieldPktType1588 = 20,           /* 1588 Packet Type */
    bcmFieldPktTypeArp = 21,            /* ARP Packet Type */
    bcmFieldPktTypeRarp = 22,           /* RARP Packet Type */
    bcmFieldPktTypeUnknownEtherType = 23, /* Packet with Unknown EtherType */
    bcmFieldPktTypeMim = 24,            /* MiM Packet type */
    bcmFieldPktTypeOam = 25,            /* OAM Packet Type */
    bcmFieldPktTypeCnm = 26,            /* CNM (congestion notification message)
                                           Packet Type */
    bcmFieldPktTypeNshOverL2 = 27,      /* NSH Over L2 Packet Type */
    bcmFieldPktTypeNshOverMplsOneLabel = 28, /* NSH Over MPLS with one label Packet
                                           type */
    bcmFieldPktTypeNshOverMplsTwoLabel = 29, /* NSH Over MPLS with two label Packet
                                           type */
    bcmFieldPktTypeIp4Not = 30,         /* Non-IPv4 Packet type */
    bcmFieldPktTypeIp4Any = 31,         /* Any IPv4 Packet Type */
    bcmFieldPktTypeIp4Nsh = 32,         /* NSH Over IPv4 Packet Type */
    bcmFieldPktTypeIp4GpeNsh = 33,      /* GPE-NSH Over IPv4 Packet Type */
    bcmFieldPktTypeIp4Gre = 34,         /* GRE over IPv4 Packet Type */
    bcmFieldPktTypeIp4Bfd = 35,         /* BFD Over IPv4 Packet Type */
    bcmFieldPktTypeIp4Vxlan = 36,       /* VXLAN Over IPv4 Packet Type */
    bcmFieldPktTypeIp4Gpe = 37,         /* GPE Over IPv4 Packet Type */
    bcmFieldPktTypeIp4GeneveNsh = 38,   /* GENEVE-NSH Over IPv4 Packet Type */
    bcmFieldPktTypeIp41588Udp = 39,     /* 1588 UDP Packet over IPv4 */
    bcmFieldPktTypeIp4VxlanFlex = 40,   /* VXLAN-Flex Over IPv4 Packet */
    bcmFieldPktTypeIp4IPinIP = 41,      /* IPv4 IP-in-IP Packet */
    bcmFieldPktTypeIp4IPinGre = 42,     /* IP GRE Ipv4 Packet */
    bcmFieldPktTypeIp4Nvgre = 43,       /* NVGRE IPv4 Packet */
    bcmFieldPktTypeIp4Geneve = 44,      /* IPv4-GENEVE Packet */
    bcmFieldPktTypeIp4Gue = 45,         /* IPv4-GUE Packet */
    bcmFieldPktTypeIp4Tcp = 46,         /* IPv4-TCP Packet */
    bcmFieldPktTypeIp4Udp = 47,         /* IPv4-UDF Packet */
    bcmFieldPktTypeIp4Icmp = 48,        /* IPv4-ICMP Packet */
    bcmFieldPktTypeIp4Igmp = 49,        /* IPv4-IGMP Packet */
    bcmFieldPktTypeIp4IpWithExtra4Bytes = 50, /* IPv4 with Extra four bytes Packet */
    bcmFieldPktTypeIp4Sctp = 51,        /* IPv4 SCTP Packet */
    bcmFieldPktTypeIp4MplsInIpAny = 52, /* Any MPLS in IPv4 Packet */
    bcmFieldPktTypeIp4MplsInIpWithOneLabel = 53, /* MPLS with one label in IPv4 Packet */
    bcmFieldPktTypeIp4MplsInIpWithTwoLabel = 54, /* MPLS with two label in IPv4 Packet */
    bcmFieldPktTypeIp4MplsInIpWithThreeLabel = 55, /* MPLS with three label in IPv4 Packet */
    bcmFieldPktTypeIp4MplsInIpWithFourLabel = 56, /* MPLS with four label in IPv4 Packet */
    bcmFieldPktTypeIp4MplsInIpWithAnyCw = 57, /* Any MPLS with CW label in IPv4 Packet */
    bcmFieldPktTypeIp4MplsInIpWithOneLabelAndCw = 58, /* MPLS with one label CW in IPv4 Packet */
    bcmFieldPktTypeIp4MplsInIpWithTwoLabelAndCw = 59, /* MPLS with two label CW in IPv4 Packet */
    bcmFieldPktTypeIp4MplsInIpWithThreeLabelAndCw = 60, /* MPLS with three label CW in IPv4
                                           Packet */
    bcmFieldPktTypeIp4MplsInIpWithFourLabelAndCw = 61, /* MPLS with four label CW in IPv4
                                           Packet */
    bcmFieldPktTypeIp6Not = 62,         /* Non-IPv6 Packet */
    bcmFieldPktTypeIp6Any = 63,         /* Any IPv6 Packet */
    bcmFieldPktTypeIp6Nsh = 64,         /* NSH Over IPv6 Packet */
    bcmFieldPktTypeIp6GpeNsh = 65,      /* GPE-NSH Over IPv6 Packet */
    bcmFieldPktTypeIp6Gre = 66,         /* GRE Over IPv6 Packet */
    bcmFieldPktTypeIp6Bfd = 67,         /* BFD Over IPv6 Packet */
    bcmFieldPktTypeIp6Vxlan = 68,       /* VXLAN Over IPv6 Packet */
    bcmFieldPktTypeIp6Gpe = 69,         /* GPE Over IPv6 Packet */
    bcmFieldPktTypeIp6GeneveNsh = 70,   /* GENEVE-NSH Over IPv6 Packet */
    bcmFieldPktTypeIp61588Udp = 71,     /* 1588 UDF Packet over IPv6 */
    bcmFieldPktTypeIp6VxlanFlex = 72,   /* VXLAN-Flex Over IPv6 Packet */
    bcmFieldPktTypeIp6IPinIP = 73,      /* IPv6 IP-IN-IP Packet */
    bcmFieldPktTypeIp6IPinGre = 74,     /* IPv6 IP in GRE */
    bcmFieldPktTypeIp6Nvgre = 75,       /* IPv6 NVGRE Packet */
    bcmFieldPktTypeIp6Geneve = 76,      /* IPv6 GENEVE Packet */
    bcmFieldPktTypeIp6Gue = 77,         /* IPv6 GUE Packet */
    bcmFieldPktTypeIp6Tcp = 78,         /* IPv6 TCP Packet */
    bcmFieldPktTypeIp6Udp = 79,         /* IPv6 UDF Packet */
    bcmFieldPktTypeIp6Icmp = 80,        /* IPv6 ICMP Packet */
    bcmFieldPktTypeIp6Igmp = 81,        /* IPv6 IGMP Packet */
    bcmFieldPktTypeIp6IpWithExtra4Bytes = 82, /* IPv6 with Extra four Bytes Packet */
    bcmFieldPktTypeIp6Sctp = 83,        /* IPv6 SCTP Packet */
    bcmFieldPktTypeIp6MplsInIpAny = 84, /* Any MPLS in IPv6 Packet */
    bcmFieldPktTypeIp6MplsInIpWithOneLabel = 85, /* MPLS with one label in IPv6 Packet */
    bcmFieldPktTypeIp6MplsInIpWithTwoLabel = 86, /* MPLS with two labels in IPv6 Packet */
    bcmFieldPktTypeIp6MplsInIpWithThreeLabel = 87, /* MPLS with three labels in IPv6 Packet */
    bcmFieldPktTypeIp6MplsInIpWithFourLabel = 88, /* MPLS with four labels in IPv6 Packet */
    bcmFieldPktTypeIp6MplsInIpWithAnyCw = 89, /* Any MPLS with CW Label in IPv6 Packet */
    bcmFieldPktTypeIp6MplsInIpWithOneLabelAndCw = 90, /* MPLS with one label CW in IPv6 Packet */
    bcmFieldPktTypeIp6MplsInIpWithTwoLabelAndCw = 91, /* MPLS with two label CW in IPv6 Packet */
    bcmFieldPktTypeIp6MplsInIpWithThreeLabelAndCw = 92, /* MPLS with three label CW in IPv6
                                           Packet */
    bcmFieldPktTypeIp6MplsInIpWithFourLabelAndCw = 93, /* MPLS with four labels in IPv6 Packet */
    bcmFieldPktTypeNshOverMplsThreeLabel = 94, /* NSH Over MPLS with three labels
                                           Packet */
    bcmFieldPktTypeIpv4UdpINT = 95,     /* INT (Inband-Telemetry) packet type
                                           over IPv4-UDP. */
    bcmFieldPktTypeIpv6UdpINT = 96,     /* INT (Inband-Telemetry) packet type
                                           over IPv6-UDP. */
    bcmFieldPktTypeUdpINT = 97,         /* INT (Inband-Telemtry) Packet over any
                                           IP-UDP packet */
    bcmFieldPktTypeIpv4IOAM = 98,       /* IPv4 IOAM (Inband-OAM) Packet */
    bcmFieldPktTypeIpv6IOAM = 99,       /* IPv6 IOAM (Inband-OAM) Packet */
    bcmFieldPktTypeIOAM = 100,          /* IOAM (Inband-OAM) Packet over any IP
                                           Packet */
    bcmFieldPktTypeIpv4TcpINT = 101,    /* INT (Inband-Telemetry) packet type
                                           over IPv4-TCP. */
    bcmFieldPktTypeIpv6TcpINT = 102,    /* INT (Inband-Telemetry) packet type
                                           over IPv6-TCP. */
    bcmFieldPktTypeTcpINT = 103,        /* INT (Inband-Telemtry) Packet over
                                           IP-TCP packet */
    bcmFieldPktTypeLastCount = 104      /* Not in use - Last Count */
} bcm_field_pkt_type_t;

#define BCM_FIELD_PKT_TYPE \
{ \
    "MplsNot", \
    "MplsAny", \
    "MplsOneLabel", \
    "MplsTwoLabel", \
    "MplsThreeLabel", \
    "MplsFourLabel", \
    "MplsFiveLabel", \
    "MplsSixLabel", \
    "MplsSevenLabel", \
    "MplsMoreThanSevenLabel", \
    "FCoENot", \
    "FCoEAny", \
    "FCoEVft", \
    "FCoEEncap", \
    "FCoEIfr", \
    "FCoEStd", \
    "FCoEVftStd", \
    "FCoEEncapStd", \
    "FCoEIfrStd", \
    "FCoEFip", \
    "1588", \
    "Arp", \
    "Rarp", \
    "UnknownEtherType", \
    "Mim", \
    "Oam", \
    "Cnm", \
    "NshOverL2", \
    "NshOverMplsOneLabel", \
    "NshOverMplsTwoLabel", \
    "Ip4Not", \
    "Ip4Any", \
    "Ip4Nsh", \
    "Ip4GpeNsh", \
    "Ip4Gre", \
    "Ip4Bfd", \
    "Ip4Vxlan", \
    "Ip4Gpe", \
    "Ip4GeneveNsh", \
    "Ip41588Udp", \
    "Ip4VxlanFlex", \
    "Ip4IPinIP", \
    "Ip4IPinGre", \
    "Ip4Nvgre", \
    "Ip4Geneve", \
    "Ip4Gue", \
    "Ip4Tcp", \
    "Ip4Udp", \
    "Ip4Icmp", \
    "Ip4Igmp", \
    "Ip4IpWithExtra4Bytes", \
    "Ip4Sctp", \
    "Ip4MplsInIpAny", \
    "Ip4MplsInIpWithOneLabel", \
    "Ip4MplsInIpWithTwoLabel", \
    "Ip4MplsInIpWithThreeLabel", \
    "Ip4MplsInIpWithFourLabel", \
    "Ip4MplsInIpWithAnyCw", \
    "Ip4MplsInIpWithOneLabelAndCw", \
    "Ip4MplsInIpWithTwoLabelAndCw", \
    "Ip4MplsInIpWithThreeLabelAndCw", \
    "Ip4MplsInIpWithFourLabelAndCw", \
    "Ip6Not", \
    "Ip6Any", \
    "Ip6Nsh", \
    "Ip6GpeNsh", \
    "Ip6Gre", \
    "Ip6Bfd", \
    "Ip6Vxlan", \
    "Ip6Gpe", \
    "Ip6GeneveNsh", \
    "Ip61588Udp", \
    "Ip6VxlanFlex", \
    "Ip6IPinIP", \
    "Ip6IPinGre", \
    "Ip6Nvgre", \
    "Ip6Geneve", \
    "Ip6Gue", \
    "Ip6Tcp", \
    "Ip6Udp", \
    "Ip6Icmp", \
    "Ip6Igmp", \
    "Ip6IpWithExtra4Bytes", \
    "Ip6Sctp", \
    "Ip6MplsInIpAny", \
    "Ip6MplsInIpWithOneLabel", \
    "Ip6MplsInIpWithTwoLabel", \
    "Ip6MplsInIpWithThreeLabel", \
    "Ip6MplsInIpWithFourLabel", \
    "Ip6MplsInIpWithAnyCw", \
    "Ip6MplsInIpWithOneLabelAndCw", \
    "Ip6MplsInIpWithTwoLabelAndCw", \
    "Ip6MplsInIpWithThreeLabelAndCw", \
    "Ip6MplsInIpWithFourLabelAndCw", \
    "NshOverMplsThreeLabel", \
    "Ipv4UdpINT", \
    "Ipv6UdpINT", \
    "UdpINT", \
    "Ipv4IOAM", \
    "Ipv6IOAM", \
    "IOAM", \
    "Ipv4TcpINT", \
    "Ipv6TcpINT", \
    "TcpINT"  \
}

/* bcm_field_ip_option_hdr_type_e */
typedef enum bcm_field_ip_option_hdr_type_e {
    bcmFieldIpOptionHdrTypeAH = 0,      /* Authentication Header type */
    bcmFieldIpOptionHdrTypeESP = 1,     /* Encapsulating Security Payload type */
    bcmFieldIpOptionHdrTypeWESP = 2,    /* Wrapped ESP for traffic visibility
                                           type */
    bcmFieldIpOptionHdrTypeAHESP = 3,   /* Authentication Header and
                                           Encapsulating Security Payload type */
    bcmFieldIpOptionHdrTypeAHWESP = 4,  /* Authentication Header and Wrapped ESP
                                           type */
    bcmFieldIpOptionHdrTypeGeneric = 5, /* Generic type */
    bcmFieldIpOptionHdrTypeFrag = 6,    /* Fragment type */
    bcmFieldIpOptionHdrTypeGenericGeneric = 7, /* Generic over Generic type */
    bcmFieldIpOptionHdrTypeGenericFrag = 8, /* Generic and Fragment type */
    bcmFieldIpOptionHdrTypeGenericAH = 9, /* Generic and AH type */
    bcmFieldIpOptionHdrTypeGenericESP = 10, /* Generic and ESP type */
    bcmFieldIpOptionHdrTypeGenericWESP = 11, /* Generic and WESP type */
    bcmFieldIpOptionHdrTypeFragAH = 12, /* Fragment and AH type */
    bcmFieldIpOptionHdrTypeFragESP = 13, /* Fragment and ESP type */
    bcmFieldIpOptionHdrTypeFragWESP = 14, /* Fragment and WESP type */
    bcmFieldIpOptionHdrTypeLastCount = 15 /* Last count */
} bcm_field_ip_option_hdr_type_t;

#define BCM_FIELD_IP_OPTION_HDR_TYPE \
{ \
    "AH", \
    "ESP", \
    "WESP", \
    "AHESP", \
    "AHWESP", \
    "Generic", \
    "Frag", \
    "GenericGeneric", \
    "GenericFrag", \
    "GenericAH", \
    "GenericESP", \
    "GenericWESP", \
    "FragAH", \
    "FragESP", \
    "FragWESP"  \
}

/* bcm_field_higig_proxy_tunnel_type_e */
typedef enum bcm_field_higig_proxy_tunnel_type_e {
    bcmFieldHiGigProxyTunnelTypeAny = 0, /* HiGig Proxy Tunnel Any. */
    bcmFieldHiGigProxyTunnelTypeVxlan = 1, /* HiGig Proxy on VXLAN tunnel. */
    bcmFieldHiGigProxyTunnelTypeL2Gre = 2, /* HiGig Proxy on L2GRE tunnel. */
    bcmFieldHiGigProxyTunnelTypeMim = 3, /* HiGig Proxy on MIM tunnel. */
    bcmFieldHiGigProxyTunnelTypeLastCount = 4 /* Always Last. Not a usable value. */
} bcm_field_higig_proxy_tunnel_type_t;

#define BCM_FIELD_HIGIG_PROXY_TUNNEL_TYPE \
{ \
    "Any", \
    "Vxlan", \
    "L2Gre", \
    "Mim"  \
}

/* bcm_field_interface_class_l2_type_e */
typedef enum bcm_field_interface_class_l2_type_e {
    bcmFieldInterfaceClassL2TypeVlan = 0, /* Class ID is from VLAN. */
    bcmFieldInterfaceClassL2TypeVfi = 1, /* Class ID is from VFI. */
    bcmFieldInterfaceClassL2TypeLastCount = 2 /* Always Last. Not a usable value. */
} bcm_field_interface_class_l2_type_t;

#define BCM_FIELD_INTERFACE_CLASS_L2_TYPE \
{ \
    "Vlan", \
    "Vfi"  \
}

/* bcm_field_int_pkt_type_e */
typedef enum bcm_field_int_pkt_type_e {
    bcmFieldIntPktTypeProbeReply = 0,   /* INT Probe Reply. */
    bcmFieldIntPktTypeProbeRequest = 1, /* INT Probe Request. */
    bcmFieldIntPktTypeLastCount = 2     /* Always Last. Not a usable value. */
} bcm_field_int_pkt_type_t;

#define BCM_FIELD_INT_PKT_TYPE \
{ \
    "ProbeReply", \
    "ProbeRequest"  \
}

/* Field Qualifier TunnelSubType (for bcm_field_qualify_TunnelSubType). */
typedef enum bcm_field_TunnelSubType_e {
    bcmFieldTunnelSubTypeNshOverGpeWithL3Pyld = 0, /* NSH with L3 Payload Tunnel in GPE. */
    bcmFieldTunnelSubTypeNshOverL2WithL3Pyld = 1, /* NSH with L3 Payload Tunnel in L2 */
    bcmFieldTunnelSubTypeNshOverMplsWithL3Pyld = 2, /* NSH with L3 Payload Tunnel in MPLS */
    bcmFieldTunnelSubTypeCount = 3      /* Always Last. Not a usable value. */
} bcm_field_TunnelSubType_t;

#define BCM_FIELD_TUNNELSUBTYPE_STRINGS \
{ \
    "NshOverGpeWithL3Pyld", \
    "NshOverL2WithL3Pyld", \
    "NshOverMplsWithL3Pyld"  \
}

/* PMF pass. */
typedef enum bcm_field_pmf_pass_e {
    bcmFieldPmfPass0 = 0,       /* Pass-0 */
    bcmFieldPmfPass1 = 1,       /* Pass-1 */
    bcmFieldPmfPassCount = 2    /* nof pass. */
} bcm_field_pmf_pass_t;

/* 
 * Indicates the maximum number of context selection qualfiers which can
 * be defined per single preselection entry
 */
#define BCM_FIELD_MAX_NOF_CS_QUALIFIERS (32)       

/* Preselector identifier structure. */
typedef struct bcm_field_presel_entry_id_s {
    bcm_field_presel_t presel_id;   /* ID of the preselector entry. */
    bcm_field_stage_t stage;        /* Preselection stage */
} bcm_field_presel_entry_id_t;

/* Preselector qualifier data structure. */
typedef struct bcm_field_presel_qualify_data_s {
    bcm_field_qualify_t qual_type;  /* Type of the qualifier. */
    int qual_arg;                   /* Qualifier argument */
    uint32 qual_value;              /* Value of the qualifier */
    uint32 qual_mask;               /* Mask of the qualifier */
} bcm_field_presel_qualify_data_t;

/* Preselector qualifier data structure. */
typedef struct bcm_field_presel_entry_data_s {
    uint8 entry_valid;                  /* If set, the whole preselection entry
                                           is set as valid. */
    bcm_field_context_t context_id;     /* ID of the PMF context. */
    uint32 nof_qualifiers;              /* Number of used qualifiers for CS. */
    bcm_field_presel_qualify_data_t qual_data[BCM_FIELD_MAX_NOF_CS_QUALIFIERS]; /* Array of data of the used qualifiers. */
} bcm_field_presel_entry_data_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* 
 * Get match criteria for bcmFieldQualifyIpTunnelTtlClassZero
 *             qualifier from the field entry.
 */
extern int bcm_field_qualify_IpTunnelTtlClassZero_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_class_t *data, 
    bcm_class_t *mask);

/* 
 * Configure match criteria for bcmFieldQualifyIpTunnelTtl
 *                 qualifier from the field entry.
 */
extern int bcm_field_qualify_IpTunnelTtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyIpTunnelTtl
 *                 qualifier from the field entry.
 */
extern int bcm_field_qualify_IpTunnelTtl_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

#define BCM_FIELD_NUMBER_OF_QUALS_PER_GROUP (32)       /* Default constant for
                                                          number of qualifiers
                                                          per field group. */
#define BCM_FIELD_NUMBER_OF_ACTIONS_PER_GROUP (32)       /* Default constant for
                                                          number of actions per
                                                          field group. */
#define BCM_FIELD_NUMBER_OF_TCAM_BANKS      (16)       /* Default constant for
                                                          number of TCAM banks. */

/* Field Group Types. */
typedef enum bcm_field_group_type_e {
    bcmFieldGroupTypeTcam = 0,          /* TCAM Lookup group (Default). */
    bcmFieldGroupTypeDirectTcam = 1,    /* Direct group (no TCAM lookup). */
    bcmFieldGroupTypeDirectMdb = 2,     /* Direct group (MDB Interface). */
    bcmFieldGroupTypeDirectExtraction = 3, /* Direct extraction (instead of TCAM)
                                           group. */
    bcmFieldGroupTypeExactMatch = 4,    /* Exact match group - partial masking
                                           is not supported. */
    bcmFieldGroupTypeStateTable = 5,    /* State Table group. */
    bcmFieldGroupTypeExternalTcam = 6,  /* External TCAM lookup group. */
    bcmFieldGroupTypeConst = 7,         /* Define Field Group with zero key
                                           size. */
    bcmFieldGroupTypeCount = 8          /* Always last. Not a usable value. */
} bcm_field_group_type_t;

#define BCM_FIELD_GROUP_TYPE_STRINGS \
{ \
    "Tcam", \
    "DirectTcam", \
    "DirectMdb", \
    "DirectExtraction", \
    "ExactMatch", \
    "StateTable", \
    "ExternalTcam", \
    "Const"  \
}

/* Bank allocation modes. */
typedef enum bcm_field_tcam_bank_allocation_mode_e {
    bcmFieldTcamBankAllocationModeInvalid = -1, /* Invalid. */
    bcmFieldTcamBankAllocationModeAuto = 0, /*  Auto TCAM bank allocation mode:
                                           Starts with no banks and allocates
                                           banks on demand. */
    bcmFieldTcamBankAllocationModeSelect = 1, /*  Select TCAM bank allocation mode:
                                           For TCAM handlers with this type of
                                           allocation mode, user may supply an
                                           additional array at creation time for
                                           specific bank ids to be allocated for
                                           the handler. */
    bcmFieldTcamBankAllocationModeCount = 2 /* Always last. Not a usable value. */
} bcm_field_tcam_bank_allocation_mode_t;

#define BCM_FIELD_TCAM_BANK_ALLOCATION_MODE_STRINGS \
{ \
    "Auto", \
    "Select"  \
}

/* 
 * This structure holds the advanced parameters for TCAM type FG in
 * bcm_field_group_add() function.
 */
typedef struct bcm_field_group_tcam_info_s {
    int nof_tcam_banks;                 /* Number of TCAM banks to reserve for
                                           the given field group. */
    int tcam_bank_ids[BCM_FIELD_NUMBER_OF_TCAM_BANKS]; /* The list of TCAM bank IDs to reserve
                                           for the field group to be created.
                                           This list is only valid for TCAM
                                           field groups. */
    bcm_field_tcam_bank_allocation_mode_t bank_allocation_mode; /* Bank allocation mode, see
                                           bcm_field_tcam_bank_allocation_mode_e
                                           in field.h. */
} bcm_field_group_tcam_info_t;

/* 
 * This structure holds the advanced parameters for TCAM type FG in
 * bcm_field_group_add() function.
 */
typedef struct bcm_field_group_external_info_s {
    uint8 capacity_valid;           /* True when capacity has a meaningful info,
                                       otherwise default values are set. */
    uint32 capacity;                /* Set the minimum capacity reserved in
                                       EXTERNAL TCAM. Used if capacity_valid is
                                       true. */
    uint8 algorithmic_mode_valid;   /* Whether to set the property ALGORITHMIC
                                       for algorithmic mode */
    uint32 algorithmic_mode;        /* Set the algorithmic mode (algorithmic
                                       property) to this value. Used if
                                       algorithmic_mode_valid is true. */
} bcm_field_group_external_info_t;

/* Maximum length for a short name. */
#define BCM_FIELD_MAX_SHORT_NAME_LEN    (20)       

/* 
 * This structure holds the basic parameters for bcm_field_group_add()
 * function.
 */
typedef struct bcm_field_group_info_s {
    bcm_field_stage_t stage;            /* Field stage, for which stage the
                                           Field Group was created. */
    bcm_field_group_type_t fg_type;     /* Field Group type: The database may
                                           be: TCAM, Direct Table,Direct
                                           Extraction, Exact Match, Hashing,
                                           StateTable or MDB. */
    int nof_quals;                      /* Number of valid qualifiers in the
                                           Field Group. */
    bcm_field_qualify_t qual_types[BCM_FIELD_NUMBER_OF_QUALS_PER_GROUP]; /* BCM level qualifier look at
                                           bcm_field_qualify_t for more info.
                                           Number of meaningful elements on this
                                           array according to nof_quals. */
    uint8 qual_is_ranged[BCM_FIELD_NUMBER_OF_QUALS_PER_GROUP]; /* If set, indicates that the
                                           corresponding qualifier is expected
                                           to accept a range of values for a
                                           single entry. */
    int nof_actions;                    /* Number of valid actions in the action
                                           set of field group. */
    bcm_field_action_t action_types[BCM_FIELD_NUMBER_OF_ACTIONS_PER_GROUP]; /* The list of actions to be applied to
                                           matching entries for this action set. */
    int action_with_valid_bit[BCM_FIELD_NUMBER_OF_ACTIONS_PER_GROUP]; /* If set, then additional bit is added
                                           in payload to indicate weather this
                                           action is valid. */
    bcm_field_group_tcam_info_t tcam_info; /* Advanced parameters for TCAM field
                                           group */
    bcm_field_group_external_info_t external_info; /* Advanced parameters for external TCAM
                                           field group */
    uint8 name[BCM_FIELD_MAX_SHORT_NAME_LEN]; /* String for application use. */
    int *ext_acl_db;                    /* Pointer to ext_acl_db. */
} bcm_field_group_info_t;

/* 
 * Parameter flags form
 * bcmQualifyPktDstAddrType/bcmQualifyPktInnerDstAddrType.
 */
#define BCM_FIELD_PKT_DST_ADDR_TYPE_UCAST_MAC (1 << 0)   /* Indicates the packet
                                                          has unicast
                                                          destination mac
                                                          address. */
#define BCM_FIELD_PKT_DST_ADDR_TYPE_MCAST_MAC (1 << 1)   /* Indicates the packet
                                                          has multicast
                                                          destination mac
                                                          address. */
#define BCM_FIELD_PKT_DST_ADDR_TYPE_BCAST_MAC (1 << 2)   /* Indicates the packet
                                                          has broadcast
                                                          destination mac
                                                          address. */
#define BCM_FIELD_PKT_DST_ADDR_TYPE_UCAST_IP (1 << 3)   /* Indicates the packet
                                                          has unicast
                                                          destination ip
                                                          address. */
#define BCM_FIELD_PKT_DST_ADDR_TYPE_MCAST_IP (1 << 4)   /* Indicates the packet
                                                          has multicast
                                                          destination ip
                                                          address. */
#define BCM_FIELD_PKT_DST_ADDR_TYPE_BCAST_IP (1 << 5)   /* Indicates the packet
                                                          has broadcast
                                                          destination ip
                                                          address. */

/* Invalid constant for Context ID, used in initialization. */
#define BCM_FIELD_CONTEXT_ID_INVALID    ((bcm_field_context_t) (-1)) 

/* 
 * Default context is created in case when TCAM Context Selection is miss
 * and context 0 is chosen by defualt.
 * If user don't want to configure preselectors he can use default
 * context for bcm_field_group_context_attach().
 * The default context is created on init for all stages.
 */
#define BCM_FIELD_CONTEXT_ID_DEFAULT    (0)        

/* Field Context Compare Types. */
typedef enum bcm_field_context_compare_type_e {
    bcmFieldContextCompareTypeNone = 0, /* No special mode, used for
                                           initialization. */
    bcmFieldContextCompareTypeSingle = 1, /* Single-key compare. */
    bcmFieldContextCompareTypeDouble = 2, /* Double-key compare. */
    bcmFieldContextCompareTypeCount = 3 /* Always last. Not a usable value. */
} bcm_field_context_compare_type_t;

/* 
 * This structure holds the context compare mode information for
 * bcm_field_context_create function.
 */
typedef struct bcm_field_context_compare_modes_s {
    bcm_field_context_compare_type_t compare_1_mode; /* Specifies compare type for the first
                                           pair. */
    bcm_field_context_compare_type_t compare_2_mode; /* Specifies compare type for the second
                                           pair. */
} bcm_field_context_compare_modes_t;

/* 
 * This structure holds the basic parameters for
 * bcm_dnx_field_context_create() function.
 */
typedef struct bcm_field_context_info_s {
    bcm_field_context_compare_modes_t context_compare_modes; /* Defines which compare types are set
                                           for this context, for each compare
                                           operation (compare1, compare2). */
    bcm_field_context_t cascaded_from;  /* The context-Id which the current
                                           context is cascaded from (relevant in
                                           iPMF2) stage. */
    uint8 hashing_enabled;              /* Enable in case a hash key is set on
                                           this context. */
    uint8 state_table_enabled;          /* Enabling state table for current
                                           context */
    uint8 name[BCM_FIELD_MAX_SHORT_NAME_LEN]; /* String for application use. */
} bcm_field_context_info_t;

/* 
 * General Field optional flags. Used if the user wants to specify which
 * ID should be allocated.
 */
#define BCM_FIELD_FLAG_WITH_ID  (1 << 0)   

/* 
 * Used if we want to replace/update existing entity. For example: update
 * an existing entry - change its values.
 */
#define BCM_FIELD_FLAG_UPDATE   (1 << 1)   

/* Used if returned result is aligned to MSB. */
#define BCM_FIELD_FLAG_MSB_RESULT_ALIGN (1 << 2)   

/* Used if returned result is aligned to LSB. */
#define BCM_FIELD_FLAG_LSB_RESULT_ALIGN (1 << 3)   

/* 
 * This flag enables external ACL counters for all entries in the
 * external ACL DB.
 */
#define BCM_FIELD_FLAG_EXTERNAL_COUNTERS    (1 << 4)   

/* 
 * This flag aligns the MSB of the field group to a 32 bit grnularity
 * (i.e. the MSB of the field group will be placed at 31, 63, 127, etc.
 */
#define BCM_FIELD_FLAG_32_RESULT_MSB_ALIGN  (1 << 5)   

/* General invalid constant for Field */
#define BCM_FIELD_INVALID       0xFFFF     

/* 
 * General invalid constant for specific Field IDs, like presel_id,
 * context_id. Used in initialization.
 */
#define BCM_FIELD_ID_INVALID    (-1)       

/* Field Qualifier Input Types, indicate base layer type for qualifier. */
typedef enum bcm_field_input_types_e {
    bcmFieldInputTypeInvalid = -1,      /* Invalid base layer. */
    bcmFieldInputTypeLayerFwd = 0,      /* Extracted from Layer info ,FWD layer
                                           index. */
    bcmFieldInputTypeLayerAbsolute = 1, /* Extracted from Layer info ,Absolute
                                           layer index . */
    bcmFieldInputTypeMetaData = 2,      /* Extracted from MetaData. */
    bcmFieldInputTypeLayerRecordsFwd = 3, /* Extracted from LR ,FWD layer index . */
    bcmFieldInputTypeLayerRecordsAbsolute = 4, /* Extracted from LR ,Absolute layer
                                           index. */
    bcmFieldInputTypeExternal = 5,      /* Extracted from 'Cascaded From' field
                                           group result from the external field
                                           stage. */
    bcmFieldInputTypeCascaded = 6,      /* Extracted from 'Cascaded From' field
                                           group result. */
    bcmFieldInputTypeConst = 7,         /* Constant value. */
    bcmFieldInputTypeCount = 8          /* Always last. Number of Base Types. */
} bcm_field_input_types_t;

#define BCM_FIELD_INPUT_TYPES_STRINGS \
{ \
    "LayerFwd", \
    "LayerAbsolute", \
    "MetaData", \
    "LayerRecordsFwd", \
    "LayerRecordsAbsolute", \
    "External", \
    "Cascaded", \
    "Const"  \
}

/* 
 * Include information on each action that configured in
 * bcm_field_group_context_attach API.
 */
typedef struct bcm_field_action_attach_info_s {
    bcm_field_action_priority_t priority; /* Indicate the priority per action that
                                           was configured for specific Field
                                           Group the lower the number the higher
                                           the priority of the actions the
                                           higher FES/FEM id will be allocated */
    uint8 valid_bit_polarity;           /* Indicate the polarity per action that
                                           was configured for specific Field
                                           Group, the meaning of the
                                           use_valid_bit. Indicates whether
                                           condition bit can be based on 0 or 1.
                                           If there is a valid bit
                                           (use_valid_bit=1),
                                           the action will happen only if the
                                           valid bit is equal to the polarity
                                           bit. */
} bcm_field_action_attach_info_t;

/* 
 * This struct will indicate how to extract the qualifier from the PBUS,
 * (MetaData/LR/Layer).
 */
typedef struct bcm_field_qualify_attach_info_s {
    bcm_field_input_types_t input_type; /* The base of qualifier indicate from
                                           which part of the PBUS the info is
                                           taken, relevant for all type of
                                           qualifiers.
                                           bcmFieldInputTypeLayerFwd  - Takes
                                           data from a layer in the header,
                                           using the forwarding layer
                                           information.
                                           bcmFieldInputTypeLayerAbsolute -
                                           Takes data from a layer in the
                                           header, ignoring forwarding layer
                                           information.
                                           bcmFieldInputTypeMetaData - Takes
                                           data from the Metadata.
                                           bcmFieldInputTypeLayerRecordsFwd  - 
                                           Takes data about a layer in the
                                           header (layer record), using the
                                           forwarding layer information.
                                           bcmFieldInputTypeLayerRecordsAbsolute
                                           - Takes data about a layer in the
                                           header (layer record), ignoring the
                                           forwarding layer information.
                                           bcmFieldInputTypeExternal - Takes
                                           data from the result of an external
                                           TCAM field group from an earlier
                                           stage, using cascading.
                                           bcmFieldInputTypeCascaded - Takes
                                           data from the result of a field group
                                           from an earlier PMF stage, using
                                           cascading.
                                           bcmFieldInputTypeConst - Writes a
                                           constant value. */
    int input_arg;                      /* input arg has different meaning per
                                           input type as follows:
                                           bcmFieldInputTypeLayerFwd  - how many
                                           layer to increment from the
                                           forwarding layer (i.e. FWD+input_arg)
                                           bcmFieldInputTypeLayerAbsolute - how
                                           many layer to increment from the
                                           absolute layer (i.e. 0+input_arg)
                                           bcmFieldInputTypeMetaData - Has no
                                           meaning
                                           bcmFieldInputTypeLayerRecordsFwd  - 
                                           how many layer to increment from the
                                           forwarding layer (i.e. FWD+input_arg)
                                           bcmFieldInputTypeLayerRecordsAbsolute
                                           - how many layer to increment from
                                           the absolute layer (i.e. 0+input_arg)
                                           bcmFieldInputTypeExternal - Has no
                                           meaning
                                           bcmFieldInputTypeCascaded - Field
                                           group Id of the 'Cascaded from'
                                           result
                                           bcmFieldInputTypeConst - A 32 bit
                                           constant */
    int offset;                         /* 1) This filed is bit resolution
                                           2) In case the qualifier was created
                                           by bcm_field_qualify_create() this
                                           field is always relevant it is the
                                           offset of the field inside the PBUS
                                           (MD/LR/Layer)
                                           3) For predefined qualifiers based on
                                           input_type:
                                           bcmFieldInputTypeLayerFwd  - offset
                                           inside the layer  (chosen by
                                           input_type+input_arg)
                                           bcmFieldInputTypeLayerAbsolute -
                                           offset inside the layer  (chosen by
                                           input_type+input_arg)
                                           bcmFieldInputTypeMetaData - NA
                                           bcmFieldInputTypeLayerRecordsFwd  - 
                                           NA
                                           bcmFieldInputTypeLayerRecordsAbsolute
                                           - NA
                                           bcmFieldInputTypeCascaded - offset of
                                           the external TCAM field group
                                           payload, plus the offset within the
                                           payload of the field group
                                           bcmFieldInputTypeCascaded - offset in
                                           the field group of 'Cascaded from'
                                           result buffer
                                           bcmFieldInputTypeConst - NA */
} bcm_field_qualify_attach_info_t;

/* 
 * This structure represents a single context_key element. This is an
 * abstract structure used only by other structures, like
 * bcm_field_context_hash_info_t and bcm_field_context_compare_info_t, as
 * a uniformed way to define context_keys.
 */
typedef struct bcm_field_context_key_info_s {
    int nof_quals;                      /* Number of valid qualifiers in the
                                           context key. */
    bcm_field_qualify_t qual_types[BCM_FIELD_NUMBER_OF_QUALS_PER_GROUP]; /* BCM level qualifier look at
                                           bcm_field_qualify_t for more info.
                                           Number of meaningful elements on this
                                           array according to nof_quals. */
    bcm_field_qualify_attach_info_t qual_info[BCM_FIELD_NUMBER_OF_QUALS_PER_GROUP]; /* Indicate how to read the relevant
                                           qualifier from PBUS. The information
                                           is aligned to the qualifier types
                                           array above. */
} bcm_field_context_key_info_t;

/* 
 * This structure represents a single context_payload element. This is an
 * abstract structure used only by other structures, like
 * bcm_field_group_attach_info_t, as a uniformed way to define
 * context_payloads.
 */
typedef struct bcm_field_context_payload_info_s {
    int nof_actions;                    /* Number of valid actions in the action
                                           set of the Field Group. */
    bcm_field_action_t action_types[BCM_FIELD_NUMBER_OF_ACTIONS_PER_GROUP]; /* The list of actions to be applied to
                                           matching entries for this action set.
                                           BCM level action look at
                                           bcm_field_action_t for more info. */
    bcm_field_action_attach_info_t action_info[BCM_FIELD_NUMBER_OF_ACTIONS_PER_GROUP]; /* Information (priority) on each action
                                           that configured in
                                           bcm_field_group_context_attach() API */
    int nof_invalidate_fems;            /* Number of elements in
                                           invalidate_fems, Indicates the number
                                           of FEMs added to the field group that
                                           we want to disable for the context. */
    bcm_field_action_priority_t *invalidate_fems; /* A pointer to an array of positions of
                                           FEMs, each indicating a FEM position
                                           of a FEM added to the field group,
                                           that should not be enabled for the
                                           context. */
    uint32 payload_id;                  /* Payload Id for current field group
                                           inside the payload buffer. Payloads
                                           returned from the external tcam are
                                           acumulated sequentially. Indicates
                                           the valid hit bit for current field
                                           group. */
    uint32 payload_offset;              /* Payload location inside the payload
                                           buffer returned from the external
                                           tcam. */
} bcm_field_context_payload_info_t;

/* 
 * This structure holds the basic parameters for
 * bcm_field_group_context_attach() function.
 */
typedef struct bcm_field_group_attach_info_s {
    bcm_field_context_key_info_t key_info; /* Context attach qualifiers
                                           information, like: number of valid
                                           qualifiers, qualifier type and how to
                                           read the relevant qualifier from
                                           PBUS. */
    bcm_field_context_payload_info_t payload_info; /* Context attach actions information,
                                           like: number of valid actions, action
                                           type and priority. */
    int compare_id;                     /* Compare id to use in case of
                                           comparison. Can be 0 or 1, depends on
                                           which compare pair is used in the
                                           comparison. */
} bcm_field_group_attach_info_t;

/* Action width in words. */
#define BCM_FIELD_ACTION_WIDTH_IN_WORDS (4)        

/* Qualifier width in words. */
#define BCM_FIELD_QUAL_WIDTH_IN_WORDS   (5)        

/* 
 * Include information regarding a user defined action used by
 * bcm_field_action_create.
 */
typedef struct bcm_field_action_info_s {
    bcm_field_stage_t stage;            /* Field stage, for which stage the
                                           action is created. */
    bcm_field_action_t action_type;     /* used as basis for the user defined
                                           action type, can be also void action */
    int size;                           /* Size of the action to set in the
                                           payload in bits. */
    int prefix_size;                    /* Size of the prefix to set in the
                                           payload in bits. */
    int prefix_value;                   /* Value of the prefix (will be put in
                                           the MSB of the action). */
    uint8 name[BCM_FIELD_MAX_SHORT_NAME_LEN]; /* String for application use. */
} bcm_field_action_info_t;

/* 
 * Include information regarding a qualifier. Used by
 * bcm_field_qualifier_create() for creating user defined qualifiers.
 */
typedef struct bcm_field_qualifier_info_create_s {
    int size;                           /* Size of the qualifier to set in the
                                           key in bits. */
    uint8 name[BCM_FIELD_MAX_SHORT_NAME_LEN]; /* String for application use. */
} bcm_field_qualifier_info_create_t;

/* 
 * Includes information regarding a qualifier. Used by
 * bcm_field_qualifier_get() for retrieving information regarding
 * predefined or user defined qualifiers.
 */
typedef struct bcm_field_qualifier_info_get_s {
    bcm_field_qualifier_class_t qual_class; /* Class of the qualifier. Indicates the
                                           intput type of the qualifier for
                                           predefined qualifiers. */
    int size;                           /* Size of the qualifier in the key in
                                           bits. */
    int offset;                         /* The offset of the qualifier. */
    uint8 name[BCM_FIELD_MAX_SHORT_NAME_LEN]; /* String for application use. */
} bcm_field_qualifier_info_get_t;

/* 
 * This structure holds the payload values needed for bcm_field_entry_add
 * function.
 */
typedef struct bcm_field_entry_action_s {
    bcm_field_action_t type;            /* BCM action type, an action to perform
                                           in case of match. */
    uint32 value[BCM_FIELD_ACTION_WIDTH_IN_WORDS]; /* Set value for action (lookup result). */
} bcm_field_entry_action_t;

/* 
 * This structure holds the key values needed for bcm_field_entry_add
 * function.
 */
typedef struct bcm_field_entry_qual_s {
    bcm_field_qualify_t type;           /* BCM qualifier type, a classifier type
                                           for lookup. */
    uint32 value[BCM_FIELD_QUAL_WIDTH_IN_WORDS]; /* Set value for qualify (lookup key). */
    uint32 max_value[BCM_FIELD_QUAL_WIDTH_IN_WORDS]; /* Sets the maximum value for ranged
                                           qualify (lookup key). */
    uint32 mask[BCM_FIELD_QUAL_WIDTH_IN_WORDS]; /* Mask Value with defined which of the
                                           value bits are relevant for lookup. */
} bcm_field_entry_qual_t;

/* 
 * This structure holds the key values needed for bcm_field_entry_add
 * function.
 */
typedef struct bcm_field_entry_info_s {
    uint32 priority;                    /* Entry priority, relevant only for
                                           TCAM FG. The lower the number the
                                           higher the entry priority. Higher
                                           priority lookup will hit first. */
    int nof_entry_quals;                /* Number of valid qualifiers in the
                                           Field entry. */
    bcm_field_entry_qual_t entry_qual[BCM_FIELD_NUMBER_OF_QUALS_PER_GROUP]; /* Entry qualifiers info including type,
                                           value, and mask, not all are relevant
                                           in various field group types. */
    int nof_entry_actions;              /* Number of valid actions in the Field
                                           entry. */
    bcm_field_entry_action_t entry_action[BCM_FIELD_NUMBER_OF_ACTIONS_PER_GROUP]; /* Entry actions info including type,
                                           value. */
    bcm_core_t core;                    /* Entry's core */
    uint8 valid_bit;                    /* Entry valid bit */
} bcm_field_entry_info_t;

/* 
 * This enum contains Packet Layers to remove, used in the
 * BCM_FIELD_PACKET_STRIP() macro.
 */
typedef enum bcm_field_packet_remove_layers_e {
    bcmFieldPacketRemoveLayerFirst = 0, /* Invalid Param. */
    bcmFieldPacketRemoveLayerOffset0 = bcmFieldPacketRemoveLayerFirst, /* Packet Layer offset 0. */
    bcmFieldPacketRemoveLayerOffset1 = 1, /* Packet Layer offset 1. */
    bcmFieldPacketRemoveLayerForwardingOffset0 = 2, /* Packet Layer Forwarding offset 0. */
    bcmFieldPacketRemoveLayerForwardingOffset1 = 3, /* Packet Layer Forwarding offset 1. */
    bcmFieldPacketRemoveLayerCount = 4  /* Always last. Not a usable value. */
} bcm_field_packet_remove_layers_t;

#define BCM_FIELD_PACKET_REMOVE_LAYER_STRINGS \
{ \
    "Offset0", \
    "Offset1", \
    "ForwardingOffset0", \
    "ForwardingOffset1"  \
}

/* 
 * This macro encodes the number of headers to remove and number of bytes
 * to a single parameter, given as input to PMF action
 * bcmFieldActionStartPacketStrip.
 */
#define BCM_FIELD_PACKET_STRIP(remove_layers, fixed_num_bytes)  ((fixed_num_bytes<<4) + (remove_layers)) 

/* 
 * This enum contains all Polynomial hashing Functions values that can be
 * passed to the 'hash_function' param in the
 * bcm_field_context_hash_info_t struct.
 */
typedef enum bcm_field_context_hash_function_e {
    bcmFieldContextHashFunctionFirst = 0, /* Invalid Param. */
    bcmFieldContextHashFunctionFirstReserved = bcmFieldContextHashFunctionFirst, /* HW Reserved Value */
    bcmFieldContextHashFunctionSecondReserved = 1, /* HW Reserved Value. */
    bcmFieldContextHashFunctionThirdReserved = 2, /* Polynomial BISYNC hashing Function. */
    bcmFieldContextHashFunctionCrc16Bisync = 3, /* Polynomial CRC 16 BISYNC hashing
                                           Function. */
    bcmFieldContextHashFunctionCrc16Xor1 = 4, /* Polynomial CRC 16 XOR1 hashing
                                           Function. */
    bcmFieldContextHashFunctionCrc16Xor2 = 5, /* Polynomial CRC 16 XOR2 hashing
                                           Function. */
    bcmFieldContextHashFunctionCrc16Xor4 = 6, /* Polynomial CRC 16 XOR4 hashing
                                           Function. */
    bcmFieldContextHashFunctionCrc16Xor8 = 7, /* Polynomial CRC 16 XOR8 hashing
                                           Function. */
    bcmFieldContextHashFunctionXor16 = 8, /* Polynomial XOR16 hashing Function. */
    bcmFieldContextHashFunctionCrc16Ccitt = 9, /* Polynomial CRC 16 CCITT hashing
                                           Function. */
    bcmFieldContextHashFunctionCrc32ALow = 10, /* Polynomial CRC 32 A LOW hashing
                                           Function. */
    bcmFieldContextHashFunctionCrc32Ahigh = 11, /* Polynomial CRC 32 A HIGH hashing
                                           Function. */
    bcmFieldContextHashFunctionCrc32BLow = 12, /* Polynomial CRC 32 B LOW hashing
                                           Function. */
    bcmFieldContextHashFunctionCrc32BHigh = 13, /* Polynomial CRC 32 B HIGH hashing
                                           Function. */
    bcmFieldContextHashFunctionCount = 14 /* Always last. Not a usable value. */
} bcm_field_context_hash_function_t;

/* 
 * This enum contains all Hashing Action Key values that can be passed to
 * the 'hash_config->action_key' param in the
 * bcm_field_context_hash_info_t struct.
 */
typedef enum bcm_field_context_hash_action_key_e {
    bcmFieldContextHashActionKeyFirst = 0, /* Invalid Param. */
    bcmFieldContextHashActionKeyEcmpLbKey0 = bcmFieldContextHashActionKeyFirst, /* Hashing key ECMP_LB0. */
    bcmFieldContextHashActionKeyEcmpLbKey1 = 1, /* Hashing key ECMP_LB1. */
    bcmFieldContextHashActionKeyEcmpLbKey2 = 2, /* Hashing key ECMP_LB2. */
    bcmFieldContextHashActionKeyNetworkLbKey = 3, /* Hashing key NETWORK_LB. */
    bcmFieldContextHashActionKeyLagLbKey = 4, /* Hashing key LAG_LB. */
    bcmFieldContextHashActionKeyAdditionalLbKey = 5, /* Hashing key ADDITIONAL_LB. */
    bcmFieldContextHashActionKeyCount = 6 /* Always last. Not a usable value. */
} bcm_field_context_hash_action_key_t;

/* 
 * This enum contains all Hashing Action Values that can be passed to the
 * 'hash_config->function_select' param in the
 * bcm_field_context_hash_info_t struct.
 */
typedef enum bcm_field_context_hash_action_value_e {
    bcmFieldContextHashActionValueFirst = 0, /* Invalid Param. */
    bcmFieldContextHashActionValueNone = bcmFieldContextHashActionValueFirst, /* Hashing action value DO_NOTHING. */
    bcmFieldContextHashActionValueReplaceCrc = 1, /* Hashing action value
                                           REPLACE_WITH_CRC_16. */
    bcmFieldContextHashActionValueAugmentCrc = 2, /* Hashing action value
                                           AUGMENT_WITH_PMF_CRC_16. */
    bcmFieldContextHashActionValueAugmentKey = 3, /* Hashing action value
                                           AUGMENT_WITH_KEY_J. */
    bcmFieldContextHashActionValueCount = 4 /* Always last. Not a usable value. */
} bcm_field_context_hash_action_value_t;

/* 
 * This enum contains all CRC Select values that can be passed to the
 * 'hash_config->crc_select' param in the bcm_field_context_hash_info_t
 * struct.
 */
typedef enum bcm_field_crc_select_e {
    bcmFieldCrcSelectInvalid = 0,       /* Invalid */
    bcmFieldCrcSelectFirst = 1,         /* Indexer */
    bcmFieldCrcSelectCrc16P0x10039 = bcmFieldCrcSelectFirst, /* CRC16 with 0x10039 polynomial */
    bcmFieldCrcSelectCrc16P0x100d7 = 2, /* CRC16 with 0x100d7 polynomial */
    bcmFieldCrcSelectCrc16P0x1015d = 3, /* CRC16 with 0x1015d polynomial */
    bcmFieldCrcSelectCrc16P0x10939 = 4, /* CRC16 with 0x10939 polynomial */
    bcmFieldCrcSelectCrc16P0x109e7 = 5, /* CRC16 with 0x109e7 polynomial */
    bcmFieldCrcSelectCrc16P0x10ac5 = 6, /* CRC16 with 0x10ac5 polynomial */
    bcmFieldCrcSelectCrc16P0x1203d = 7, /* CRC16 with 0x1203d polynomial */
    bcmFieldCrcSelectCrc16P0x12105 = 8, /* CRC16 with 0x12105 polynomial */
    bcmFieldCrcSelectCount              /* Need to be always last */
} bcm_field_crc_select_t;

/* This structure holds detailed info about hash configuration. */
typedef struct bcm_field_context_hash_config_s {
    bcm_field_context_hash_action_key_t action_key; /* One of the various lb-keys which are
                                           iPMF1 output. */
    bcm_field_context_hash_action_value_t function_select; /* Hashing Action which selects whether
                                           to keep the input lb-key or to
                                           replace it. */
    bcm_field_crc_select_t crc_select;  /* Selects which CRC polynomial
                                           (function) to use on hash function
                                           output (only works in case hash
                                           action is augment). */
} bcm_field_context_hash_config_t;

/* 
 * This structure holds detailed info how hash key should be constructed,
 * needed for bcm_field_context_hash_create() function.
 */
typedef struct bcm_field_context_hash_info_s {
    bcm_field_context_key_info_t key_info; /* The Hash key information, describing
                                           the qualfiers and template of the
                                           constructed key */
    uint8 compression;                  /* Disable/enable compress data (128->32
                                           bit). Typical usage: compress ipv6
                                           address into 32 bits. */
    uint8 order;                        /* Disable/enable order data (smaller
                                           32-bits value will always be in 32LSB
                                           ). Typical usage order between
                                           generate the same key for
                                           bidirectional ip flows. */
    bcm_field_context_hash_function_t hash_function; /* Hashing polynomial for hashing
                                           mechanism. */
    bcm_field_context_hash_config_t hash_config; /* Hashing configuration params,
                                           describing which hash action is
                                           performed and which signals */
} bcm_field_context_hash_info_t;

/* 
 * This structure holds detailed info for keys, which should be compared
 * needed for bcm_field_context_compare_create() function.
 */
typedef struct bcm_field_context_compare_info_s {
    bcm_field_context_key_info_t first_key_info; /* The information for the first key. */
    bcm_field_context_key_info_t second_key_info; /* The information for the second key. */
} bcm_field_context_compare_info_t;

/* 
 * List of all TCAM PP Databases. This enum is used as an input to part
 * of field TCAM functions to provide field TCAM functionaity to static
 * TCAM PP Databases.
 */
typedef enum bcm_field_app_db_e {
    bcmFieldAppDbInvalid = 0,           /* Invalid Param. */
    bcmFieldAppDbFirst = 1,             /* First valid value (used for indexing) */
    bcmFieldAppDbVlanPort = bcmFieldAppDbFirst, /* IN_AC_TCAM_DB */
    bcmFieldAppDbIpmcV4 = 2,            /* IPV4_MULTICAST_TCAM_FORWARD */
    bcmFieldAppDbIpmcV6 = 3,            /* IPV6_MULTICAST_TCAM_FORWARD */
    bcmFieldAppDbTunnelTerminatorV4 = 4, /* IPV4_TT_TCAM_BASIC */
    bcmFieldAppDbTunnelTerminatorBudV4 = 5, /* IPV4_TT_TCAM_2ND_PASS */
    bcmFieldAppDbTunnelTerminatorV6 = 6, /* IPV6_MP_TT_TCAM_BASIC */
    bcmFieldAppDbTunnelTerminatorBudV6 = 7, /* IPV6_MP_TT_TCAM_2ND_PASS */
    bcmFieldAppDbMplsFrr = 8,           /* MPLS_FRR_TCAM_DB */
    bcmFieldAppDbOamIdentification = 9, /* OAM_TCAM_IDENTIFICATION_DB */
    bcmFieldAppDbL3VPbrV4 = 10,         /* IPV4_VRF_DB_TCAM */
    bcmFieldAppDbL3VPbrV6 = 11,         /* IPV6_VRF_DB_TCAM */
    bcmFieldAppDbCount                  /* Should be last */
} bcm_field_app_db_t;

/* 
 * This function holds information needed by the bank operation
 * (add/evacuate) APIs, it contains the field group ID or the TCAM APP ID
 * to add/evacuate the banks to/from (only one can be set, but not both),
 * and the list of the banks to do the operation on
 */
typedef struct bcm_field_tcam_bank_info_s {
    bcm_field_group_t fg_id;            /* FG-ID */
    bcm_field_app_db_t pp_app;          /* PP-APP */
    int nof_banks;                      /* Number of banks to evacuate */
    int tcam_bank_ids[BCM_FIELD_NUMBER_OF_TCAM_BANKS]; /* Array that holds the TCAM bank IDs to
                                           be evacuated */
} bcm_field_tcam_bank_info_t;

/* 
 * ACE Format ID. Used to indicate the ID of an ACE format and the result
 * type of its entries.
 */
typedef uint8 bcm_field_ace_format_t;

/* 
 * This structure represents a single context_payload element. This is an
 * abstract structure used only by other structures, like
 * bcm_field_group_attach_info_t, as a uniformed way to define
 * context_payloads.
 */
typedef struct bcm_field_ace_format_info_s {
    int nof_actions;                    /* Number of valid actions in the action
                                           set of ACE format. */
    bcm_field_action_t action_types[BCM_FIELD_NUMBER_OF_ACTIONS_PER_GROUP]; /* The list of actions to be applied to
                                           matching entries for this action set.
                                           BCM level action look at
                                           bcm_field_action_t for more info. */
    int action_with_valid_bit[BCM_FIELD_NUMBER_OF_ACTIONS_PER_GROUP]; /* If set, then additional bit is added
                                           in payload to indicate weather this
                                           action is valid. */
    uint8 name[BCM_FIELD_MAX_SHORT_NAME_LEN]; /* String for application use. */
} bcm_field_ace_format_info_t;

/* This structure holds detailed info for ACE field entry. */
typedef struct bcm_field_ace_entry_info_s {
    int nof_entry_actions;              /* Number of valid actions in the ACE
                                           field entry. */
    bcm_field_entry_action_t entry_action[BCM_FIELD_NUMBER_OF_ACTIONS_PER_GROUP]; /* Entry actions info including type,
                                           value.. */
} bcm_field_ace_entry_info_t;

/* 
 * Indicates the first user action id to avoid overlapping with static
 * ones.
 */
#define BCM_FIELD_FIRST_USER_ACTION_ID  (2048)     

/* 
 * Indicates the first user qualifier id to avoid overlapping with static
 * ones
 */
#define BCM_FIELD_FIRST_USER_QUALIFIER_ID   (2048)     

/* Calculates the User Defined action id. */
#define BCM_FIELD_ACTION_ID_MAP(user_action_id)  (BCM_FIELD_FIRST_USER_ACTION_ID + user_action_id) 

/* Calculates the User Defined qualifier id. */
#define BCM_FIELD_QUALIFIER_ID_MAP(user_qualifier_id)  (BCM_FIELD_FIRST_USER_QUALIFIER_ID + user_qualifier_id) 

/* 
 * This enum contains all 'param_type' values that can be passed to the
 * bcm_field_context_param_set() function.
 */
typedef enum bcm_field_context_param_type_e {
    bcmFieldContextParamTypeFirst = 0,  /* Invalid Param. */
    bcmFieldContextParamTypeSystemHeaderProfile = bcmFieldContextParamTypeFirst, /* Selects a system header profile to
                                           determine which headers will be
                                           appended to packets matching the
                                           context. */
    bcmFieldContextParamTypeSystemHeaderStrip = 1, /* Packet strip parameters - bytes and
                                           headers to remove. */
    bcmFieldContextParamTypeKeyVal = 2, /* Set a constant value that can be used
                                           as qualifier for lookups performed by
                                           the context. */
    bcmFieldContextParamCount = 3       /* Always last. Not a usable value. */
} bcm_field_context_param_type_t;

/* 
 * This structure holds all parameters, which can be set by
 * bcm_field_context_param_set() for a specific context.
 */
typedef struct bcm_field_context_param_info_s {
    bcm_field_context_param_type_t param_type; /* The type of the parameter to set. */
    uint32 param_arg;                   /* Extra arg for the parameter to set. */
    uint32 param_val;                   /* The value to set for the given
                                           parameter. */
} bcm_field_context_param_info_t;

/* Container of 4-bits identifiers of a FEM. */
typedef uint8 bcm_field_fem_id_t;

/* 
 * Indicates the maximum number of conditions per FEM(Field Extraction
 * Macro).
 */
#define BCM_FIELD_NUMBER_OF_CONDITIONS_PER_FEM (16)       

/* 
 * Indicates the maximum number of extractions per FEM(Field Extraction
 * Macro).
 */
#define BCM_FIELD_NUMBER_OF_EXTRACTIONS_PER_FEM (4)        

/* 
 * Indicates the maximum number of mapping bits per FEM(Field Extraction
 * Macro).
 */
#define BCM_FIELD_NUMBER_OF_MAPPING_BITS_PER_FEM (24)       

/* 
 * This Enum used to select the source type for the output bit of action
 * extraction.
 */
typedef enum bcm_field_fem_extraction_output_source_type_e {
    bcmFieldFemExtractionOutputSourceTypeFirst = 0, /* Invalid Param. */
    bcmFieldFemExtractionOutputSourceTypeForce = bcmFieldFemExtractionOutputSourceTypeFirst, /* Use a constant value for this bit. */
    bcmFieldFemExtractionOutputSourceTypeKey = 1, /* Use a bit from the input key. */
    bcmFieldFemExtractionOutputSourceTypeCount = 2 /* Always last. Not a usable value. */
} bcm_field_fem_extraction_output_source_type_t;

/* This structure holds detailed info for FEM condition info. */
typedef struct bcm_field_fem_extraction_output_bit_s {
    bcm_field_fem_extraction_output_source_type_t source_type; /* Output source type. */
    uint8 offset;                       /* Offset from key select. */
    uint8 forced_value;                 /* Force bit value in case source type
                                           == force. */
} bcm_field_fem_extraction_output_bit_t;

/* This structure holds detailed info for FEM extraction info. */
typedef struct bcm_field_fem_extraction_s {
    bcm_field_action_t action_type;     /* Action type to be performed by this
                                           extraction. */
    bcm_field_fem_extraction_output_bit_t output_bit[BCM_FIELD_NUMBER_OF_MAPPING_BITS_PER_FEM]; /* Array of extraction commands. Each
                                           extract 1 bit of the action value. */
    uint32 increment;                   /* Add a constant value to the result of
                                           the extraction. */
} bcm_field_fem_extraction_t;

/* This structure holds detailed info for FEM condition info. */
typedef struct bcm_field_fem_condition_s {
    uint8 extraction_id;    /* Choose one of 4 action extraction tables that
                               will produce an action. */
    uint8 is_action_valid;  /* If TRUE, the FEM will produce an action for the
                               given 4 bits word. */
} bcm_field_fem_condition_t;

/* This structure holds detailed info for FEM input info. */
typedef struct bcm_field_fem_input_info_s {
    uint8 input_offset;                 /* Offset inside the FG-ID result
                                           buffer. The FEM input is 32 bits
                                           long.  When the FG result buffer is
                                           longer than 32 bits, offset is
                                           required (in resolution of 16 bits). */
    bcm_field_group_t overriding_fg_id; /* If valid FG-ID,  override the main
                                           group result buffer with 16 bits
                                           result from this specified TCAM-FG
                                           result. */
} bcm_field_fem_input_info_t;

/* This structure holds detailed info for FEM action info. */
typedef struct bcm_field_fem_action_info_s {
    bcm_field_fem_input_info_t fem_input; /* Structure holds all FEM input
                                           information. */
    uint8 condition_msb;                /* Select the MSB of a 4 bit chunk that
                                           will choose extraction tables ID
                                           taken from the 32 input bits selected
                                           by input offset (range of 3-31). */
    bcm_field_fem_condition_t fem_condition[BCM_FIELD_NUMBER_OF_CONDITIONS_PER_FEM]; /* Array of structures, each describing
                                           the condition information for the
                                           FEM. */
    bcm_field_fem_extraction_t fem_extraction[BCM_FIELD_NUMBER_OF_EXTRACTIONS_PER_FEM]; /* Array of structures, each describes
                                           the extraction information for the
                                           FEM,action combination including
                                           action type, how to construct the
                                           action values out of the 32 input 
                                           bits, and option for an increment for
                                           adding constant value for the result
                                           of the extraction. */
} bcm_field_fem_action_info_t;

/* Opaque handle to a bitwie OR mask of an EFES. */
typedef uint32 bcm_field_efes_action_or_mask_t;

/* Indicates the maximum number of conditions per EFES. */
#define BCM_FIELD_NUMBER_OF_CONDITIONS_PER_EFES (4)        

/* 
 * This structure holds info for EFES configuration for one combination
 * of the condition bits.
 */
typedef struct bcm_field_efes_condition_conf_s {
    uint8 is_action_valid;              /* If false, under this condition no
                                           action will take place (and all other
                                           fields are irrelevant). */
    bcm_field_action_t action_type;     /* The action type to perform. */
    int action_lsb;                     /* The starting offset (from the LSB of
                                           the field group) of the bits to
                                           extract from the input to the action,
                                           not including valid bit. */
    int action_nof_bits;                /* The number of bits to extract from
                                           the input to the action, not
                                           including valid bit. */
    uint8 action_with_valid_bit;        /* Whether or not to use valid bit. If
                                           we use valid bit, itwill be placed
                                           one bit before action_lsb. */
    uint8 valid_bit_polarity;           /* If we use valid bit, what value (zero
                                           or one) will indicate that the action
                                           should take place. */
    bcm_field_efes_action_or_mask_t action_or_mask; /* A bitwise OR mask that perfroms an OR
                                           with the output of the EFES. */
} bcm_field_efes_condition_conf_t;

/* 
 * This structure holds info for EFES configuration for one combination
 * of the condition bits.
 */
typedef struct bcm_field_efes_action_info_s {
    uint8 is_condition_valid;           /* Whether we use the 2MSB feature for
                                           condition bits. */
    int condition_msb;                  /* The offset (from the LSB of the field
                                           group) of the MSB of the condition
                                           bits, if is_condition_valid is true. */
    bcm_field_efes_condition_conf_t efes_condition_conf[BCM_FIELD_NUMBER_OF_CONDITIONS_PER_EFES]; /* Array of structures, each describing
                                           the configuration for a specific
                                           conbination of the condition bits. If
                                           is_condition_valid is false, only the
                                           first element is relevant. */
} bcm_field_efes_action_info_t;

/* 
 * The mask of position of the preferred location within the FES-FEM
 * array.
 */
#define BCM_FIELD_ACTION_POSITION_MASK  (0xFFFF)   

/* 
 * The mask of priority of the preferred location within the FES-FEM
 * array.
 */
#define BCM_FIELD_ACTION_PRIORITY_MASK  (0xFFFF)   

/* The mask of the preferred FES-FEM array. */
#define BCM_FIELD_ACTION_ARRAY_MASK (0xF)      

/* The offset of the preferred FES-FEM array. */
#define BCM_FIELD_ACTION_ARRAY_OFFSET   (16)       

/* The offset inside the FES-FEM array, where the valid bid is located. */
#define BCM_FIELD_ACTION_VALID_OFFSET   (31)       

/* 
 * The value of the bit is reserved for BCM_FIELD_ACTION_DONT_CARE 'don't
 * care'. 0 means we care about position.
 */
#define BCM_FIELD_ACTION_DONT_CARE_OFFSET   (30)       

/* 
 * The action priority used to indicate that we don't care about the
 * priority.
 */
#define BCM_FIELD_ACTION_DONT_CARE  ((1U << BCM_FIELD_ACTION_DONT_CARE_OFFSET) | (1U << BCM_FIELD_ACTION_VALID_OFFSET)) 

/* 
 * The action priority used to indicate that we do not want the action to
 * take place (no EFES is allocated for it).
 */
#define BCM_FIELD_ACTION_INVALIDATE (1 << (BCM_FIELD_ACTION_VALID_OFFSET - 1)) 

/* 
 * Flag to indicate position or priority. 1 means we indicate a specific
 * position. 0 means we indicate a numerical priority.
 */
#define BCM_FIELD_ACTION_POSITION_PRIORITY_FLAG_OFFSET (20)       

#define BCM_FIELD_ACTION_POSITION(_array_id_, _position_)  \
    (((((bcm_field_action_priority_t) (_position_)) & BCM_FIELD_ACTION_POSITION_MASK) | \
      ((((bcm_field_action_priority_t) (_array_id_)) & BCM_FIELD_ACTION_ARRAY_MASK) \
         << BCM_FIELD_ACTION_ARRAY_OFFSET) | \
        (1 << BCM_FIELD_ACTION_POSITION_PRIORITY_FLAG_OFFSET) | \
        ((0 << BCM_FIELD_ACTION_DONT_CARE_OFFSET) | \
        (1 << BCM_FIELD_ACTION_VALID_OFFSET)))) 

#define BCM_FIELD_ACTION_PRIORITY(_array_id_, _priority_)  \
    (((((bcm_field_action_priority_t) (_priority_)) & BCM_FIELD_ACTION_PRIORITY_MASK) | \
      (((bcm_field_action_priority_t) (_array_id_)) << BCM_FIELD_ACTION_ARRAY_OFFSET) | \
        (0 << BCM_FIELD_ACTION_POSITION_PRIORITY_FLAG_OFFSET) | \
        ((0 << BCM_FIELD_ACTION_DONT_CARE_OFFSET) | \
        (1 << BCM_FIELD_ACTION_VALID_OFFSET)))) 

/* 
 * The Enum described the system header profile types, which are used in
 * order to build the appropriate system headers in the Ingress Transmit
 * unit.
 */
typedef enum bcm_field_system_header_profile_e {
    bcmFieldSystemHeaderProfileFirst = 0, /* Invalid Param. */
    bcmFieldSystemHeaderProfileNone = bcmFieldSystemHeaderProfileFirst, /* No system Headers. */
    bcmFieldSystemHeaderProfileFtmh = 1, /* FTMH only. */
    bcmFieldSystemHeaderProfileFtmhPph = 2, /* FTMH + PP header. */
    bcmFieldSystemHeaderProfileFtmhTsh = 3, /* FTMH + Timestamp header. */
    bcmFieldSystemHeaderProfileFtmhTshPph = 4, /* FTMH +Timestamp +PP header. */
    bcmFieldSystemHeaderProfileFtmhTshPphUdh = 5, /* FTMH +Timestamp +PP header + User
                                           defined Header. Used for Ethernet
                                           header. */
    bcmFieldSystemHeaderProfileFtmhUdh = 6, /* FTMH + User defined Header. */
    bcmFieldSystemHeaderProfileCount = 7 /* Always last. Not a usable value. */
} bcm_field_system_header_profile_t;

#define BCM_FIELD_SYSTEM_HEADER_PROFILE_STRINGS \
{ \
    "None", \
    "Ftmh", \
    "FtmhPph", \
    "FtmhTsh", \
    "FtmhTshPph", \
    "FtmhTshPphUdh", \
    "FtmhUdh"  \
}

/* Range Qualifier Types */
typedef enum bcm_field_range_type_e {
    bcmFieldRangeTypeFirst = 0,         /* Invalid Param. */
    bcmFieldRangeTypeL4SrcPort = bcmFieldRangeTypeFirst, /* L4 Source Port Range Qualifier. */
    bcmFieldRangeTypeL4DstPort = 1,     /*  L4 Destination Port Range Qualifier. */
    bcmFieldRangeTypeOutVport = 2,      /* Egress Virtual Port Range Qualifier. */
    bcmFieldRangeTypePacketHeaderSize = 3, /* Packet Header Size Range Qualifier. */
    bcmFieldRangeTypeCount = 4          /* Always last. Not a usable value. */
} bcm_field_range_type_t;

/* 
 * This structure holds the info about range configuration, needed for
 * bcm_field_range_set API.
 */
typedef struct bcm_field_range_info_s {
    bcm_field_range_type_t range_type;  /* Range type */
    uint32 min_val;                     /* Minimum value of the range. */
    uint32 max_val;                     /* Maximum value of the range. */
} bcm_field_range_info_t;

/* Forwarding Layer Types. */
typedef enum bcm_field_layer_type_e {
    bcmFieldLayerTypeFirst = 0, 
    bcmFieldLayerTypeEth = bcmFieldLayerTypeFirst, 
    bcmFieldLayerTypeIp4 = 1, 
    bcmFieldLayerTypeIp6 = 2, 
    bcmFieldLayerTypeMpls = 3, 
    bcmFieldLayerTypeMplsUa = 4, 
    bcmFieldLayerTypeArp = 5, 
    bcmFieldLayerTypeFcoe = 6, 
    bcmFieldLayerTypeTcp = 7, 
    bcmFieldLayerTypeUdp = 8, 
    bcmFieldLayerTypeBfdSingleHop = 9, 
    bcmFieldLayerTypeBfdMultiHop = 10, 
    bcmFieldLayerTypePtpEvent = 11, 
    bcmFieldLayerTypePtpGeneral = 12, 
    bcmFieldLayerTypeY1731 = 13, 
    bcmFieldLayerTypeIcmp = 14, 
    bcmFieldLayerTypeBierTi = 15, 
    bcmFieldLayerTypeBierMpls = 16, 
    bcmFieldLayerTypeRch = 17, 
    bcmFieldLayerTypePppoe = 18, 
    bcmFieldLayerTypeSrv6Endpoint = 19, 
    bcmFieldLayerTypeSrv6Beyond = 20, 
    bcmFieldLayerTypeIgmp = 21, 
    bcmFieldLayerTypeIpAny = 22, 
    bcmFieldLayerTypeGre = 23, 
    bcmFieldLayerTypeLt2pv3 = 24, 
    bcmFieldLayerTypeVxlanGpe = 25, 
    bcmFieldLayerTypeVxlan = 26, 
    bcmFieldLayerTypeGeneve = 27, 
    bcmFieldLayerTypeIpt = 28, 
    bcmFieldLayerTypeTm = 29, 
    bcmFieldLayerTypeUnknown = 30, 
    bcmFieldLayerTypeTmLegacy = 31, 
    bcmFieldLayerTypeCount = 32         /* Always last. Not a usable value. */
} bcm_field_layer_type_t;

#define BCM_FIELD_LAYER_TYPE_STRINGS \
{ \
    "Eth", \
    "Ip4", \
    "Ip6", \
    "Mpls", \
    "MplsUa", \
    "Arp", \
    "Fcoe", \
    "Tcp", \
    "Udp", \
    "BfdSingleHop", \
    "BfdMultiHop", \
    "PtpEvent", \
    "PtpGeneral", \
    "Y1731", \
    "Icmp", \
    "BierTi", \
    "BierMpls", \
    "Rch", \
    "Pppoe", \
    "Srv6Endpoint", \
    "Srv6Beyond", \
    "Igmp", \
    "IpAny", \
    "Gre", \
    "Lt2pv3", \
    "VxlanGpe", \
    "Vxlan", \
    "Geneve", \
    "Ipt", \
    "Tm", \
    "Unknown", \
    "TmLegacy"  \
}

/* The place of is_meter bit inside the stat profile. */
#define BCM_FILED_STAT_IS_METER_SHIFT   (0)        

/* The place of is_lm bit inside the stat profile. */
#define BCM_FILED_STAT_IS_LM_SHIFT  (1)        

/* The place of stat type bits inside the stat profile. */
#define BCM_FILED_STAT_TYPE_SHIFT   (2)        

/* The place, whre the valid bit is located, inside the stat profile. */
#define BCM_FILED_STAT_VALID_SHIFT  (4)        

/* 
 * Base value for Ingress based Field Processor stage Group/Entry/Presel
 * Ids.
 */
#define BCM_FIELD_IFP_ID_BASE   (0x00000000) 

/* 
 * Base value for Egress based Field Processor stage Group/Entry/Presel
 * Ids.
 */
#define BCM_FIELD_EFP_ID_BASE   (0x01000000) 

/* 
 * Base value for VLAN based Field Processor stage Group/Entry/Presel
 * Ids.
 */
#define BCM_FIELD_VFP_ID_BASE   (0x02000000) 

/* 
 * Base value for Exact Match based Field Processor stage
 * Group/Entry/Presel Ids.
 */
#define BCM_FIELD_EM_ID_BASE    (0x03000000) 

/* Mask for stage Group/Entry/Presel Ids. */
#define BCM_FIELD_ID_MASK       (0x00FFFFFF) 

/* Parameters info for Field Action. */
typedef struct bcm_field_action_params_s {
    uint32 param0;      /* First Parameter to Action */
    uint32 param1;      /* Second Parameter to Action */
    bcm_pbmp_t pbmp;    /* Port bitmap */
} bcm_field_action_params_t;

/* Match configuration info for Field Action. */
typedef struct bcm_field_action_match_config_s {
    uint8 elephant_pkt_only;    /* To match only elephant flows */
    bcm_pbmp_t egr_pbmp;        /* Match Pbmp for Egress Port */
} bcm_field_action_match_config_t;

#ifndef BCM_HIDE_DISPATCHABLE

/* Add an action to a field entry */
extern int bcm_field_action_config_info_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_field_action_params_t *params, 
    bcm_field_action_match_config_t *match_config);

/* 
 * Retrieve the parameters for an action previously added to a field
 * entry
 */
extern int bcm_field_action_config_info_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_field_action_params_t *params, 
    bcm_field_action_match_config_t *match_config);

/* 
 * Configure match criteria for bcmFieldQualifyRangeCheckGroup
 *         qualifier from the field entry.
 */
extern int bcm_field_qualify_RangeCheckGroup(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * Get match criteria for bcmFieldQualifyRangeCheckGroup
 *                qualifier from the field entry.
 */
extern int bcm_field_qualify_RangeCheckGroup_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

#ifndef BCM_HIDE_DISPATCHABLE

/* Qualifies on the tag type configured for opaque tags. */
extern int bcm_field_qualify_OpaqueTagType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* 
 * To get the qualified inputs on the tag type configured for opaque
 * tags.
 */
extern int bcm_field_qualify_OpaqueTagType_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 *data, 
    uint8 *mask);

/* Qualifies on the higher 32 bits of opaque tag allowed in the system */
extern int bcm_field_qualify_OpaqueTagHigh(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * To get the qualified inputs on the higher 32 bits of opaque tag
 * allowed in the system.
 */
extern int bcm_field_qualify_OpaqueTagHigh_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

/* Qualifies on the lower 32 bits of opaque tag allowed in the system */
extern int bcm_field_qualify_OpaqueTagLow(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* 
 * To get the qualified inputs on the lower 32 bits of opaque tag allowed
 * in the system.
 */
extern int bcm_field_qualify_OpaqueTagLow_get(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 *data, 
    uint32 *mask);

#endif /* BCM_HIDE_DISPATCHABLE */

/* Dos Attack Events. */
#define BCM_FIELD_DOSATTACK_MACSA_DA_SAME   (1 << 0)   /* Dos Attack Event when
                                                          Source MAC is same as
                                                          Destination MAC. */
#define BCM_FIELD_DOSATTACK_IPFRAG_OFFSET   (1 << 1)   /* Dos Attack Event when
                                                          Protocol field Offset
                                                          in IPv4 Header is
                                                          equal to 1. */
#define BCM_FIELD_DOSATTACK_V6_TYPE0_ROUTING_HDR (1 << 2)   /* Dos Attack Event when
                                                          Type0 Routing
                                                          Extension header is
                                                          present in IPv6. */
#define BCM_FIELD_DOSATTACK_V6_NON_LAST_FRAG_LT_1280 (1 << 3)   /* Dos Attack Event when
                                                          non-last fragment of
                                                          IPv6 Packet is less
                                                          than 1280 bytes. */
#define BCM_FIELD_DOSATTACK_FIRST_TCPIP_FRAG_SMALL (1 << 4)   /* Dos Attack Event when
                                                          First Fragment of IP
                                                          payload with TCP is
                                                          smaller than
                                                          configured value. */
#define BCM_FIELD_DOSATTACK_TCP_OFFSET      (1 << 5)   /* Dos Attack Event when
                                                          L4 is TCP and IP
                                                          protocol offset is
                                                          equal to 1. */
#define BCM_FIELD_DOSATTACK_SYN_FRAG        (1 << 6)   /* Dos Attack Event when
                                                          TCP SYN Packet with
                                                          Source Port 0-1023 for
                                                          non-first fragments
                                                          tcp/udp port values
                                                          are always zero. */
#define BCM_FIELD_DOSATTACK_FLAGZERO_SEQZERO (1 << 7)   /* Dos Attack Event when
                                                          TCP Packets with
                                                          control flags == 0 and
                                                          sequence number == 0. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_FUP    (1 << 8)   /* Dos Attack Event when
                                                          TCP Packets with
                                                          FIN,URG & PSH bits set
                                                          & sequence number ==
                                                          0. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_SF     (1 << 9)   /* Dos Attack Event when
                                                          TCP packets with SYN
                                                          and FIN set. */
#define BCM_FIELD_DOSATTACK_TCPPORTS_EQUAL  (1 << 10)  /* Dos Attack Event when
                                                          TCP Source and
                                                          Destination ports are
                                                          same. */
#define BCM_FIELD_DOSATTACK_UDPPORTS_EQUAL  (1 << 11)  /* Dos Attack Event when
                                                          UDP Source and
                                                          Destination ports are
                                                          same. */
#define BCM_FIELD_DOSATTACK_ICMP            (1 << 12)  /* Dos Attack Event when
                                                          ICMP V4 and V6 ping
                                                          packet with payload
                                                          bigger than configured
                                                          value. */
#define BCM_FIELD_DOSATTACK_ICMPFRAGMENTS   (1 << 13)  /* Dos Attack Event when
                                                          IPv4/IPv6 fragmented
                                                          ICMP packets. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_SR     (1 << 14)  /* Dos Attack Event when
                                                          TCP packets with SYN
                                                          and RST set. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_SYN_FIRSTFRAG (1 << 15)  /* Dos Attack Event when
                                                          TCP with SYN set and
                                                          first fragment of
                                                          fragmented IP packet. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_FIN_NOACK (1 << 16)  /* Dos Attack Event when
                                                          TCP packet with FIN
                                                          set but ACK not set. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_RST_NOACK (1 << 17)  /* Dos Attack Event when
                                                          TCP packet with RST
                                                          set but ACK not set. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_NOSFRA (1 << 18)  /* Dos Attack Event when
                                                          TCP packet with SYN,
                                                          FIN, RST and ACK not
                                                          set. */
#define BCM_FIELD_DOSATTACK_TCP_DSTPORT_ZERO (1 << 19)  /* Dos Attack Event when
                                                          TCP packet with
                                                          Destination port
                                                          equals to 0. */
#define BCM_FIELD_DOSATTACK_TCP_SRCPORT_ZERO (1 << 20)  /* Dos Attack Event when
                                                          TCP packet with Source
                                                          port equals to 0. */
#define BCM_FIELD_DOSATTACK_TCP_DST_IP_BCAST (1 << 21)  /* Dos Attack Event when
                                                          TCP Packet with
                                                          Destination IP
                                                          Broadcast. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_ZERO   (1 << 22)  /* Dos Attack Event when
                                                          configured TCP flags
                                                          is zero. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_RESVD_NONZERO (1 << 23)  /* Dos Attack Event when
                                                          configured Reserved
                                                          flags is non-zero. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_ACK    (1 << 24)  /* Dos Attack Event when
                                                          TCP flag ACK is set
                                                          and Acknowledge number
                                                          is zero. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_URG_NOURGPTR (1 << 25)  /* Dos Attack Event when
                                                          TCP Flag URG set and
                                                          Urgent pointer is
                                                          zero. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_NOURG_URGPTR (1 << 26)  /* Dos Attack Event when
                                                          TCP Flag URG not set
                                                          and Urgent pointer is
                                                          not zero. */
#define BCM_FIELD_DOSATTACK_TCPFLAGS_SYNOPTION (1 << 27)  /* Dos Attack Event when
                                                          TCP Flag SYN set and
                                                          Option same as
                                                          configured value. */

/* Parameters for bcmFieldActionDlbEcmpMonitorEnable */
#define BCM_FIELD_DLB_ECMP_MON_DISABLE  (1 << 0)   /* Enabling Dlb Ecmp Monitor
                                                      support */
#define BCM_FIELD_DLB_ECMP_MON_ENABLE   (1 << 1)   /* Disabling Dlb Ecmp Monitor
                                                      support */

/* bcm_field_pkt_flow_type_e */
typedef enum bcm_field_pkt_flow_type_e {
    bcmFieldPktFlowTypeTunnelNone = 0,  /* Type to identify non-tunnel flows
                                           like access or transit flows. */
    bcmFieldPktFlowTypeTunnelL2 = 1,    /* Type to identify L2 Tunnel flows. */
    bcmFieldPktFlowTypeTunnelL3 = 2,    /* Type to identify L3 Tunnel flows. */
    bcmFieldPktFlowTypeLastCount = 4    /* Always Last. Not a usable value. */
} bcm_field_pkt_flow_type_t;

#define BCM_FIELD_PKT_FLOW_TYPE \
{ \
    "TunnelNone", \
    "TunnelL2", \
    "TunnelL3"  \
}

/* Loopback subtypes */
typedef enum bcm_field_loopback_subtype_e {
    bcmFieldLoopbackSubtypeIfa = 0,     /* Loopback Subtype Inband Flow Analysis */
    bcmFieldLoopbackSubtypeCount = 1    /* Always last. Not to be used. */
} bcm_field_loopback_subtype_t;

/* Egress Flow control for bcmFieldActionEgressFlowControlEnable */
typedef enum bcm_field_egress_flow_control_e {
    bcmFieldEgressFlowControlLoopbackRedirect = 0, /* Egress Flow Control for Loopback
                                           Redirect */
    bcmFieldEgressFlowControlAppendIncomingOuterVlan = 1, /* The incoming Outer Vlan tag will be
                                           appended in the outgoing packet */
    bcmFieldEgressFlowControlAppendOuterVlanNew = 2, /* New Outer Vlan tag will be appended
                                           in the outgoing packet */
    bcmFieldEgressFlowControlTranslateSnatSrcIpOnly = 3, /* Source IP address translation for
                                           SNAT */
    bcmFieldEgressFlowControlTranslateDnatSrcIpDstIp = 4, /* Source and Destination IP addresses
                                           translation for DNAT */
    bcmFieldEgressFlowControlTranslateSnaptSrcIpL4SrcPort = 5, /* Source IP address and L4 Source port
                                           translation for SNAPT */
    bcmFieldEgressFlowControlTranslateSnaptSrcIpDstIpL4SrcPortL4DstPort = 6, /* Source and Destination IP addresses
                                           and L4 Source and Destination ports
                                           translation for SNAPT */
    bcmFieldEgressFlowControlTranslateDnatDstIpOnly = 7, /* Destination IP address translation
                                           for DNAT */
    bcmFieldEgressFlowControlTranslateDnaptDstIpL4DstPort = 8, /* Destination IP address and L3
                                           destination port translation for
                                           DNAPT */
    bcmFieldEgressFlowControlTranslateDnaptSrcIpDstIpL4SrcPortL4DstPort = 9, /* Source and Destination IP addresses
                                           and L4 Source and Destination ports
                                           translation for DNAPT */
    bcmFieldEgressFlowControlTranslateIpmc = 10, /* Multicast NAT */
    bcmFieldEgressFlowControlVlanNew = 11, /* Triggers Egress Vlan Translation
                                           Lookup for new VLAN */
    bcmFieldEgressFlowControlSrcMacVlanNew = 12, /* Triggers Egress Vlan Translation
                                           Lookup for new Source MAC and VLAN */
    bcmFieldEgressFlowControlDstMacVlanNew = 13, /* Triggers Egress Vlan Translation
                                           Lookup for new Destination MAC and
                                           VLAN */
    bcmFieldEgressFlowControlSrcMacDstMacVlanNew = 14, /* Triggers Egress Vlan Translation
                                           Lookup for new Source and Destination
                                           MAC and VLAN */
    bcmFieldEgressFlowControlTranslateSnatSrcIpDstIp = 15, /* Source and Destination IP addresses
                                           translation for SNAT */
    bcmFieldEgressFlowControlCount = 16 /* Always last. Not to be used. */
} bcm_field_egress_flow_control_t;

/* Egress Flow Encap for bcmFieldActionEgressFlowEncapEnable */
typedef enum bcm_field_egress_flow_encap_e {
    bcmFieldEgressFlowEncapAppendIncomingOuterVlan = 0, /* The incoming Outer Vlan tag will be
                                           appended in the outgoing packet */
    bcmFieldEgressFlowEncapTwampOwampTxTimestamp = 1, /* Requires BROADCOM_PREMIUM license */
    bcmFieldEgressFlowEncapIOAMEnable = 2, /* Requires BROADCOM_PREMIUM license */
    bcmFieldEgressFlowEncapIOAMOverflowFlagSet = 3, /* Requires BROADCOM_PREMIUM license */
    bcmFieldEgressFlowEncapMacsecEncryptRxControlPktSvtagAdd = 4, /* Set control bit in SVTAG for MACSEC
                                           RX Control Packets. */
    bcmFieldEgressFlowEncapCount = 5    /* Always last. Not to be used. */
} bcm_field_egress_flow_encap_t;

/* Parameters for bcmFieldActionDlbEcmpMonitorEnable */
#define BCM_FIELD_L3INGRESS_STRENGTH_HIGH   (1 << 0)   /* This prioritizes
                                                          L3_TUNNEL/MPLS over
                                                          VFP, Port and Vlan
                                                          Mpls */
#define BCM_FIELD_L3INGRESS_STRENGTH_LOW    (1 << 1)   /* This prioritizes
                                                          L3_TUNNEL/MPLS and
                                                          Port over VFP and Vlan
                                                          Mpls */

/* 
 * Used as data value for qualifier
 * bcm_field_qualify_MacsecControlPkt.Used as param0 for action
 * bcmFieldActionMacSecDecryptPktType and
 * bcmFieldActionMacSecEncryptPktType
 */
typedef enum bcm_field_macsec_encrypt_decrypt_pkt_e {
    bcmFieldMacSecEncryptDecryptPktData = 0, /* MACSEC Encrypt data packet or Decrypt
                                           data packet. */
    bcmFieldMacSecEncryptDecryptPktControl = 1, /* MACSEC Encrypt control packet or
                                           Decrypt control packet. */
    bcmFieldMacSecEncryptDecryptPktCount = 2 /* Always last. Not to be used. */
} bcm_field_macsec_encrypt_decrypt_pkt_t;

/* Compare result operands between a pair of values. */
typedef enum bcm_field_compare_operand_e {
    bcmFieldCompareOperandFirst = 0,    /* The first value is equal to the
                                           second value. */
    bcmFieldCompareOperandEqual = bcmFieldCompareOperandFirst, /* The first value is equal to the
                                           second value. */
    bcmFieldCompareOperandNotEqual = 1, /* The first value is not equal to the
                                           second value. */
    bcmFieldCompareOperandFirstKeySmaller = 2, /* The first value is smaller then the
                                           second value. */
    bcmFieldCompareOperandFirstKeyNotSmaller = 3, /* The first value is not smaller then
                                           the second value. */
    bcmFieldCompareOperandFirstKeyBigger = 4, /* The first value is bigger then the
                                           second value. */
    bcmFieldCompareOperandFirstKeyNotBigger = 5, /* The first value is not bigger then
                                           the second value. */
    bcmFieldCompareOperandCount = 6     /* Always last. Number of Base Types. */
} bcm_field_compare_operand_t;

#define BCM_FIELD_COMPARE_OPERAND_STRINGS \
{ \
    "Equal", \
    "NotEqual", \
    "FirstKeySmaller", \
    "FirstKeyNotSmaller", \
    "FirstKeyBigger", \
    "FirstKeyNotBigger"  \
}

/* 
 * Field optional flag used for flushing hit indication info for all
 * entries.
 */
#define BCM_FIELD_ENTRY_HIT_FLUSH_ALL   (1 << 1)   

/* Ace context. */
typedef enum bcm_field_ace_context_e {
    bcmFieldAceContextFirst = 0,        /* First element, not in use. */
    bcmFieldAceContextNull = bcmFieldAceContextFirst, /* Null ACE context. */
    bcmFieldAceContextReflector = 1,    /* Ace context which is used for
                                           Reflector application (ERPP Trap). */
    bcmFieldAceContextForwardingCodeOverride = 2, /* Ace context which is used for
                                           Forwarding code override. */
    bcmFieldAceContextIFATrap = 3,      /* Ace context which is used for IFA
                                           Trap. */
    bcmFieldAceContextAlternateMarking = 4, /* ACE context action, used to set the
                                           context selection for ENCAP_1/2. */
    bcmFieldAceContextCount = 5         /* Always last. Not a usable value. */
} bcm_field_ace_context_t;

#define BCM_FIELD_ACE_CONTEXT_STRINGS \
{ \
    "Null", \
    "Reflector", \
    "ForwardingCodeOverride", \
    "IFATrap", \
    "AlternateMarking"  \
}

/* 
 * Flex counter configuration structure. Used to attach or detach the
 * flex counter to field entry.
 */
typedef struct bcm_field_flexctr_config_s {
    uint32 flexctr_action_id;   /* Flex counter action ID. */
    uint32 counter_index;       /* Index to the counters associated to the flex
                                   counter action. */
} bcm_field_flexctr_config_t;

/* 
 * Presel Group configuration structure. Used to create a field presel
 * group with specific attributes.
 */
typedef struct bcm_field_presel_group_config_s {
    uint32 flags;                       /* Presel Group create flags
                                           BCM_FIELD_GROUP_CREATE_XXX. */
    bcm_field_qset_t qset;              /* Group qualifier set. */
    bcm_field_presel_group_t presel_group; /* Presel Group ID. */
    bcm_field_hintid_t hintid;          /* Hints for Presel Group Creation. */
} bcm_field_presel_group_config_t;

#endif /* __BCM_FIELD_H__ */
